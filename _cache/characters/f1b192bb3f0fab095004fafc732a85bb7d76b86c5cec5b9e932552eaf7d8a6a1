{"key":"data/default-user/characters/World Builder V1.4.png-1752464339551.4697","value":"{\"data\":{\"name\":\"World Builder V1.4\",\"description\":\"name: World Builder\\r\\ndescription: A specialized tool designed to create comprehensive, well-structured world information cards for SillyTavern. Transforms user ideas into properly formatted world info entries with clear organization and special rules implementation. All outputs use professional code formatting.\\r\\n\",\"personality\":\"\",\"first_mes\":\"examples: \\r\\n```\\r\\nuid: 002\\r\\ntrigger:\\r\\n  type: Constant\\r\\n  position: Before Character Definition\\r\\n  Title: Core Rules of Terra Fantasia\\r\\n  Comma_separated_list: core rules,world laws,physics,social rules,magic principles,terra fantasia rules\\r\\ncontent: |\\r\\n  # Foundational Laws Governing Terra Fantasia\\r\\n  physical_laws: Standard medieval physics; gravity applies, time flows linearly. Magical alterations possible but rare and taxing.\\r\\n  magic_basics: Relies on channeling ambient 'Mana' or internal reserves. Different schools exist (Elemental, Healing, Illusion, etc.). Requires focus and often incantations/gestures. Mana exhaustion is a risk.\\r\\n  social_norms: Feudal structures common (Kingdoms), some regions have different governance (Republics, Guilds). Adventurers are recognized but operate under Guild charters or local laws. Divine influence exists via temples and clerics.\\r\\n  combat_principles: Mix of melee (swords, spears), ranged (bows), and magic. Armor provides protection. Monsters possess varied abilities.\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n#右翻第二页开始使用！\\r\\n\\r\\n\\r\\n# 蓝绿灯提示词说明\\r\\n\\r\\n## 类型说明\\r\\n| 类型        | 名称        | 触发方式             | 操作要求                   |\\r\\n|-------------|-------------|----------------------|--------------------------|\\r\\n| 蓝灯        | 常驻灯      | 始终激活             | 可删除`Comma_separated_list`内关键词 |\\r\\n| 绿灯        | 关键词灯    | 关键词匹配时触发     | 需配置有效关键词列表       |\\r\\n\\r\\n---\\r\\n\\r\\n## 位置要求\\r\\n| 位置属性       | 说明                                                                 | 特殊标记       |\\r\\n|----------------|---------------------------------------------------------------------|----------------|\\r\\n| 插入位置       | 需参考世界书【插入位置概念】，确保关联条目深度控制                  | 部分含`@D`标识 |\\r\\n| 条目递归       | 蓝灯条目需单独配置`[防止进一步递归]`，避免自动触发其他条目          | *强制要求*     |\\r\\n\\r\\n---\\r\\n\\r\\n## 关键词管理\\r\\n| 分类      | 格式              | 注意事项                     |\\r\\n|-----------|-------------------|----------------------------|\\r\\n| 绿灯关键词| 逗号分隔列表      | 需人工审核有效性，AI生成可能不合适 |\\r\\n| 蓝灯关键词| *无* (需手动清空) | 确保条目激活后不关联其他触发器  |\\r\\n\\r\\n---\\r\\n\\r\\n## 工具使用指南\\r\\n| 功能          | 链接                                                                            | 常见错误检验           |\\r\\n|---------------|---------------------------------------------------------------------------------|------------------------|\\r\\n| 聊天记录转世界书工具 | [一键转换工具](https://discordapp.com/channels/1291925535324110879/1347803350044770335/1359908888757145873)                                      | ① 检查并删除YAML注释<br>② 确保首行无空格 |\\r\\n\\r\\n---\\r\\n\\r\\n## 注意事项\\r\\n1. **蓝灯汇总**：若通过复制制作世界书，必须在条目中激活`[防止进一步递归]`  \\r\\n\\r\\n\",\"avatar\":\"none\",\"mes_example\":\"\",\"scenario\":\"\",\"creator_notes\":\"\",\"system_prompt\":\"\",\"post_history_instructions\":\"\",\"alternate_greetings\":[\"# 🌍 世界信息生成器  v 1.4 By Aki\\r\\n\\r\\n我将帮助您为 SillyTavern 创建详细且格式正确的世界卡。所有输出都将以专业代码块形式呈现。\\r\\n\\r\\n## 使用方法：\\r\\n1. 描述您的世界概念，需要生成的是大/中/小世界观（完整世界观，城市OR组织，单一建筑）\\r\\n2. 提及需要独立条目的关键角色或实体，如果需要条目众多，可以要求AI先生成蓝灯汇总条目，之后再补充绿灯详细条目\\r\\n\\r\\n\\r\\n## 我将生成：\\r\\n- 采用专业代码语法的格式正确世界条目\\r\\n\\r\\n\\r\\n**示例输入**：\\\"我想要一个赛博朋克世界，魔法已重新出现，企业控制社会，黑客可以操纵现实代码。\\\"\\r\\n\\r\\n只需分享您的世界概念，剩下的交给我处理！\\r\\n\\r\\n\\r\\n\",\"# 🌍 角色信息生成器  v 1.4 By Aki\\r\\n\\r\\n我将帮助您为 SillyTavern 创建详细且格式正确的角色卡。所有输出都将以专业代码块形式呈现。\\r\\n\\r\\n## 使用方法：\\r\\n1. 描述您的角色概念，需要生成的是什么类型的角色\\r\\n2. 提及需要独立条目的关键角色或实体，如果需要条目众多，可以要求AI先生成蓝灯汇总条目，之后再补充绿灯详细条目\\r\\n\\r\\n\\r\\n## 我将生成：\\r\\n- 采用专业代码语法的格式角色条目\\r\\n\\r\\n\\r\\n**示例输入**：\\\"我想要一个电子魅魔。\\\"\\r\\n\\r\\n只需分享您的角色概念，剩下的交给我处理！\"],\"tags\":[],\"creator\":\"fitting_oven_3731\",\"character_version\":\"\",\"extensions\":{\"depth_prompt\":{\"prompt\":\"\",\"depth\":4,\"role\":\"system\"},\"fav\":false,\"talkativeness\":\"0.5\",\"world\":\"World Builder 1.4\",\"regex_scripts\":[{\"id\":\"def0f56c-249e-4c27-ae3a-1e8ba17b0bc3\",\"scriptName\":\"黑金导航模块：带商店背包弹幕保存\",\"findRegex\":\"<map_data>([\\\\s\\\\S]*?)<\\\\/map_data>\",\"replaceString\":\"```html\\n<!DOCTYPE html>\\n<html lang=\\\"zh-CN\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>恋爱冒险地图</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\\\">\\n    <link href=\\\"https://fonts.googleapis.com/css2?family=ZCOOL+XiaoWei&family=ZCOOL+QingKe+HuangYou&display=swap\\\" rel=\\\"stylesheet\\\">\\n</head>\\n<body>\\n    <div id=\\\"map-data-source\\\" style=\\\"display:none;\\\">$1</div>\\n\\n    <div class=\\\"map-interface\\\">\\n        <div class=\\\"map-header\\\">\\n            <h2 id=\\\"map-title\\\">通用地图导航</h2>\\n            </button>\\n            <!-- 右上角按钮容器 -->\\n            <div class=\\\"top-right-buttons\\\">\\n                <button class=\\\"partner-button\\\" id=\\\"shop-button\\\">\\n                    <i class=\\\"fas fa-store\\\"></i> 商店\\n                </button>\\n                <button class=\\\"partner-button\\\" id=\\\"inventory-button\\\">\\n                    <i class=\\\"fas fa-briefcase\\\"></i> 背包\\n                </button>\\n                <button class=\\\"partner-button\\\" id=\\\"toggle-bullet-chat-btn\\\">\\n                    <i class=\\\"fas fa-comments\\\"></i> 弹幕\\n                </button>\\n                <!-- 新增：读取按钮 (移到设置左侧) -->\\n                <button class=\\\"partner-button\\\" id=\\\"load-button\\\" title=\\\"读取已保存的状态\\\">\\n                    <i class=\\\"fas fa-folder-open\\\"></i> 读取\\n                </button>\\n                <!-- 设置按钮保持独立样式 -->\\n                <button id=\\\"settings-toggle-btn\\\" class=\\\"settings-toggle-button top-right-button\\\" title=\\\"打开设置\\\">\\n                     <i class=\\\"fas fa-cog\\\"></i> 设置\\n                 </button>\\n            </div>\\n        </div>\\n\\n        <!-- Bullet Chat Container -->\\n        <div id=\\\"bullet-chat-container\\\" class=\\\"bullet-chat-container\\\">\\n            <div class=\\\"bullet-chat-header\\\" id=\\\"bullet-chat-header\\\">\\n                <span><i class=\\\"fas fa-comment-alt\\\"></i> 剧情弹幕</span>\\n                <button id=\\\"close-bullet-chat-btn\\\" class=\\\"close-bullet-button\\\" title=\\\"关闭弹幕\\\">&times;</button>\\n            </div>\\n            <div class=\\\"bullet-chat-content\\\" id=\\\"bullet-chat-content\\\">\\n                <!-- Bullet comments will be added here -->\\n            </div>\\n            <!-- Bullet Reply Area -->\\n            <div class=\\\"bullet-reply-area\\\">\\n                <input type=\\\"text\\\" id=\\\"bullet-reply-input\\\" placeholder=\\\"与弹幕对话...\\\">\\n                <button id=\\\"send-bullet-reply-btn\\\" title=\\\"发送\\\">\\n                    <i class=\\\"fas fa-paper-plane\\\"></i>\\n                </button>\\n            </div>\\n        </div>\\n\\n        <div id=\\\"current-important-characters\\\" class=\\\"current-partners-section hidden\\\">\\n             <div class=\\\"section-title\\\"><i class=\\\"fas fa-star\\\"></i> 当前地图重要人物</div>\\n             <div id=\\\"important-character-buttons\\\" class=\\\"partner-button-list\\\">\\n             </div>\\n        </div>\\n\\n        <div id=\\\"movement-alert\\\" class=\\\"movement-alert hidden\\\">\\n            <i class=\\\"fas fa-exclamation-triangle\\\"></i> 提示：你现在无法移动\\n        </div>\\n\\n        <div id=\\\"main-locations\\\" class=\\\"location-grid\\\">\\n            <!-- Visual Map Area -->\\n            <div id=\\\"visual-map-container\\\">\\n                <svg id=\\\"visual-map\\\" viewBox=\\\"0 0 800 600\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n                    <!-- SVG map elements will be added here by JavaScript -->\\n                </svg>\\n                <!-- Optional: Tooltip for locations -->\\n                <div class=\\\"map-tooltip\\\" id=\\\"map-tooltip\\\">Tooltip</div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"switch-area-section\\\">\\n             <button id=\\\"switch-area-button\\\" class=\\\"switch-area-button\\\">\\n                 <i class=\\\"fas fa-globe-asia\\\"></i> 切换大区域\\n             </button>\\n        </div>\\n\\n        <div id=\\\"sub-locations\\\" class=\\\"sub-location-grid hidden\\\">\\n        </div>\\n\\n        <div id=\\\"location-details\\\" class=\\\"location-details hidden\\\">\\n            <div class=\\\"detail-header\\\">\\n                <i class=\\\"fas fa-map-marker-alt\\\"></i> <span id=\\\"selected-location\\\">未选择</span>\\n            </div>\\n            <div class=\\\"detail-content\\\">\\n                <div class=\\\"character-section\\\">\\n                    <div class=\\\"section-title\\\"><i class=\\\"fas fa-users\\\"></i> 可能遇见的人</div>\\n                    <div id=\\\"location-characters\\\" class=\\\"character-list\\\">\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"action-section\\\">\\n                <button id=\\\"action-btn\\\" class=\\\"action-button\\\" disabled>\\n                    <i class=\\\"fas fa-map-signs\\\"></i> 选择地点\\n                </button>\\n            </div>\\n        </div>\\n\\n        <div id=\\\"game-actions-section\\\" class=\\\"game-actions-section\\\">\\n            <!-- 时间与流程 -->\\n            <button id=\\\"action-wait-moment\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-hourglass-start\\\"></i> 等待片刻</button>\\n            <button id=\\\"action-wait-hour\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-hourglass-half\\\"></i> 等待1小时</button>\\n            <button id=\\\"action-skip-timeblock\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-forward\\\"></i> 跳到下时段</button>\\n            <button id=\\\"action-skip-day\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-calendar-day\\\"></i> 快进到明天</button>\\n            <button id=\\\"action-skip-weekend\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-calendar-week\\\"></i> 快进到周末</button>\\n            <button id=\\\"action-skip-date\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-calendar-alt\\\"></i> 快进到日期</button>\\n            <button id=\\\"action-skip-plot\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-fast-forward\\\"></i> 跳过剧情</button>\\n            <button id=\\\"action-end-activity\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-stop-circle\\\"></i> 结束活动</button>\\n            <!-- 社交与关系 -->\\n            <button id=\\\"action-initiate-talk\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-comment-dots\\\"></i> 发起对话</button>\\n            <button id=\\\"action-ask-info\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-question-circle\\\"></i> 询问信息</button>\\n            <button id=\\\"action-observe-char\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-eye\\\"></i> 观察对方</button>\\n            <button id=\\\"action-give-gift\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-gift\\\"></i> 赠送礼物</button>\\n            <button id=\\\"action-make-request\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-hand-holding-heart\\\"></i> 提出请求</button>\\n            <button id=\\\"action-invite-join\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-user-plus\\\"></i> 邀请同行</button>\\n            <button id=\\\"action-ask-date\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-heart\\\"></i> 邀请约会</button>\\n            <button id=\\\"action-date-interact\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-glass-cheers\\\"></i> 约会互动</button>\\n            <button id=\\\"action-flirt\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-grin-wink\\\"></i> 调情</button>\\n            <button id=\\\"action-hold-hands\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-hand-holding\\\"></i> 牵手</button>\\n            <button id=\\\"action-hug\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-child-reaching\\\"></i> 拥抱</button>\\n            <button id=\\\"action-kiss\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-kiss-wink-heart\\\"></i> 亲吻</button>\\n            <button id=\\\"action-comfort\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-hand-holding-medical\\\"></i> 安慰对方</button>\\n            <button id=\\\"action-apologize\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-praying-hands\\\"></i> 道歉</button>\\n            <button id=\\\"action-thank\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-thumbs-up\\\"></i> 感谢</button>\\n            <button id=\\\"action-goodbye\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-sign-out-alt\\\"></i> 告别</button>\\n            <button id=\\\"action-call\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-phone\\\"></i> 打电话</button>\\n            <button id=\\\"action-send-message\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-envelope\\\"></i> 发消息</button>\\n            <button id=\\\"action-check-relation\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-users\\\"></i> 查看关系</button>\\n            <!-- 物品与环境 -->\\n            <button id=\\\"action-check-inventory\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-briefcase\\\"></i> 查看背包</button>\\n            <button id=\\\"action-use-item\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-hand-sparkles\\\"></i> 使用物品</button>\\n            <button id=\\\"action-equip-item\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-tshirt\\\"></i> 装备物品</button>\\n            <button id=\\\"action-buy-item\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-shopping-cart\\\"></i> 购买物品</button>\\n            <button id=\\\"action-sell-item\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-dollar-sign\\\"></i> 出售物品</button>\\n            <button id=\\\"action-examine-env\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-search-location\\\"></i> 检查环境</button>\\n            <button id=\\\"action-interact-object\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-hand-pointer\\\"></i> 与物互动</button>\\n            <!-- 角色状态与行动 -->\\n            <button id=\\\"action-check-status\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-id-card\\\"></i> 查看状态</button>\\n            <button id=\\\"action-work\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-briefcase\\\"></i> 工作</button>\\n            <button id=\\\"action-study\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-book-reader\\\"></i> 学习</button>\\n            <button id=\\\"action-relax\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-couch\\\"></i> 休息放松</button>\\n            <button id=\\\"action-check-map\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-map-marked-alt\\\"></i> 查看地图</button>\\n            <button id=\\\"action-check-quests\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-tasks\\\"></i> 查看任务</button>\\n            <button id=\\\"action-save-game\\\" class=\\\"game-action-button\\\"><i class=\\\"fas fa-save\\\"></i> 保存游戏</button>\\n        </div>\\n    </div>\\n\\n    <div id=\\\"confirm-overlay\\\" class=\\\"modal-overlay hidden\\\">\\n        <div class=\\\"confirm-dialog\\\">\\n            <h4 id=\\\"confirm-title\\\">确认操作</h4>\\n            <p id=\\\"confirm-message\\\"></p>\\n            <div class=\\\"dialog-buttons\\\">\\n                <button id=\\\"cancel-action-btn\\\" class=\\\"dialog-button cancel-button\\\">\\n                    <i class=\\\"fas fa-times\\\"></i> 再想想\\n                </button>\\n                <button id=\\\"execute-action-btn\\\" class=\\\"dialog-button confirm-button\\\">\\n                    <i class=\\\"fas fa-check\\\"></i> 确定\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div id=\\\"character-modal\\\" class=\\\"modal-overlay hidden\\\">\\n        <div class=\\\"character-modal-dialog\\\">\\n            <button id=\\\"close-modal-btn\\\" class=\\\"close-modal-button\\\">&times;</button>\\n            <h4 id=\\\"modal-character-name\\\">角色名称</h4>\\n            <div id=\\\"modal-character-description\\\" class=\\\"modal-description-content\\\">\\n            </div>\\n            <div id=\\\"modal-interaction-options\\\" class=\\\"interaction-options-grid\\\">\\n            </div>\\n            <div id=\\\"modal-custom-input-area\\\" class=\\\"custom-input-area\\\">\\n                <input type=\\\"text\\\" id=\\\"custom-interaction-input\\\" placeholder=\\\"输入你想说的话...\\\">\\n                <button id=\\\"send-custom-interaction-btn\\\" class=\\\"custom-send-button\\\">\\n                    <i class=\\\"fas fa-paper-plane\\\"></i> 发送\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <script>\\n        let mapData = null;\\n        let selectedMain = null;\\n        let selectedSub = null;\\n        let selectedCharacterName = null;\\n        let hasMoveBlock = false;\\n        let externalAreasList = []; // Note: This variable seems unused, consider removing if confirmed.\\n\\n        // --- Shop & Inventory Data ---\\n        let playerGold = 0;\\n        let shopItems = [];\\n        let inventoryItems = [];\\n\\n        // --- Save/Load Constants ---\\n        const SAVE_STORAGE_KEY = 'mapPluginSaves_v1'; // Key for map state localStorage\\n        const CHARACTER_STORAGE_KEY = 'mapPluginCharacters_v1'; // Key for global character localStorage\\n\\n        // --- Helper Function for Centering Modals ---\\n        function positionModalCenter(modalDialogElement) {\\n            if (!modalDialogElement) {\\n                console.error(\\\"Modal dialog element not provided for centering.\\\");\\n                return;\\n            }\\n\\n            const viewportWidth = window.innerWidth;\\n            const viewportHeight = window.innerHeight;\\n            const offset = 15; // Minimum space from viewport edges\\n\\n            // Ensure the element is visible (or temporarily visible) to measure accurately\\n            const overlay = modalDialogElement.closest('.modal-overlay, .settings-panel'); // Find parent overlay/panel\\n            let overlayOriginallyHidden = false;\\n            let overlayOriginalVisibility = '';\\n            let overlayOriginalDisplay = '';\\n            let overlayWasHiddenByClass = false;\\n\\n            if (overlay) {\\n                 overlayWasHiddenByClass = overlay.classList.contains('hidden');\\n                 const computedDisplay = getComputedStyle(overlay).display;\\n\\n                 if (overlayWasHiddenByClass || computedDisplay === 'none') {\\n                    overlayOriginallyHidden = true;\\n                    overlayOriginalVisibility = overlay.style.visibility;\\n                    overlayOriginalDisplay = overlay.style.display;\\n                    overlay.style.visibility = 'hidden'; // Keep hidden but allow layout calculation\\n                    overlay.style.display = 'block';    // Or 'flex', ensure it takes space\\n                    if (overlayWasHiddenByClass) overlay.classList.remove('hidden'); // Temporarily remove class\\n                 }\\n            }\\n\\n            // Also ensure the dialog itself isn't display:none or visibility:hidden\\n            let dialogOriginalDisplay = modalDialogElement.style.display;\\n            let dialogOriginalVisibility = modalDialogElement.style.visibility;\\n            let dialogOriginalPosition = modalDialogElement.style.position; // Store original position\\n\\n            modalDialogElement.style.visibility = 'hidden'; // Ensure measurable\\n            modalDialogElement.style.display = 'block'; // Or appropriate display type\\n            modalDialogElement.style.position = 'absolute'; // Needed for offsetWidth/Height calculation\\n\\n            const modalWidth = modalDialogElement.offsetWidth;\\n            const modalHeight = modalDialogElement.offsetHeight;\\n\\n             // Restore original styles after measurement\\n             modalDialogElement.style.display = dialogOriginalDisplay;\\n             modalDialogElement.style.visibility = dialogOriginalVisibility;\\n             modalDialogElement.style.position = dialogOriginalPosition;\\n\\n            if (overlayOriginallyHidden && overlay) {\\n                if (overlayWasHiddenByClass) overlay.classList.add('hidden'); // Re-add class if removed\\n                overlay.style.visibility = overlayOriginalVisibility;\\n                overlay.style.display = overlayOriginalDisplay;\\n            }\\n\\n            if (!modalWidth || !modalHeight || modalWidth <= 0 || modalHeight <= 0) {\\n                console.warn(\\\"Could not get valid modal dimensions for centering. Applying default styles.\\\");\\n                modalDialogElement.style.position = 'absolute';\\n                modalDialogElement.style.top = '10%'; // Fallback position\\n                modalDialogElement.style.left = '10%';\\n                modalDialogElement.style.transform = 'none';\\n                return;\\n            }\\n\\n            let top = (viewportHeight - modalHeight) / 2;\\n            let left = (viewportWidth - modalWidth) / 2;\\n\\n            // Clamp to viewport with offset\\n            top = Math.max(offset, Math.min(top, viewportHeight - modalHeight - offset));\\n            left = Math.max(offset, Math.min(left, viewportWidth - modalWidth - offset));\\n\\n            modalDialogElement.style.position = 'absolute'; // Ensure absolute positioning\\n            modalDialogElement.style.top = `${top}px`;\\n            modalDialogElement.style.left = `${left}px`;\\n            modalDialogElement.style.transform = 'none'; // Remove any centering transforms like translate(-50%, -50%)\\n            console.log(`DEBUG: Centered modal at top: ${top}px, left: ${left}px`);\\n        }\\n\\n        // --- Character Storage Helper Functions ---\\n        function getGlobalCharacters() {\\n            try {\\n                const savedJson = localStorage.getItem(CHARACTER_STORAGE_KEY);\\n                // Returns an object like: { \\\"CharName\\\": { description: \\\"...\\\", timestamp: \\\"ISOString\\\" }, ... }\\n                return savedJson ? JSON.parse(savedJson) : {};\\n            } catch (e) {\\n                console.error(\\\"Error reading global characters from localStorage:\\\", e);\\n                return {};\\n            }\\n        }\\n\\n        function saveGlobalCharacters(characters) {\\n             try {\\n                 localStorage.setItem(CHARACTER_STORAGE_KEY, JSON.stringify(characters));\\n                 console.log(\\\"Global character store saved.\\\");\\n             } catch (e) {\\n                 console.error(\\\"Error saving global characters to localStorage:\\\", e);\\n             }\\n        }\\n        // --- End Character Storage Helpers ---\\n\\n\\n        // --- Unified Icon Selection Function ---\\n        function getIconClassForLocation(name) {\\n            if (!name) return 'fa-map-pin'; // Default icon if name is missing\\n            const nameLower = name.toLowerCase();\\n\\n            // Prioritize Shopping Mall Keywords\\n            if (name.includes('美食') || name.includes('餐饮') || name.includes('餐厅') || name.includes('食堂') || name.includes('小吃')) return 'fa-utensils';\\n            if (name.includes('超市') || name.includes('百货')) return 'fa-shopping-cart';\\n            if (name.includes('服饰') || name.includes('服装') || name.includes('潮流') || name.includes('鞋') || name.includes('包')) return 'fa-shirt';\\n            if (name.includes('美妆') || name.includes('化妆品') || name.includes('护肤')) return 'fa-gem';\\n            if (name.includes('珠宝') || name.includes('饰品') || name.includes('名品') || name.includes('奢侈')) return 'fa-gem';\\n            if (name.includes('数码') || name.includes('电器') || name.includes('手机') || name.includes('电脑')) return 'fa-laptop';\\n            if (name.includes('家居') || name.includes('家具') || name.includes('生活')) return 'fa-couch';\\n            if (name.includes('娱乐') || name.includes('游戏') || name.includes('ktv')) return 'fa-gamepad';\\n            if (name.includes('影院') || name.includes('剧院') || name.includes('电影')) return 'fa-film';\\n            if (name.includes('书店') || name.includes('图书') || name.includes('文具')) return 'fa-book-open';\\n            if (name.includes('儿童') || name.includes('玩具') || name.includes('母婴')) return 'fa-child-reaching';\\n            if (name.includes('运动') || name.includes('健身') || name.includes('体育')) return 'fa-futbol';\\n            if (name.includes('咖啡') || name.includes('饮品') || name.includes('茶')) return 'fa-coffee';\\n            if (name.includes('面包') || name.includes('烘焙') || name.includes('甜点')) return 'fa-bread-slice';\\n            if (name.includes('车库') || name.includes('停车')) return 'fa-square-parking';\\n            if (name.includes('层') || name.includes('楼')) return 'fa-building';\\n\\n            // General Scene Keywords\\n            if (name.includes('学校') || name.includes('校区') || name.includes('教学') || name.includes('学院')) return 'fa-school';\\n            if (name.includes('公园') || name.includes('花园')) return 'fa-tree';\\n            if (name.includes('商业') || name.includes('市场') || name.includes('商店') || name.includes('街') || name.includes('贸易') || name.includes('店')) return 'fa-store';\\n            if (name.includes('住宅') || name.includes('家') || name.includes('公寓')) return 'fa-house-user';\\n            if (name.includes('站') || name.includes('车站') || name.includes('机场') || name.includes('地铁')) return 'fa-train-subway';\\n            if (name.includes('行政') || name.includes('办公') || name.includes('银行')) return 'fa-building-columns';\\n            if (name.includes('医院') || name.includes('诊所')) return 'fa-hospital';\\n            if (name.includes('酒吧') || name.includes('酒馆') || name.includes('旅店')) return 'fa-beer-mug-empty';\\n            if (name.includes('警') || name.includes('监狱') || name.includes('禁闭')) return 'fa-gavel';\\n            if (name.includes('工业') || name.includes('工厂')) return 'fa-industry';\\n            if (name.includes('港口') || name.includes('码头') || name.includes('海港') || name.includes('船')) return 'fa-anchor';\\n            if (name.includes('遗迹') || name.includes('废墟')) return 'fa-landmark-dome';\\n            if (name.includes('森林') || name.includes('丛林') || name.includes('树林')) return 'fa-tree';\\n            if (name.includes('山脉') || name.includes('山峰') || name.includes('高地')) return 'fa-mountain';\\n            if (name.includes('洞穴') || name.includes('矿洞') || name.includes('地穴')) return 'fa-dungeon';\\n            if (name.includes('城堡') || name.includes('要塞') || name.includes('堡垒')) return 'fa-chess-rook';\\n            if (name.includes('神殿') || name.includes('圣堂') || name.includes('教堂')) return 'fa-place-of-worship';\\n            if (name.includes('塔楼') || name.includes('高塔')) return 'fa-gopuram';\\n            if (name.includes('村庄') || name.includes('小镇')) return 'fa-house-chimney-user';\\n            if (name.includes('城市') || name.includes('主城') || name.includes('城区')) return 'fa-city';\\n            if (name.includes('沙漠') || name.includes('荒地')) return 'fa-sun';\\n            if (name.includes('河流') || name.includes('湖泊') || name.includes('沼泽')) return 'fa-water';\\n            if (name.includes('平原') || name.includes('草原')) return 'fa-leaf';\\n            if (name.includes('营地') || name.includes('据点')) return 'fa-campground';\\n            if (name.includes('战场')) return 'fa-shield-halved';\\n            if (name.includes('墓地') || name.includes('陵墓')) return 'fa-cross';\\n            if (name.includes('广场')) return 'fa-landmark';\\n\\n            return 'fa-map-pin'; // Default pin icon\\n        }\\n\\n        function parseMapData(text) {\\n            if (!text || typeof text !== 'string') {\\n                 console.error(\\\"Map data is empty or not a string.\\\");\\n                return null;\\n            }\\n            const data = {\\n                title: null,\\n                moveBlocked: false,\\n                locations: [],\\n                importantCharacters: [],\\n                externalAreas: [],\\n                currentUserPosition: { x: null, y: null },\\n                roads: [],\\n                bullets: [], // Add bullets array to data structure\\n                money: 0, // Add money\\n                shop: [], // Add shop items\\n                inventory: [] // Add inventory items\\n            };\\n            let processedText = text.trim();\\n             console.log(\\\"Starting map data parsing. Raw text length:\\\", processedText.length);\\n\\n            // Extract Header Tags\\n            const headerTags = {\\n                TITLE: (value) => { data.title = value; },\\n                IMPORTANT_CHARACTERS: (value) => {\\n                    const characters = [];\\n                    const characterRegex = /([^,{}\\\\s][^,{}]*?)\\\\s*\\\\{((?:[^{}]|\\\\{[^{}]*\\\\})*)\\\\}\\\\s*(?:,|$)/g;\\n                    let charMatch;\\n                    while ((charMatch = characterRegex.exec(value)) !== null) {\\n                        characters.push({ name: charMatch[1].trim(), description: charMatch[2].trim() });\\n                    }\\n                    data.importantCharacters = characters;\\n                },\\n                EXTERNAL_AREAS: (value) => { data.externalAreas = value.split(',').map(name => name.trim()).filter(name => name); },\\n                MOVEBLOCK: (value) => { data.moveBlocked = value.toUpperCase() === 'YES'; },\\n                CURRENT_POS: (value) => {\\n                    const coords = value.match(/^(\\\\d+)\\\\|(\\\\d+)$/);\\n                    if (coords) {\\n                        data.currentUserPosition.x = parseInt(coords[1], 10);\\n                        data.currentUserPosition.y = parseInt(coords[2], 10);\\n                    }\\n                },\\n                MONEY: (value) => { data.money = parseInt(value, 10) || 0; },\\n                SHOP_ITEMS: (value) => {\\n                    data.shop = value.split(',').map(itemStr => {\\n                        const parts = itemStr.trim().split('|');\\n                        if (parts.length >= 4) {\\n                            return { name: parts[0], price: parseInt(parts[1], 10) || 0, description: parts[2], category: parts[3] };\\n                        }\\n                        return null;\\n                    }).filter(item => item);\\n                },\\n                INVENTORY: (value) => {\\n                    data.inventory = value.split(',').map(itemStr => {\\n                        const parts = itemStr.trim().split('|');\\n                        if (parts.length >= 3) {\\n                            return { name: parts[0], description: parts[1], category: parts[2] };\\n                        }\\n                        return null;\\n                    }).filter(item => item);\\n                }\\n            };\\n\\n            let headerMatch;\\n            // Updated regex to include new tags, including IMPORTANT_CHARACTERS\\n            const headerRegex = /^\\\\[(TITLE|IMPORTANT_CHARACTERS|EXTERNAL_AREAS|MOVEBLOCK|CURRENT_POS|MONEY|SHOP_ITEMS|INVENTORY):\\\\s*(.*?)\\\\]\\\\s*\\\\n?/i;\\n            while ((headerMatch = processedText.match(headerRegex)) !== null) {\\n                const tagName = headerMatch[1].toUpperCase();\\n                const tagValue = headerMatch[2].trim();\\n                if (headerTags[tagName]) {\\n                    headerTags[tagName](tagValue);\\n                    console.log(`Extracted ${tagName}:`, tagValue);\\n                }\\n                processedText = processedText.substring(headerMatch[0].length).trimStart();\\n            }\\n\\n            // Process Location and Road Lines\\n            try {\\n                const lines = processedText.split('\\\\n').map(line => line.trim()).filter(line => line);\\n                let currentMainLocation = null;\\n                 console.log(`Processing ${lines.length} lines of location/road data...`);\\n\\n                for (const line of lines) {\\n                    const mainLocationRegex = /^\\\\[([^|\\\\]]+)(?:\\\\|(\\\\d+)\\\\|(\\\\d+))?(?:\\\\|(\\\\d+)\\\\|(\\\\d+))?\\\\]$/;\\n                    const mainLocationMatch = line.match(mainLocationRegex);\\n                    const subLocationMatch = line.match(/^-\\\\s*([^:]+?)\\\\s*:(.*)/);\\n                    const roadMatch = line.match(/^\\\\[ROAD\\\\|([^|]+)\\\\|(\\\\d+)(?:\\\\|([^\\\\]]+))?\\\\]$/);\\n\\n                    if (roadMatch) {\\n                        if (currentMainLocation) {\\n                            data.locations.push(currentMainLocation);\\n                            currentMainLocation = null;\\n                        }\\n                        const pointsStr = roadMatch[1];\\n                        const width = parseInt(roadMatch[2], 10);\\n                        const color = roadMatch[3] || '#888888';\\n                        const points = pointsStr.split(';').map(p => p.trim()).filter(p => p.includes(',')).map(p => {\\n                            const coords = p.split(',');\\n                            return { x: parseInt(coords[0], 10), y: parseInt(coords[1], 10) };\\n                        }).filter(p => !isNaN(p.x) && !isNaN(p.y));\\n\\n                        if (points.length >= 2) {\\n                            data.roads.push({ points: points.map(p => `${p.x},${p.y}`).join(' '), width, color });\\n                             console.log(`  Found road: ${points.length} points, width ${width}, color ${color}`);\\n                        } else {\\n                             console.warn(`  Skipping invalid road definition: ${line}`);\\n                        }\\n                    } else if (mainLocationMatch) {\\n                        const potentialMainName = mainLocationMatch[1].trim();\\n                        // Updated to check for IMPORTANT_CHARACTERS instead of CONVERSING\\n                        if (['TITLE', 'IMPORTANT_CHARACTERS', 'EXTERNAL_AREAS', 'MOVEBLOCK', 'ROAD', 'CURRENT_POS'].includes(potentialMainName.toUpperCase())) {\\n                             console.warn(`  Skipping line resembling a header tag: \\\"${line}\\\"`);\\n                             continue;\\n                        }\\n                        const xCoord = mainLocationMatch[2] ? parseInt(mainLocationMatch[2], 10) : null;\\n                        const yCoord = mainLocationMatch[3] ? parseInt(mainLocationMatch[3], 10) : null;\\n                        const wCoord = mainLocationMatch[4] ? parseInt(mainLocationMatch[4], 10) : null;\\n                        const hCoord = mainLocationMatch[5] ? parseInt(mainLocationMatch[5], 10) : null;\\n\\n                        if (currentMainLocation) {\\n                            data.locations.push(currentMainLocation);\\n                        }\\n                        currentMainLocation = {\\n                            name: potentialMainName,\\n                            x: xCoord, y: yCoord, width: wCoord, height: hCoord,\\n                            subLocations: []\\n                        };\\n                         console.log(`    Started new main location: \\\"${potentialMainName}\\\"`);\\n\\n                    } else if (subLocationMatch && currentMainLocation) {\\n                        const subName = subLocationMatch[1].trim();\\n                        const charactersText = subLocationMatch[2] ? subLocationMatch[2].trim() : '';\\n                        const characters = [];\\n                        try {\\n                            const characterRegex = /([^,{}\\\\s][^,{}]*?)\\\\s*(?:\\\\{([^}]*)\\\\})?\\\\s*(?:,|$)/g;\\n                            let charMatch;\\n                            characterRegex.lastIndex = 0;\\n\\n                            while ((charMatch = characterRegex.exec(charactersText)) !== null) {\\n                                let parsedName = charMatch[1] ? charMatch[1].trim() : null;\\n                                let parsedDescription = charMatch[2] ? charMatch[2].trim() : null;\\n\\n                                if (parsedName && parsedName.length > 0 && parsedName.toLowerCase() !== '无') {\\n                                    parsedName = parsedName.replace(/[\\\\])}]+$/, '').trim();\\n                                    // Check if the character is already in importantCharacters\\n                                    const isImportant = data.importantCharacters.some(ic => ic.name === parsedName);\\n                                    if (parsedName && !isImportant) { // Only add if not an important character\\n                                        characters.push({ name: parsedName, description: parsedDescription });\\n                                         console.log(`        Added NPC: \\\"${parsedName}\\\" ${parsedDescription ? '(with description)' : ''}`);\\n                                    } else if (parsedName && isImportant) {\\n                                         console.log(`        Skipped important character in sub-location: \\\"${parsedName}\\\"`);\\n                                    }\\n                                } else if (parsedName) {\\n                                     console.log(`        Skipped character (e.g., '无'): \\\"${parsedName}\\\"`);\\n                                }\\n                                if (charMatch[0].length === 0) { characterRegex.lastIndex++; }\\n                                if (characterRegex.lastIndex === charMatch.index) { break; }\\n                            }\\n                        } catch (charError) {\\n                             console.error(`      Error parsing characters for sublocation \\\"${subName}\\\":`, charError);\\n                        }\\n                        currentMainLocation.subLocations.push({ name: subName, characters: characters });\\n                         console.log(`    Finished sub-location \\\"${subName}\\\", found ${characters.length} characters.`);\\n                    } else {\\n                         // Check for BULLETS line AFTER checking for locations/roads\\n                         const bulletsMatch = line.match(/^\\\\[BULLETS:\\\\s*(.*)\\\\]$/i);\\n                         if (bulletsMatch) {\\n                             const bulletsContent = bulletsMatch[1].trim();\\n                             data.bullets = bulletsContent.split(';;').map(b => b.trim()).filter(b => b);\\n                             console.log(`  Extracted ${data.bullets.length} bullets.`);\\n                         } else {\\n                             console.log(`  Skipping line (not main/sub location, road, or bullets): \\\"${line}\\\"`);\\n                         }\\n                    }\\n                }\\n\\n                if (currentMainLocation) {\\n                    data.locations.push(currentMainLocation);\\n                }\\n\\n                 console.log(`Finished parsing locations and roads. Total main locations: ${data.locations.length}, Total roads: ${data.roads.length}, Current Pos: (${data.currentUserPosition.x ?? 'N/A'}, ${data.currentUserPosition.y ?? 'N/A'})`);\\n                 \\n                // The logic for adding conversing partners to the current sub-location is removed\\n                // as important characters are now handled by [IMPORTANT_CHARACTERS] tag globally.\\n\\n                 console.log(\\\"Map data parsing complete. Final data structure (locations might be large):\\\", { ...data, locations: `[${data.locations.length} main locations]`, roads: `[${data.roads.length} roads]` });\\n                return data;\\n            } catch (error) {\\n                 console.error(\\\"Error during map data parsing process:\\\", error);\\n                return null;\\n            }\\n        }\\n\\n        // --- Helper: Format mapData object back to string ---\\n        function formatMapDataToString(mapDataToFormat) {\\n            if (!mapDataToFormat) return '<map_data></map_data>'; // Handle null input\\n\\n            let output = '<map_data>\\\\n';\\n\\n            // Header Tags\\n            if (mapDataToFormat.title) output += `[TITLE: ${mapDataToFormat.title}]\\\\n`;\\n            if (mapDataToFormat.importantCharacters && mapDataToFormat.importantCharacters.length > 0) {\\n                 const importantCharsStr = mapDataToFormat.importantCharacters.map(char => `${char.name}{${char.description || ''}}`).join(','); // Ensure description is included\\n                 output += `[IMPORTANT_CHARACTERS: ${importantCharsStr}]\\\\n`;\\n            }\\n            if (mapDataToFormat.externalAreas && mapDataToFormat.externalAreas.length > 0) output += `[EXTERNAL_AREAS: ${mapDataToFormat.externalAreas.join(',')}]\\\\n`;\\n            output += `[MOVEBLOCK: ${mapDataToFormat.moveBlocked ? 'YES' : 'NO'}]\\\\n`;\\n            if (mapDataToFormat.currentUserPosition && typeof mapDataToFormat.currentUserPosition.x === 'number' && typeof mapDataToFormat.currentUserPosition.y === 'number') {\\n                output += `[CURRENT_POS: ${mapDataToFormat.currentUserPosition.x}|${mapDataToFormat.currentUserPosition.y}]\\\\n`;\\n            }\\n            if (typeof mapDataToFormat.money === 'number') output += `[MONEY: ${mapDataToFormat.money}]\\\\n`;\\n            if (mapDataToFormat.shop && mapDataToFormat.shop.length > 0) {\\n                const shopStr = mapDataToFormat.shop.map(item => `${item.name}|${item.price}|${item.description}|${item.category}`).join(',');\\n                output += `[SHOP_ITEMS: ${shopStr}]\\\\n`;\\n            }\\n            if (mapDataToFormat.inventory && mapDataToFormat.inventory.length > 0) {\\n                const invStr = mapDataToFormat.inventory.map(item => `${item.name}|${item.description}|${item.category}`).join(',');\\n                output += `[INVENTORY: ${invStr}]\\\\n`;\\n            }\\n\\n            // Roads\\n            if (mapDataToFormat.roads && mapDataToFormat.roads.length > 0) {\\n                mapDataToFormat.roads.forEach(road => {\\n                    // Convert points string back to X1,Y1;X2,Y2 format\\n                    const pointsStr = road.points.split(' ').map(p => p.replace(',', ',')).join(';');\\n                    output += `[ROAD|${pointsStr}|${road.width}|${road.color}]\\\\n`;\\n                });\\n            }\\n\\n            // Locations and Sub-locations\\n            if (mapDataToFormat.locations && mapDataToFormat.locations.length > 0) {\\n                mapDataToFormat.locations.forEach(loc => {\\n                    let locHeader = `[${loc.name}`;\\n                    if (loc.x !== null && loc.y !== null) locHeader += `|${loc.x}|${loc.y}`;\\n                    if (loc.width !== null && loc.height !== null) locHeader += `|${loc.width}|${loc.height}`;\\n                    locHeader += ']';\\n                    output += `${locHeader}\\\\n`;\\n\\n                    if (loc.subLocations && loc.subLocations.length > 0) {\\n                        loc.subLocations.forEach(sub => {\\n                            output += `- ${sub.name}: `;\\n                            if (sub.characters && sub.characters.length > 0) {\\n                                const charStr = sub.characters.map(char => {\\n                                    let charOutput = char.name;\\n                                    if (char.description) {\\n                                        // Ensure description doesn't contain invalid characters for the format if needed\\n                                        charOutput += `{${char.description}}`;\\n                                    }\\n                                    return charOutput;\\n                                }).join(', ');\\n                                output += `${charStr}\\\\n`;\\n                            } else {\\n                                output += `无\\\\n`; // Indicate no characters\\n                            }\\n                        });\\n                    }\\n                });\\n            }\\n\\n            // Bullets\\n            if (mapDataToFormat.bullets && mapDataToFormat.bullets.length > 0) {\\n                output += `[BULLETS: ${mapDataToFormat.bullets.join(';;')}]\\\\n`;\\n            }\\n\\n            output += '</map_data>';\\n            console.log(\\\"Formatted map data string:\\\", output); // Debug log\\n            return output;\\n        }\\n\\n        function renderMapInterface(mapData) {\\n            const titleElement = document.getElementById('map-title');\\n            titleElement.textContent = (mapData && mapData.title) ? mapData.title : '通用地图导航';\\n\\n            if (!mapData || !mapData.locations) {\\n                 document.getElementById('main-locations').innerHTML = '<p class=\\\"error-message\\\">地图数据加载失败</p>';\\n                 document.getElementById('sub-locations').classList.add('hidden');\\n                 document.getElementById('location-details').classList.add('hidden');\\n                 document.getElementById('movement-alert').classList.add('hidden');\\n                 return;\\n            }\\n            hasMoveBlock = mapData.moveBlocked;\\n            document.getElementById('movement-alert').classList.toggle('hidden', !hasMoveBlock); // Show/hide based on data\\n\\n            const svgMap = document.getElementById('visual-map');\\n            const tooltip = document.getElementById('map-tooltip');\\n            const svgNS = \\\"http://www.w3.org/2000/svg\\\";\\n            svgMap.innerHTML = ''; // Clear previous SVG content\\n\\n            // Update global data (Shop/Inventory related)\\n            playerGold = mapData.money || 0;\\n            shopItems = mapData.shop || [];\\n            inventoryItems = mapData.inventory || [];\\n            updatePlayerGold(); // Update display\\n\\n            // Render Roads FIRST\\n            if (mapData.roads && mapData.roads.length > 0) {\\n                mapData.roads.forEach(road => {\\n                    const polyline = document.createElementNS(svgNS, 'polyline');\\n                    polyline.setAttribute('points', road.points);\\n                    polyline.setAttribute('stroke', road.color);\\n                    polyline.setAttribute('stroke-width', road.width);\\n                    polyline.setAttribute('fill', 'none');\\n                    polyline.setAttribute('stroke-linecap', 'round');\\n                    polyline.setAttribute('stroke-linejoin', 'round');\\n                    polyline.classList.add('map-road');\\n                    svgMap.appendChild(polyline);\\n                });\\n            }\\n\\n            // Render Locations on SVG\\n            const defaultWidth = 100;\\n            const defaultHeight = 60;\\n\\n            mapData.locations.forEach(location => {\\n                if (location && typeof location.name === 'string' && location.x !== null && location.y !== null) {\\n                    const locWidth = location.width || defaultWidth;\\n                    const locHeight = location.height || defaultHeight;\\n                    const labelOffsetDy = locHeight / 2 + 5;\\n\\n                    const group = document.createElementNS(svgNS, 'g');\\n                    group.setAttribute('transform', `translate(${location.x}, ${location.y})`);\\n                    group.classList.add('map-location-group');\\n                    group.dataset.location = location.name;\\n                    group.style.pointerEvents = 'all';\\n\\n                    const rect = document.createElementNS(svgNS, 'rect');\\n                    rect.style.pointerEvents = 'all';\\n                    rect.setAttribute('width', locWidth);\\n                    rect.setAttribute('height', locHeight);\\n                    rect.setAttribute('rx', 5);\\n                    rect.setAttribute('ry', 5);\\n                    rect.classList.add('map-location-rect');\\n                    group.addEventListener('click', () => selectMainLocation(location));\\n                    group.appendChild(rect);\\n\\n                    const text = document.createElementNS(svgNS, 'text');\\n                    text.setAttribute('x', locWidth / 2);\\n                    text.setAttribute('y', labelOffsetDy);\\n                    text.classList.add('map-location-label');\\n                    text.textContent = location.name;\\n                    group.appendChild(text);\\n\\n                    if (tooltip) {\\n                        group.addEventListener('mouseenter', (e) => {\\n                            tooltip.textContent = location.name;\\n                            tooltip.style.left = `${e.clientX + 10}px`;\\n                            tooltip.style.top = `${e.clientY + 10}px`;\\n                            tooltip.classList.add('visible');\\n                        });\\n                        group.addEventListener('mousemove', (e) => {\\n                            tooltip.style.left = `${e.clientX + 10}px`;\\n                            tooltip.style.top = `${e.clientY + 10}px`;\\n                        });\\n                        group.addEventListener('mouseleave', () => {\\n                            tooltip.classList.remove('visible');\\n                        });\\n                    }\\n                    svgMap.appendChild(group);\\n                } else if (location && typeof location.name === 'string') {\\n                    console.warn(`Location \\\"${location.name}\\\" is missing coordinates and won't be rendered visually.`);\\n                }\\n            });\\n\\n            resetSelection(false);\\n\\n            const switchAreaBtn = document.getElementById('switch-area-button');\\n            const hasExternalAreas = mapData.externalAreas && mapData.externalAreas.length > 0;\\n            switchAreaBtn.classList.toggle('hidden', !hasExternalAreas);\\n            if (hasExternalAreas) {\\n                const newSwitchAreaBtn = switchAreaBtn.cloneNode(true); // Re-attach listener\\n                switchAreaBtn.parentNode.replaceChild(newSwitchAreaBtn, switchAreaBtn);\\n                newSwitchAreaBtn.addEventListener('click', () => showExternalAreas(mapData.externalAreas));\\n            }\\n\\n            // Render Current User Position (Red Dot)\\n            if (mapData.currentUserPosition && typeof mapData.currentUserPosition.x === 'number' && typeof mapData.currentUserPosition.y === 'number') {\\n                const userDot = document.createElementNS(svgNS, 'circle');\\n                userDot.setAttribute('cx', mapData.currentUserPosition.x);\\n                userDot.setAttribute('cy', mapData.currentUserPosition.y);\\n                userDot.setAttribute('r', 6);\\n                userDot.setAttribute('fill', 'red');\\n                userDot.setAttribute('stroke', 'white');\\n                userDot.setAttribute('stroke-width', 1.5);\\n                userDot.classList.add('current-user-position');\\n                userDot.style.pointerEvents = 'none';\\n                svgMap.appendChild(userDot);\\n                 console.log(`Rendered user position dot at (${mapData.currentUserPosition.x}, ${mapData.currentUserPosition.y})`);\\n            } else {\\n                 console.log(\\\"User position coordinates not available or invalid, skipping dot rendering.\\\");\\n            }\\n        }\\n\\n\\n        function selectMainLocation(location) {\\n            console.log(\\\"selectMainLocation called with location:\\\", location ? location.name : 'undefined/null');\\n            if (!location || !location.subLocations) {\\n                console.log(\\\"selectMainLocation returning early: location or subLocations missing.\\\");\\n                return;\\n            }\\n            console.log(\\\"selectMainLocation proceeding for:\\\", location.name);\\n\\n            selectedMain = location;\\n            selectedSub = null;\\n            selectedCharacterName = null;\\n            updateActionButtonState();\\n\\n            document.getElementById('location-details').classList.add('hidden');\\n            document.getElementById('sub-locations').classList.add('hidden');\\n            document.getElementById('switch-area-button').classList.remove('selected');\\n\\n            // Update selection state for SVG elements\\n            document.querySelectorAll('#visual-map .map-location-group').forEach(group => {\\n                group.classList.toggle('selected', group.dataset.location === location.name);\\n            });\\n\\n            const subLocationsContainer = document.getElementById('sub-locations');\\n            subLocationsContainer.innerHTML = '';\\n\\n            if (location.subLocations.length === 0) {\\n                 subLocationsContainer.innerHTML = '<p class=\\\"info-message\\\">此区域下没有具体的探索地点。</p>';\\n                 subLocationsContainer.classList.remove('hidden');\\n                 return;\\n            }\\n\\n            location.subLocations.forEach(subLocation => {\\n                if (!subLocation || typeof subLocation.name !== 'string') return;\\n                const button = document.createElement('button');\\n                button.className = 'sub-location-button';\\n                const iconClass = getIconClassForLocation(subLocation.name);\\n                button.innerHTML = `<i class=\\\"fas ${iconClass}\\\"></i> ${subLocation.name}`;\\n                button.dataset.sublocation = subLocation.name;\\n                button.addEventListener('click', () => selectSubLocation(subLocation));\\n                subLocationsContainer.appendChild(button);\\n            });\\n\\n            subLocationsContainer.classList.remove('hidden');\\n        }\\n\\n        function selectSubLocation(subLocation) {\\n            if (!subLocation || !subLocation.characters || !selectedMain) return;\\n\\n            selectedSub = subLocation;\\n            selectedCharacterName = null;\\n            updateActionButtonState();\\n\\n            document.querySelectorAll('#sub-locations .sub-location-button').forEach(btn => {\\n                btn.classList.toggle('selected', btn.dataset.sublocation === subLocation.name);\\n            });\\n\\n            document.getElementById('selected-location').textContent = `${selectedMain.name} - ${subLocation.name}`;\\n            const charactersContainer = document.getElementById('location-characters');\\n            charactersContainer.innerHTML = ''; // Clear previous characters\\n\\n            // Get list of important character names for filtering\\n            const importantCharacterNames = (mapData && mapData.importantCharacters) ? mapData.importantCharacters.map(ic => ic.name) : [];\\n            let nonImportantCharactersFound = false; // Flag to check if any non-important characters are rendered\\n\\n            if (subLocation.characters && subLocation.characters.length > 0) {\\n                subLocation.characters.forEach(characterObj => {\\n                    if (!characterObj || !characterObj.name) return;\\n\\n                    // Filter out important characters from sub-location display\\n                    if (importantCharacterNames.includes(characterObj.name)) {\\n                        console.log(`Filtering out important character \\\"${characterObj.name}\\\" from sub-location \\\"${subLocation.name}\\\"`);\\n                        return; // Skip this character, as they are an important character\\n                    }\\n\\n                    // This is a non-important character, render it\\n                    const charButton = document.createElement('button');\\n                    charButton.className = 'character-item';\\n                    charButton.dataset.characterName = characterObj.name;\\n                    if (characterObj.description) {\\n                        charButton.dataset.characterDescription = characterObj.description;\\n                    }\\n                    charButton.innerHTML = `<i class=\\\"fas fa-user\\\"></i> ${characterObj.name}`;\\n                    charButton.addEventListener('click', (event) => selectCharacter(characterObj.name, characterObj.description, event.currentTarget));\\n                    charactersContainer.appendChild(charButton);\\n                    nonImportantCharactersFound = true; // Mark that we found at least one non-important character\\n                });\\n            }\\n\\n            if (!nonImportantCharactersFound) { // If no non-important characters were rendered (either none existed or all were filtered)\\n                charactersContainer.innerHTML = '<div class=\\\"character-item empty\\\"><i class=\\\"fas fa-user-slash\\\"></i> 这里没有人</div>';\\n            }\\n            document.getElementById('location-details').classList.remove('hidden');\\n        }\\n\\n        function selectCharacter(characterName, characterDescription, triggerElement) {\\n            selectedCharacterName = characterName;\\n            const isImportantCharacter = !selectedSub; // True if selectedSub is null\\n\\n            if (isImportantCharacter) {\\n                // Explicitly nullify location context for important characters\\n                // This reinforces that their interaction is global, not tied to a specific sub-location.\\n                selectedMain = null;\\n                selectedSub = null;\\n                console.log(\\\"Selected an important character. Ensuring selectedMain and selectedSub are null.\\\");\\n            }\\n\\n            // Visual selection handling\\n            // Deselect all character items in sub-locations and important character buttons first\\n            document.querySelectorAll('#location-characters .character-item.selected').forEach(btn => btn.classList.remove('selected'));\\n            document.querySelectorAll('#important-character-buttons .partner-button.selected').forEach(btn => btn.classList.remove('selected'));\\n\\n            if (triggerElement) { // Highlight the clicked button\\n                triggerElement.classList.add('selected');\\n            }\\n\\n             const modal = document.getElementById('character-modal');\\n             const modalName = document.getElementById('modal-character-name');\\n             const modalDescription = document.getElementById('modal-character-description');\\n             const modalOptionsContainer = document.getElementById('modal-interaction-options');\\n\\n             modalDescription.textContent = '';\\n             modalOptionsContainer.innerHTML = '';\\n             modalName.textContent = characterName;\\n\\n            let interactionOptions = [];\\n            let descriptionParts = [];\\n\\n            if (characterDescription) {\\n                const allParts = characterDescription.split(';').map(p => p.trim()).filter(p => p);\\n                let optionsFound = false;\\n                allParts.forEach(part => {\\n                    if (optionsFound) {\\n                        interactionOptions.push(part);\\n                    } else if (part.startsWith('互动选项:')) {\\n                        const firstOption = part.substring('互动选项:'.length).trim();\\n                        if (firstOption) interactionOptions.push(firstOption);\\n                        optionsFound = true;\\n                    } else {\\n                        descriptionParts.push(part.replace(':', ': '));\\n                    }\\n                });\\n            }\\n\\n            modalDescription.textContent = descriptionParts.length > 0 ? descriptionParts.join('\\\\n') : '(没有更多信息)';\\n\\n            if (interactionOptions.length > 0) {\\n                interactionOptions.slice(0, 4).forEach(optionText => {\\n                    const button = document.createElement('button');\\n                    button.className = 'interaction-button';\\n                    button.textContent = optionText;\\n                    button.addEventListener('click', () => {\\n                         modal.classList.add('hidden');\\n                         if (isImportantCharacter) {\\n                             confirmGlobalCharacterInteraction(optionText); // New function for important chars\\n                         } else {\\n                             confirmInteraction(optionText); // Existing function for NPCs\\n                         }\\n                    });\\n                    modalOptionsContainer.appendChild(button);\\n                });\\n            } else {\\n                 modalOptionsContainer.innerHTML = '<p class=\\\"info-message\\\">没有可用的互动选项。</p>';\\n            }\\n\\n            modal.classList.remove('hidden');\\n            const characterModalDialog = modal.querySelector('.character-modal-dialog');\\n            requestAnimationFrame(() => positionModalCenter(characterModalDialog));\\n        }\\n\\n        function closeCharacterModal() {\\n            document.getElementById('character-modal').classList.add('hidden');\\n            selectedCharacterName = null;\\n             document.querySelectorAll('#location-characters .character-item.selected').forEach(btn => {\\n                btn.classList.remove('selected');\\n            });\\n            // Also deselect important character buttons if any were selected\\n            document.querySelectorAll('#important-character-buttons .partner-button.selected').forEach(btn => {\\n                btn.classList.remove('selected');\\n            });\\n        }\\n\\n        // New function for confirming interaction with important characters\\n        function confirmGlobalCharacterInteraction(optionText) {\\n            if (!selectedCharacterName) {\\n                console.error(\\\"confirmGlobalCharacterInteraction: selectedCharacterName is missing.\\\");\\n                return;\\n            }\\n\\n            const confirmTitle = document.getElementById('confirm-title');\\n            const confirmMessage = document.getElementById('confirm-message');\\n            const executeBtn = document.getElementById('execute-action-btn');\\n\\n            confirmTitle.textContent = '确认全局互动';\\n            confirmMessage.textContent = `要对重要人物 ${selectedCharacterName} 执行互动：“${optionText}” 吗？`;\\n            executeBtn.innerHTML = `<i class=\\\"fas fa-check\\\"></i> 确认互动`;\\n\\n            const interactionHandler = () => executeGlobalCharacterInteraction(optionText);\\n            const newExecuteBtn = executeBtn.cloneNode(true);\\n            executeBtn.parentNode.replaceChild(newExecuteBtn, executeBtn);\\n            newExecuteBtn.addEventListener('click', interactionHandler, { once: true });\\n\\n            const confirmOverlay = document.getElementById('confirm-overlay');\\n            const confirmDialog = confirmOverlay.querySelector('.confirm-dialog');\\n            confirmOverlay.classList.remove('hidden');\\n            requestAnimationFrame(() => positionModalCenter(confirmDialog));\\n        }\\n\\n        // New function for executing interaction with important characters\\n        function executeGlobalCharacterInteraction(optionText) {\\n            if (!selectedCharacterName) {\\n                document.getElementById('confirm-overlay').classList.add('hidden');\\n                console.error(\\\"executeGlobalCharacterInteraction: selectedCharacterName is missing.\\\");\\n                return;\\n            }\\n\\n            const cleanCharacterName = selectedCharacterName.replace(/[<>]/g, '');\\n            const cleanOptionText = optionText.replace(/[<>]/g, '');\\n            // For global characters, the location might be less specific or implied\\n            const message = `<request:{{user}}对重要人物 ${cleanCharacterName} 执行了互动：“${cleanOptionText}”>`;\\n\\n            sendGameActionRequest(message, \\\"全局互动失败\\\");\\n            document.getElementById('confirm-overlay').classList.add('hidden');\\n            // Deselect the important character button after interaction\\n            document.querySelectorAll('#important-character-buttons .partner-button.selected').forEach(btn => btn.classList.remove('selected'));\\n            selectedCharacterName = null; // Clear selection\\n        }\\n\\n\\n        function confirmInteraction(optionText) {\\n             if (!selectedCharacterName || !selectedSub || !selectedMain) {\\n                 console.error(\\\"confirmInteraction: Missing context (character, sub-location, or main-location).\\\");\\n                 return;\\n             }\\n\\n             const locationName = `${selectedMain.name} - ${selectedSub.name}`;\\n             const confirmTitle = document.getElementById('confirm-title');\\n             const confirmMessage = document.getElementById('confirm-message');\\n             const executeBtn = document.getElementById('execute-action-btn');\\n\\n             confirmTitle.textContent = '确认互动';\\n             confirmMessage.textContent = `要对 ${selectedCharacterName} 执行互动：“${optionText}” 吗？ (地点：${locationName})`;\\n             executeBtn.innerHTML = `<i class=\\\"fas fa-check\\\"></i> 确认互动`;\\n\\n             const interactionHandler = () => executeInteraction(optionText);\\n             const newExecuteBtn = executeBtn.cloneNode(true); // Re-attach listener\\n            executeBtn.parentNode.replaceChild(newExecuteBtn, executeBtn);\\n            newExecuteBtn.addEventListener('click', interactionHandler, { once: true });\\n\\n            const confirmOverlay = document.getElementById('confirm-overlay');\\n            const confirmDialog = confirmOverlay.querySelector('.confirm-dialog');\\n            confirmOverlay.classList.remove('hidden');\\n            requestAnimationFrame(() => positionModalCenter(confirmDialog));\\n        }\\n\\n        function executeInteraction(optionText) { // This function is now primarily for NPCs in sub-locations\\n             if (!selectedCharacterName || !selectedSub || !selectedMain) {\\n                 document.getElementById('confirm-overlay').classList.add('hidden');\\n                 console.error(\\\"executeInteraction: Missing context for NPC interaction.\\\");\\n                 return;\\n             }\\n\\n             const locationName = `${selectedMain.name} - ${selectedSub.name}`;\\n             const cleanLocationName = locationName.replace(/[<>]/g, '');\\n             const cleanCharacterName = selectedCharacterName.replace(/[<>]/g, '');\\n             const cleanOptionText = optionText.replace(/[<>]/g, '');\\n             const message = `<request:{{user}}对${cleanCharacterName}执行了互动：“${cleanOptionText}”. 在${cleanLocationName}>`;\\n\\n             sendGameActionRequest(message, \\\"互动失败\\\");\\n             document.getElementById('confirm-overlay').classList.add('hidden');\\n        }\\n\\n        function updateActionButtonState() {\\n            const actionBtn = document.getElementById('action-btn');\\n            if (selectedSub) {\\n                 actionBtn.innerHTML = `<i class=\\\"fas fa-walking\\\"></i> 前往此处`;\\n                 actionBtn.disabled = false;\\n                 actionBtn.classList.remove('hidden'); // Ensure visible\\n                 actionBtn.onclick = confirmAction; // Re-assign click handler\\n            } else {\\n                 actionBtn.innerHTML = `<i class=\\\"fas fa-map-signs\\\"></i> 选择地点`;\\n                 actionBtn.disabled = true;\\n                 actionBtn.classList.remove('hidden'); // Ensure visible\\n                 actionBtn.onclick = null; // Remove click handler\\n            }\\n        }\\n\\n        function confirmAction() {\\n            if (!selectedSub || selectedCharacterName) return; // Don't allow 'go to' if character selected\\n\\n            const locationName = `${selectedMain.name} - ${selectedSub.name}`;\\n            const confirmTitle = document.getElementById('confirm-title');\\n            const confirmMessage = document.getElementById('confirm-message');\\n            const executeBtn = document.getElementById('execute-action-btn');\\n\\n            confirmTitle.textContent = '确认前往';\\n            const characters = selectedSub.characters || [];\\n            const characterNames = characters.map(c => c.name).filter(name => name);\\n            confirmMessage.textContent = characterNames.length > 0\\n                ? `前往 ${locationName}？你可能会遇见：${characterNames.join(', ')}`\\n                : `前往 ${locationName}？那里好像没有人。`;\\n            executeBtn.innerHTML = `<i class=\\\"fas fa-check\\\"></i> 出发吧`;\\n\\n            const executeGoHandler = () => executeAction();\\n            const newExecuteBtn = executeBtn.cloneNode(true); // Re-attach listener\\n            executeBtn.parentNode.replaceChild(newExecuteBtn, executeBtn);\\n            newExecuteBtn.addEventListener('click', executeGoHandler, { once: true });\\n\\n            const confirmOverlay = document.getElementById('confirm-overlay');\\n            const confirmDialog = confirmOverlay.querySelector('.confirm-dialog');\\n            confirmOverlay.classList.remove('hidden');\\n            requestAnimationFrame(() => positionModalCenter(confirmDialog));\\n        }\\n\\n        function executeAction() {\\n            if (!selectedSub || selectedCharacterName) {\\n                 document.getElementById('confirm-overlay').classList.add('hidden');\\n                 return;\\n            }\\n\\n            const locationName = `${selectedMain.name} - ${selectedSub.name}`;\\n            const cleanLocationName = locationName.replace(/[<>]/g, '');\\n            const characterNames = Array.isArray(selectedSub.characters) ? selectedSub.characters.map(c=>c.name).filter(n=>n) : [];\\n            const cleanCharacters = characterNames.join(',').replace(/[<>]/g, '');\\n\\n            let message = `<request:{{user}}前往了${cleanLocationName}.`;\\n            if (cleanCharacters) message += `${cleanCharacters}在那里`;\\n            message += \\\">\\\";\\n\\n            sendGameActionRequest(message, \\\"前往失败\\\"); // Use generic sender\\n            document.getElementById('confirm-overlay').classList.add('hidden');\\n            resetSelection(true);\\n        }\\n\\n        function resetSelection(hideAll = true) {\\n            selectedMain = null;\\n            selectedSub = null;\\n            selectedCharacterName = null;\\n            closeCharacterModal();\\n\\n            document.querySelectorAll('#visual-map .map-location-group.selected, .sub-location-button.selected, .character-item.selected, .switch-area-button.selected').forEach(el => {\\n                el.classList.remove('selected');\\n            });\\n\\n             if (hideAll) {\\n                document.getElementById('sub-locations').classList.add('hidden');\\n             } else {\\n                // Keep sub-locations potentially visible if just resetting character/sub selection\\n                // but ensure details are hidden if no sub-location is selected\\n                if (!selectedSub) document.getElementById('sub-locations').classList.add('hidden');\\n             }\\n            document.getElementById('location-details').classList.add('hidden');\\n            const selectedLocationSpan = document.getElementById('selected-location');\\n            if(selectedLocationSpan) selectedLocationSpan.textContent = '未选择';\\n            updateActionButtonState();\\n        }\\n\\n        function processMapData() {\\n             const dataSource = document.getElementById('map-data-source');\\n             if (!dataSource) {\\n                 console.error(\\\"Map data source element not found.\\\");\\n                 renderMapInterface(null); return;\\n             }\\n             let mapText = dataSource.textContent || dataSource.innerText || '';\\n             let useTestData = false;\\n             if (!mapText || mapText.trim() === '' || !mapText.includes('[')) {\\n                 useTestData = true;\\n                 console.log(\\\"Map data source is empty or invalid, using test data.\\\");\\n             }\\n\\n             if (useTestData) {\\n                 mapText = `[TITLE: 测试地图]\\n[MOVEBLOCK:NO]\\n[CURRENT_POS:450|300]\\n[银行区域|100|100|150|80]\\n- 一层大堂(营业厅): 李明{姓名: 李明;;职业: 职员;;互动选项: 询问业务; 闲聊; 投诉; 离开}, 赵强{姓名: 赵强;;职业: 保安;;互动选项: 打招呼; 问路; 递烟; 无视}, 其他顾客NPC\\n- 二层办公区: 陈龙{姓名: 陈龙;;职位: 经理;;互动选项: 汇报工作; 请求指示; 喝茶; 告辞}, 王军\\n- 其他区域: 周曼妮{姓名: 周曼妮;;身份: 神秘女子;;互动选项: 搭讪; 跟踪; 报警; 不理睬}\\n[校园区域|300|200|200|120]\\n- 教学楼: 班主任{姓名: 王老师;;互动选项: 问好; 请教问题; 汇报情况; 溜走}, 数学老师\\n- 图书馆: 文学社社长{姓名: 林静;;互动选项: 讨论文学; 借书; 加入社团; 安静阅读}, 图书管理员\\n[商业街|550|150|180|100]\\n- 咖啡厅: 服务员小雅{姓名: 小雅;;互动选项: 点单; 夸奖; 询问推荐; 买单}, 钢琴少女{姓名: 未知;;互动选项: 静静聆听; 点歌; 鼓掌; 离开}\\n- 书店: 眼镜店主, 神秘顾客\\n[ROAD|180,140;390,260|8|#A0522D]\\n[ROAD|400,260;640,200|10|gray]`;\\n             }\\n\\n             mapData = parseMapData(mapText);\\n             renderMapInterface(mapData);\\n\\n             console.log(\\\"Calling updateImportantCharactersDisplay with:\\\", mapData ? mapData.importantCharacters : 'mapData is null');\\n             if (mapData && mapData.importantCharacters) {\\n                 updateImportantCharactersDisplay(mapData.importantCharacters); // Call the renamed function\\n             } else {\\n                 updateImportantCharactersDisplay([]); // Call the renamed function\\n             }\\n             // Bullet display logic moved to init()\\n             // Display shop and inventory items\\n             displayShopItems();\\n             displayInventoryItems();\\n\\n             // --- Trigger Auto-Save ---\\n             // Call the auto-save function after successfully processing and rendering new data\\n             // Add a small delay to ensure rendering is complete before saving potentially complex data\\n             setTimeout(() => {\\n                 console.log(\\\"Auto-saving map state and characters after processing data...\\\");\\n                 saveMapStateWithCheck();\\n             }, 100); // 100ms delay, adjust if needed\\n\\n        }\\n\\n        // --- Shop & Inventory Functions ---\\n        function updatePlayerGold() {\\n            const moneyElement = document.getElementById('player-money');\\n            if (moneyElement) {\\n                moneyElement.textContent = playerGold;\\n            }\\n        }\\n\\n        function displayShopItems() {\\n            const container = document.getElementById('shop-items-container');\\n            if (!container) return;\\n            container.innerHTML = ''; // Clear previous items\\n\\n            if (shopItems.length === 0) {\\n                container.innerHTML = '<p class=\\\"info-message\\\">商店里现在什么都没有。</p>';\\n                return;\\n            }\\n\\n            shopItems.forEach(item => {\\n                const itemElement = document.createElement('div');\\n                itemElement.className = 'shop-item';\\n                itemElement.innerHTML = `\\n                    <div class=\\\"item-info\\\">\\n                        <div class=\\\"item-name\\\">${item.name}</div>\\n                        <div class=\\\"item-description\\\">${item.description}</div>\\n                    </div>\\n                    <div class=\\\"item-actions\\\">\\n                        <span class=\\\"item-price\\\"><i class=\\\"fas fa-coins\\\"></i> ${item.price}</span>\\n                        <button class=\\\"buy-button\\\" data-item-name=\\\"${item.name}\\\" ${playerGold < item.price ? 'disabled' : ''}>\\n                            <i class=\\\"fas fa-shopping-cart\\\"></i> 购买\\n                        </button>\\n                    </div>\\n                `;\\n                const buyButton = itemElement.querySelector('.buy-button');\\n                buyButton.addEventListener('click', () => buyItem(item));\\n                container.appendChild(itemElement);\\n            });\\n        }\\n\\n        function displayInventoryItems() {\\n            const container = document.getElementById('inventory-items-container');\\n            if (!container) return;\\n            container.innerHTML = ''; // Clear previous items\\n\\n            if (inventoryItems.length === 0) {\\n                container.innerHTML = '<p class=\\\"info-message\\\">你的背包是空的。</p>';\\n                return;\\n            }\\n\\n            inventoryItems.forEach(item => {\\n                const itemElement = document.createElement('div');\\n                itemElement.className = 'inventory-item';\\n                itemElement.innerHTML = `\\n                    <div class=\\\"item-info\\\">\\n                        <div class=\\\"item-name\\\">${item.name}</div>\\n                        <div class=\\\"item-description\\\">${item.description}</div>\\n                    </div>\\n                    <div class=\\\"item-actions\\\">\\n                        <button class=\\\"use-button\\\" data-item-name=\\\"${item.name}\\\">\\n                            <i class=\\\"fas fa-hand-sparkles\\\"></i> 使用\\n                        </button>\\n                    </div>\\n                `;\\n                const useButton = itemElement.querySelector('.use-button');\\n                useButton.addEventListener('click', () => useItem(item));\\n                container.appendChild(itemElement);\\n            });\\n        }\\n\\n        function buyItem(item) {\\n            if (playerGold >= item.price) {\\n                playerGold -= item.price;\\n                inventoryItems.push({ ...item }); // Add a copy to inventory\\n                updatePlayerGold();\\n                displayShopItems(); // Re-render shop to update button states\\n                displayInventoryItems(); // Re-render inventory\\n                console.log(`Bought ${item.name} for ${item.price}. Remaining gold: ${playerGold}`);\\n                // Send request to backend/AI to confirm purchase\\n                const cleanItemName = item.name.replace(/[<>]/g, ''); // Sanitize item name\\n                sendGameActionRequest(`<request:{{user}}购买了${cleanItemName}>`, \\\"购买物品失败\\\");\\n            } else {\\n                alert(\\\"金币不足！\\\");\\n            }\\n        }\\n\\n        function useItem(item) {\\n            const itemIndex = inventoryItems.findIndex(invItem => invItem.name === item.name);\\n            if (itemIndex > -1) {\\n                // Implement actual item effect logic here based on item.name or item.category\\n                console.log(`Used ${item.name}.`);\\n                alert(`你使用了 ${item.name}。\\\\n（此处应有具体效果描述或触发事件）`);\\n\\n                inventoryItems.splice(itemIndex, 1); // Remove item from inventory\\n                displayInventoryItems(); // Re-render inventory\\n\\n                // Send request to backend/AI to confirm usage\\n                const cleanItemName = item.name.replace(/[<>]/g, '');\\n                sendGameActionRequest(`<request:{{user}}使用了${cleanItemName}>`, \\\"使用物品失败\\\");\\n            }\\n        }\\n        // --- End Shop & Inventory Functions ---\\n\\n        // --- Save/Load Functions ---\\n        function getAllSavedData() {\\n            try {\\n                const savedJson = localStorage.getItem(SAVE_STORAGE_KEY);\\n                return savedJson ? JSON.parse(savedJson) : {};\\n            } catch (e) {\\n                console.error(\\\"Error reading saved data from localStorage:\\\", e);\\n                return {}; // Return empty object on error\\n            }\\n        }\\n\\n        // Renamed and modified function for auto-saving with similarity check\\n        function saveMapStateWithCheck() {\\n            if (!mapData || !mapData.title) {\\n                console.warn(\\\"Auto-save skipped: Missing mapData or title.\\\");\\n                return;\\n            }\\n\\n            const currentTimestamp = new Date().toISOString();\\n            const currentTitle = mapData.title;\\n            console.log(`Attempting to auto-save state for map: \\\"${currentTitle}\\\"`);\\n\\n            // --- 1. Save/Update Map State (with prefix-based deduplication) ---\\n            const allMapSaves = getAllSavedData(); // Uses SAVE_STORAGE_KEY\\n            const currentPrefix = currentTitle.substring(0, 2); // Get the first two characters as prefix\\n\\n            // Find and remove all existing saves that share the same first two characters\\n            const keysToDelete = [];\\n            for (const existingTitle in allMapSaves) {\\n                if (allMapSaves.hasOwnProperty(existingTitle)) {\\n                    if (existingTitle.substring(0, 2) === currentPrefix) {\\n                        keysToDelete.push(existingTitle);\\n                    }\\n                }\\n            }\\n\\n            if (keysToDelete.length > 0) {\\n                console.log(`Found ${keysToDelete.length} existing map(s) with prefix \\\"${currentPrefix}\\\". Removing them to keep only the latest version.`);\\n                keysToDelete.forEach(key => {\\n                    // Don't delete if the key to delete is the current title AND we only found one match (it means we are just updating it)\\n                    // However, if currentTitle is \\\"东海-A\\\" and we found \\\"东海-B\\\", \\\"东海-B\\\" should be deleted.\\n                    // The new logic is: always delete all old ones with the prefix, then add the new one.\\n                    delete allMapSaves[key];\\n                    console.log(`  Removed: \\\"${key}\\\"`);\\n                });\\n            }\\n\\n            // Prepare the data to save for the current title\\n            const mapSaveData = {\\n                mapData: mapData, // This is the full mapData object\\n                timestamp: currentTimestamp\\n            };\\n\\n            // Save the current map data under its full title.\\n            // All previous versions with the same prefix have been removed.\\n            allMapSaves[currentTitle] = mapSaveData;\\n            console.log(`Saving new/updated map state for \\\"${currentTitle}\\\" with prefix \\\"${currentPrefix}\\\".`);\\n\\n            // Save the modified allMapSaves object back to localStorage\\n            try {\\n                localStorage.setItem(SAVE_STORAGE_KEY, JSON.stringify(allMapSaves));\\n                console.log(`Successfully auto-saved map state. Saved as: \\\"${currentTitle}\\\". Total saves: ${Object.keys(allMapSaves).length}`);\\n            } catch (e) {\\n                console.error(`Error auto-saving map data to localStorage for key \\\"${currentTitle}\\\":`, e);\\n            }\\n\\n            // --- 2. Update Global Character Store (Only Important Characters) ---\\n            const oldGlobalCharacters = getGlobalCharacters(); // Get existing characters to compare against\\n            const newGlobalCharacters = {}; // Start with a fresh object for the new state\\n            let charactersUpdated = false;\\n            // const currentTimestamp = new Date().toISOString(); // This is already defined earlier in the function\\n\\n            if (mapData.importantCharacters && Array.isArray(mapData.importantCharacters)) {\\n                mapData.importantCharacters.forEach(charObj => {\\n                    if (charObj && charObj.name) {\\n                        const charName = charObj.name.trim();\\n                        const charDescription = charObj.description || null; // Keep description as is\\n\\n                        newGlobalCharacters[charName] = {\\n                            description: charDescription,\\n                            timestamp: currentTimestamp // currentTimestamp from outer scope\\n                        };\\n                        console.log(`[Character Save] Preparing important character \\\"${charName}\\\" for global store.`);\\n                    }\\n                });\\n            }\\n\\n            // Compare the newly constructed important character list with the old global character list\\n            // This determines if an actual save operation is needed.\\n            if (JSON.stringify(oldGlobalCharacters) !== JSON.stringify(newGlobalCharacters)) {\\n                charactersUpdated = true;\\n            }\\n\\n            // Save the new global character store if changes were made\\n            if (charactersUpdated) {\\n                saveGlobalCharacters(newGlobalCharacters); // Save the new set (could be empty if no important chars)\\n                console.log(\\\"Global character store updated. Now contains only current important characters.\\\");\\n            } else {\\n                console.log(\\\"No changes to important characters list; global character store remains the same.\\\");\\n            }\\n        } // End of saveMapStateWithCheck function\\n\\n        // --- New Function: Delete Saved Item ---\\n        function deleteSavedItem(itemName, itemType) {\\n            const typeText = itemType === 'map' ? '地点' : '人物';\\n            const storageKey = itemType === 'map' ? SAVE_STORAGE_KEY : CHARACTER_STORAGE_KEY;\\n\\n            if (confirm(`确定要删除已保存的${typeText} \\\"${itemName}\\\" 吗？\\\\n此操作不可撤销。`)) {\\n                try {\\n                    let allData;\\n                    if (itemType === 'map') {\\n                        allData = getAllSavedData(); // Uses SAVE_STORAGE_KEY\\n                    } else {\\n                        allData = getGlobalCharacters(); // Uses CHARACTER_STORAGE_KEY\\n                    }\\n\\n                    if (allData.hasOwnProperty(itemName)) {\\n                        delete allData[itemName]; // Remove the item\\n\\n                        // Save the updated data back\\n                        if (itemType === 'map') {\\n                            localStorage.setItem(SAVE_STORAGE_KEY, JSON.stringify(allData));\\n                        } else {\\n                            saveGlobalCharacters(allData); // Uses CHARACTER_STORAGE_KEY\\n                        }\\n\\n                        console.log(`Successfully deleted ${typeText}: \\\"${itemName}\\\"`);\\n                        alert(`${typeText} \\\"${itemName}\\\" 已删除。`);\\n                        populateSaveLoadModal(); // Refresh the modal list\\n                    } else {\\n                        console.warn(`Attempted to delete non-existent ${typeText}: \\\"${itemName}\\\"`);\\n                        alert(`删除失败：未找到${typeText} \\\"${itemName}\\\"。`);\\n                    }\\n                } catch (e) {\\n                    console.error(`Error deleting ${typeText} \\\"${itemName}\\\" from localStorage:`, e);\\n                    alert(`删除${typeText}时出错。`);\\n                }\\n            }\\n        }\\n        // --- End New Function ---\\n\\n        function populateSaveLoadModal() {\\n            const locationsList = document.getElementById('saved-locations-list');\\n            const charactersList = document.getElementById('saved-characters-list');\\n            const locationsPlaceholder = '<p class=\\\"info-message\\\">暂无已保存的地点。</p>';\\n            const charactersPlaceholder = '<p class=\\\"info-message\\\">暂无已记录的人物。</p>';\\n\\n            locationsList.innerHTML = '';\\n            charactersList.innerHTML = '';\\n\\n            console.log(\\\"[DEBUG] Populating Save/Load Modal.\\\");\\n\\n            // --- Populate Locations List ---\\n            const allMapSaves = getAllSavedData(); // Reads SAVE_STORAGE_KEY\\n            const savedMapTitles = Object.keys(allMapSaves);\\n            console.log(`[DEBUG] Found ${savedMapTitles.length} saved map titles.`);\\n\\n            if (savedMapTitles.length > 0) {\\n                savedMapTitles.sort((a, b) => {\\n                    const timeA = allMapSaves[a]?.timestamp;\\n                    const timeB = allMapSaves[b]?.timestamp;\\n                    if (timeA && timeB) return new Date(timeB) - new Date(timeA);\\n                    return a.localeCompare(b);\\n                });\\n\\n                savedMapTitles.forEach(title => {\\n                    const container = document.createElement('div');\\n                    container.className = 'saved-item-container';\\n\\n                    const locButton = document.createElement('button');\\n                    locButton.className = 'saved-item-button';\\n                    locButton.dataset.mapTitle = title;\\n                    locButton.innerHTML = `<i class=\\\"fas fa-map\\\"></i> ${title}`;\\n                    locButton.title = `点击加载 \\\"${title}\\\" 的地图状态`;\\n                    locButton.addEventListener('click', () => loadMapState(title));\\n\\n                    const deleteButton = document.createElement('button');\\n                    deleteButton.className = 'delete-item-button';\\n                    deleteButton.innerHTML = '<i class=\\\"fas fa-trash-alt\\\"></i>';\\n                    deleteButton.title = `删除地点 \\\"${title}\\\"`;\\n                    deleteButton.addEventListener('click', (e) => {\\n                        e.stopPropagation();\\n                        deleteSavedItem(title, 'map'); // Call the new delete function\\n                    });\\n\\n                    container.appendChild(locButton);\\n                    container.appendChild(deleteButton);\\n                    locationsList.appendChild(container);\\n                });\\n            } else {\\n                locationsList.innerHTML = locationsPlaceholder;\\n            }\\n\\n            // --- Populate Characters List from Global Store ---\\n            const globalCharacters = getGlobalCharacters(); // Reads CHARACTER_STORAGE_KEY\\n            const savedCharacterNames = Object.keys(globalCharacters);\\n            console.log(`[DEBUG] Found ${savedCharacterNames.length} unique characters in global store.`);\\n\\n            if (savedCharacterNames.length > 0) {\\n                savedCharacterNames.sort((a, b) => a.localeCompare(b));\\n\\n                savedCharacterNames.forEach(charName => {\\n                    const container = document.createElement('div');\\n                    container.className = 'saved-item-container';\\n\\n                    const charData = globalCharacters[charName];\\n                    const description = charData?.description || '';\\n                    const timestamp = charData?.timestamp;\\n\\n                    const charButton = document.createElement('button');\\n                    charButton.className = 'saved-item-button';\\n                    charButton.dataset.characterName = charName;\\n                    if (description) {\\n                         charButton.dataset.characterDescription = description;\\n                    }\\n                    charButton.innerHTML = `<i class=\\\"fas fa-user\\\"></i> ${charName}`;\\n                    charButton.title = `点击加载角色 \\\"${charName}\\\" 的信息 (上次更新: ${timestamp ? new Date(timestamp).toLocaleString() : '未知'})`;\\n                    charButton.addEventListener('click', (event) => {\\n                        const descFromDataset = event.currentTarget.dataset.characterDescription || '';\\n                        loadCharacterInfo(charName, descFromDataset);\\n                    });\\n\\n                    const deleteButton = document.createElement('button');\\n                    deleteButton.className = 'delete-item-button';\\n                    deleteButton.innerHTML = '<i class=\\\"fas fa-trash-alt\\\"></i>';\\n                    deleteButton.title = `删除人物 \\\"${charName}\\\"`;\\n                    deleteButton.addEventListener('click', (e) => {\\n                        e.stopPropagation();\\n                        deleteSavedItem(charName, 'character'); // Call the new delete function\\n                    });\\n\\n                    container.appendChild(charButton);\\n                    container.appendChild(deleteButton);\\n                    charactersList.appendChild(container);\\n                });\\n                console.log(\\\"[DEBUG] Finished creating character buttons from global store.\\\");\\n            } else {\\n                console.log(\\\"[DEBUG] No unique characters found in global store, displaying placeholder.\\\");\\n                charactersList.innerHTML = charactersPlaceholder;\\n            }\\n        }\\n\\n\\n        function openSaveLoadModal() {\\n            populateSaveLoadModal(); // Refresh lists every time it's opened\\n            const modal = document.getElementById('save-load-modal');\\n            modal.classList.remove('hidden');\\n            const dialog = modal.querySelector('.save-load-modal-dialog');\\n            requestAnimationFrame(() => positionModalCenter(dialog));\\n        }\\n\\n        function closeSaveLoadModal() {\\n            document.getElementById('save-load-modal').classList.add('hidden');\\n        }\\n\\n        function loadMapState(mapTitle) {\\n            console.log(`Requesting AI to load map state for: \\\"${mapTitle}\\\"`);\\n            const allSaves = getAllSavedData();\\n            const saveData = allSaves[mapTitle];\\n\\n        if (saveData && saveData.mapData) {\\n            try {\\n                // Log 2: Check the structure of saveData.mapData before formatting\\n                // Log 2: Check the structure of saveData.mapData before processing\\n                console.log(`[DEBUG] Found mapData for \\\"${mapTitle}\\\", attempting to extract title and sublocations. Data type: ${typeof saveData.mapData}, Keys: ${saveData.mapData ? Object.keys(saveData.mapData).join(', ') : 'N/A'}`);\\n                console.log('[DEBUG] saveData.mapData object:', saveData.mapData); // Log the actual object\\n\\n                const cleanMapTitle = mapTitle.replace(/[<>]/g, ''); // Sanitize title\\n\\n                // --- Start: Construct condensed message ---\\n                let condensedContent = `[TITLE: ${cleanMapTitle}]\\\\n`; // Start with the title\\n\\n                if (saveData.mapData.locations && Array.isArray(saveData.mapData.locations)) {\\n                    saveData.mapData.locations.forEach(loc => {\\n                        if (loc.subLocations && Array.isArray(loc.subLocations)) {\\n                            loc.subLocations.forEach(sub => {\\n                                condensedContent += `- ${sub.name}: `;\\n                                if (sub.characters && Array.isArray(sub.characters) && sub.characters.length > 0) {\\n                                    const charStr = sub.characters.map(char => {\\n                                        let charOutput = char.name;\\n                                        // Append description in brackets if it exists\\n                                        if (char.description) {\\n                                            charOutput += `{${char.description}}`;\\n                                        }\\n                                        return charOutput;\\n                                    }).join(', ');\\n                                    condensedContent += `${charStr}\\\\n`;\\n                                } else {\\n                                    condensedContent += `无\\\\n`; // Indicate no characters if array is empty or missing\\n                                }\\n                            });\\n                        }\\n                    });\\n                }\\n                // --- End: Construct condensed message ---\\n\\n                // Construct the final message for the AI using the condensed content\\n                const message = `<request:{{user}}读取了地点数据：${cleanMapTitle}>\\\\n${condensedContent}一股神秘力量将我从当前地点带到了这个${cleanMapTitle}地点。>`;\\n\\n                console.log(`Sending condensed load request to AI for \\\"${cleanMapTitle}\\\"`);\\n                console.log(\\\"Condensed message content:\\\", condensedContent); // Log the condensed part\\n                sendGameActionRequest(message, `请求加载地图 \\\"${cleanMapTitle}\\\" 失败`);\\n                    closeSaveLoadModal(); // Close the modal after sending the request\\n                } catch (error) {\\n                    console.error(`Error formatting or sending map data for \\\"${mapTitle}\\\":`, error);\\n                    alert(`处理加载请求 \\\"${mapTitle}\\\" 时出错！`);\\n                }\\n            } else {\\n                console.error(`Failed to find saved map data for \\\"${mapTitle}\\\".`);\\n                alert(`加载 \\\"${mapTitle}\\\" 失败：未找到存档数据！`);\\n                // Optionally, keep the modal open or provide more specific feedback\\n            }\\n        }\\n\\n        // Updated function to accept description and send correct format to AI\\n        function loadCharacterInfo(characterName, characterDescription) {\\n            console.log(`Loading saved info for character: \\\"${characterName}\\\"`);\\n            const cleanCharacterName = characterName.replace(/[<>]/g, '');\\n            // Use the full description if available, otherwise indicate it's missing\\n            const descriptionText = characterDescription ? characterDescription.replace(/[<>]/g, '') : '无详细描述';\\n\\n            // Construct the message in the format AI understands, including arrival context\\n            const message = `<request:{{user}}读取了角色数据：${cleanCharacterName} - ${descriptionText}。一股神秘力量将${cleanCharacterName}传送到了这里。>`;\\n            console.log(`[DEBUG] Sending character load request: ${message}`); // DEBUG\\n\\n            sendGameActionRequest(message, `加载角色 ${cleanCharacterName} 信息失败`);\\n            closeSaveLoadModal();\\n        }\\n\\n\\n        function clearAllSaves() {\\n            if (confirm('警告：这将永久删除所有已保存的地图状态和已记录的人物信息！\\\\n此操作不可撤销。\\\\n\\\\n确定要清空全部吗？')) {\\n                try {\\n                    localStorage.removeItem(SAVE_STORAGE_KEY); // Clear map saves\\n                    localStorage.removeItem(CHARACTER_STORAGE_KEY); // Clear global characters\\n                    console.log(\\\"All saved map data and character data cleared from localStorage.\\\");\\n                    alert(\\\"所有本地保存的地图和人物数据已清空。\\\");\\n                    populateSaveLoadModal(); // Refresh the modal to show it's empty\\n                } catch (e) {\\n                    console.error(\\\"Error clearing saved data from localStorage:\\\", e);\\n                    alert(\\\"清空存档时出错。\\\");\\n                }\\n            }\\n        }\\n\\n        // --- Helper: Format mapData object back to string ---\\n        function formatMapDataToString(mapDataToFormat) {\\n            if (!mapDataToFormat) return '<map_data></map_data>'; // Handle null input\\n\\n            let output = '<map_data>\\\\n';\\n\\n            // Header Tags\\n            if (mapDataToFormat.title) output += `[TITLE: ${mapDataToFormat.title}]\\\\n`;\\n            // Changed from conversingPartners to importantCharacters and tag to IMPORTANT_CHARACTERS\\n            if (mapDataToFormat.importantCharacters && mapDataToFormat.importantCharacters.length > 0) {\\n                 const importantCharsStr = mapDataToFormat.importantCharacters.map(char => `${char.name}{${char.description || ''}}`).join(',');\\n                 output += `[IMPORTANT_CHARACTERS: ${importantCharsStr}]\\\\n`;\\n            }\\n            if (mapDataToFormat.externalAreas && mapDataToFormat.externalAreas.length > 0) output += `[EXTERNAL_AREAS: ${mapDataToFormat.externalAreas.join(',')}]\\\\n`;\\n            output += `[MOVEBLOCK: ${mapDataToFormat.moveBlocked ? 'YES' : 'NO'}]\\\\n`;\\n            if (mapDataToFormat.currentUserPosition && typeof mapDataToFormat.currentUserPosition.x === 'number' && typeof mapDataToFormat.currentUserPosition.y === 'number') {\\n                output += `[CURRENT_POS: ${mapDataToFormat.currentUserPosition.x}|${mapDataToFormat.currentUserPosition.y}]\\\\n`;\\n            }\\n            if (typeof mapDataToFormat.money === 'number') output += `[MONEY: ${mapDataToFormat.money}]\\\\n`;\\n            if (mapDataToFormat.shop && mapDataToFormat.shop.length > 0) {\\n                const shopStr = mapDataToFormat.shop.map(item => `${item.name}|${item.price}|${item.description}|${item.category}`).join(',');\\n                output += `[SHOP_ITEMS: ${shopStr}]\\\\n`;\\n            }\\n            if (mapDataToFormat.inventory && mapDataToFormat.inventory.length > 0) {\\n                const invStr = mapDataToFormat.inventory.map(item => `${item.name}|${item.description}|${item.category}`).join(',');\\n                output += `[INVENTORY: ${invStr}]\\\\n`;\\n            }\\n\\n            // Roads\\n            if (mapDataToFormat.roads && mapDataToFormat.roads.length > 0) {\\n                mapDataToFormat.roads.forEach(road => {\\n                    // Convert points string back to X1,Y1;X2,Y2 format\\n                    const pointsStr = road.points.split(' ').map(p => p.replace(',', ',')).join(';');\\n                    output += `[ROAD|${pointsStr}|${road.width}|${road.color}]\\\\n`;\\n                });\\n            }\\n\\n            // Locations and Sub-locations\\n            if (mapDataToFormat.locations && mapDataToFormat.locations.length > 0) {\\n                mapDataToFormat.locations.forEach(loc => {\\n                    let locHeader = `[${loc.name}`;\\n                    if (loc.x !== null && loc.y !== null) locHeader += `|${loc.x}|${loc.y}`;\\n                    if (loc.width !== null && loc.height !== null) locHeader += `|${loc.width}|${loc.height}`;\\n                    locHeader += ']';\\n                    output += `${locHeader}\\\\n`;\\n\\n                    if (loc.subLocations && loc.subLocations.length > 0) {\\n                        loc.subLocations.forEach(sub => {\\n                            output += `- ${sub.name}: `;\\n                            if (sub.characters && sub.characters.length > 0) {\\n                                const charStr = sub.characters.map(char => {\\n                                    let charOutput = char.name;\\n                                    if (char.description) {\\n                                        // Ensure description doesn't contain invalid characters for the format if needed\\n                                        charOutput += `{${char.description}}`;\\n                                    }\\n                                    return charOutput;\\n                                }).join(', ');\\n                                output += `${charStr}\\\\n`;\\n                            } else {\\n                                output += `无\\\\n`; // Indicate no characters\\n                            }\\n                        });\\n                    }\\n                });\\n            }\\n\\n            // Bullets\\n            if (mapDataToFormat.bullets && mapDataToFormat.bullets.length > 0) {\\n                output += `[BULLETS: ${mapDataToFormat.bullets.join(';;')}]\\\\n`;\\n            }\\n\\n            output += '</map_data>';\\n            console.log(\\\"Formatted map data string:\\\", output); // Debug log\\n            return output;\\n        }\\n        // --- End Save/Load Functions ---\\n\\n\\n        function setupEventListeners() {\\n            // Modal Cancel/Close\\n            document.getElementById('cancel-action-btn').addEventListener('click', () => {\\n                const executeBtn = document.getElementById('execute-action-btn');\\n                const newExecuteBtn = executeBtn.cloneNode(true); // Clone to remove old listeners\\n                executeBtn.parentNode.replaceChild(newExecuteBtn, executeBtn);\\n                document.getElementById('confirm-overlay').classList.add('hidden');\\n            });\\n            document.getElementById('confirm-overlay').addEventListener('click', (event) => {\\n                if (event.target === event.currentTarget) { // Click on overlay itself\\n                     const executeBtn = document.getElementById('execute-action-btn');\\n                     const newExecuteBtn = executeBtn.cloneNode(true);\\n                     executeBtn.parentNode.replaceChild(newExecuteBtn, executeBtn);\\n                     document.getElementById('confirm-overlay').classList.add('hidden');\\n                }\\n            });\\n            document.getElementById('close-modal-btn').addEventListener('click', closeCharacterModal);\\n            document.getElementById('character-modal').addEventListener('click', (event) => {\\n                 if (event.target === event.currentTarget) { // Click on overlay itself\\n                     closeCharacterModal();\\n                 }\\n            });\\n\\n            // Custom Interaction Input\\n            document.getElementById('send-custom-interaction-btn').addEventListener('click', sendCustomInteraction);\\n            document.getElementById('custom-interaction-input').addEventListener('keypress', function(event) {\\n                if (event.key === 'Enter') {\\n                    event.preventDefault();\\n                    sendCustomInteraction();\\n                }\\n            });\\n\\n            // Window Message Listener (for external updates)\\n            window.addEventListener('message', receiveMessage);\\n\\n            // Setup Game Action Button Listeners (Refactored)\\n            setupGameActionListeners();\\n\\n            // Shop and Inventory Modal Buttons\\n            const shopButton = document.getElementById('shop-button');\\n            const inventoryButton = document.getElementById('inventory-button');\\n            const shopModal = document.getElementById('shop-modal');\\n            const inventoryModal = document.getElementById('inventory-modal');\\n            const closeShopBtn = document.getElementById('close-shop-btn');\\n            const closeInventoryBtn = document.getElementById('close-inventory-btn');\\n            const bulletChatContainer = document.getElementById('bullet-chat-container'); // Get bullet chat container\\n            const closeBulletChatBtn = document.getElementById('close-bullet-chat-btn'); // Get close button\\n            const toggleBulletChatBtn = document.getElementById('toggle-bullet-chat-btn'); // Get toggle button\\n\\n            if (shopButton && shopModal && closeShopBtn) {\\n                shopButton.addEventListener('click', () => {\\n                    shopModal.classList.remove('hidden');\\n                    requestAnimationFrame(() => positionModalCenter(shopModal.querySelector('.shop-modal-dialog')));\\n                });\\n                closeShopBtn.addEventListener('click', () => shopModal.classList.add('hidden'));\\n                shopModal.addEventListener('click', (event) => {\\n                    if (event.target === shopModal) shopModal.classList.add('hidden');\\n                });\\n            }\\n            if (inventoryButton && inventoryModal && closeInventoryBtn) {\\n                inventoryButton.addEventListener('click', () => {\\n                    inventoryModal.classList.remove('hidden');\\n                    requestAnimationFrame(() => positionModalCenter(inventoryModal.querySelector('.inventory-modal-dialog')));\\n                });\\n                closeInventoryBtn.addEventListener('click', () => inventoryModal.classList.add('hidden'));\\n                inventoryModal.addEventListener('click', (event) => {\\n                    if (event.target === inventoryModal) inventoryModal.classList.add('hidden');\\n                });\\n            }\\n\\n            // Bullet Chat Toggle/Close Listeners\\n            if (bulletChatContainer && closeBulletChatBtn) {\\n                closeBulletChatBtn.addEventListener('click', () => {\\n                    bulletChatContainer.classList.add('hidden');\\n                });\\n            }\\n            if (bulletChatContainer && toggleBulletChatBtn) {\\n                toggleBulletChatBtn.addEventListener('click', () => {\\n                    const settings = loadSettings();\\n                    // Check if currently hidden\\n                    if (bulletChatContainer.classList.contains('hidden')) {\\n                        // Only show if enabled in settings\\n                        if (settings.showBulletChat) {\\n                            bulletChatContainer.classList.remove('hidden');\\n                        } else {\\n                            console.log(\\\"Bullet chat is disabled in settings.\\\");\\n                            // Optionally provide feedback to the user that it's disabled\\n                            // alert(\\\"弹幕功能已在设置中禁用。\\\");\\n                        }\\n                    } else {\\n                        // If currently visible, hide it\\n                        bulletChatContainer.classList.add('hidden');\\n                    }\\n                });\\n            }\\n\\n            // Bullet Reply Listener\\n            const sendBulletReplyBtn = document.getElementById('send-bullet-reply-btn');\\n            const bulletReplyInput = document.getElementById('bullet-reply-input');\\n            if (sendBulletReplyBtn && bulletReplyInput) {\\n                sendBulletReplyBtn.addEventListener('click', sendBulletReply);\\n                bulletReplyInput.addEventListener('keypress', (event) => {\\n                    if (event.key === 'Enter') {\\n                        event.preventDefault();\\n                        sendBulletReply();\\n                    }\\n                });\\n            } else {\\n                console.error(\\\"Bullet reply elements not found!\\\");\\n            }\\n\\n            // --- Save/Load Button Listeners ---\\n            const saveButton = document.getElementById('save-button'); // Keep the button element reference\\n            const loadButton = document.getElementById('load-button');\\n            const saveLoadModal = document.getElementById('save-load-modal');\\n            const closeSaveLoadModalBtn = document.getElementById('close-save-load-modal-btn');\\n            const clearAllSavesBtn = document.getElementById('clear-all-saves-btn');\\n\\n            // Remove the original manual save functionality from the save button\\n            // The button now primarily serves as a visual indicator or could be repurposed later.\\n            // We keep the reference in case we want to add a different function, like manually triggering the auto-save check.\\n            if (saveButton) {\\n                 // saveButton.addEventListener('click', saveCurrentMapState); // REMOVED original listener\\n                 saveButton.title = \\\"数据已自动保存\\\"; // Update tooltip\\n                 // Optionally, disable the button visually if it has no function now\\n                 // saveButton.disabled = true;\\n                 // saveButton.style.opacity = 0.6;\\n                 // saveButton.style.cursor = 'default';\\n                 console.log(\\\"Manual save button functionality removed; auto-save is active.\\\");\\n            }\\n            if (loadButton && saveLoadModal && closeSaveLoadModalBtn) {\\n                loadButton.addEventListener('click', openSaveLoadModal); // Keep load functionality\\n                closeSaveLoadModalBtn.addEventListener('click', closeSaveLoadModal);\\n                saveLoadModal.addEventListener('click', (event) => {\\n                    if (event.target === saveLoadModal) { // Click on overlay\\n                        closeSaveLoadModal();\\n                    }\\n                });\\n            }\\n            if (clearAllSavesBtn) {\\n                clearAllSavesBtn.addEventListener('click', clearAllSaves);\\n            }\\n            // --- End Save/Load Button Listeners ---\\n        }\\n\\n        // --- Game Action Configuration & Handlers (Refactored) ---\\n        const gameActionConfig = [\\n            { id: 'action-wait-moment', name: '等待片刻', verb: '等待了片刻' }, { id: 'action-wait-hour', name: '等待1小时', verb: '等待了1小时' },\\n            { id: 'action-skip-timeblock', name: '跳到下时段', verb: '跳到了下一个时段' }, { id: 'action-skip-day', name: '快进到明天', verb: '快进到了第二天' },\\n            { id: 'action-skip-weekend', name: '快进到周末', verb: '快进到了周末' }, { id: 'action-skip-date', name: '快进到日期', verb: '尝试快进到指定日期' },\\n            { id: 'action-skip-plot', name: '跳过剧情', verb: '跳过了当前剧情' }, { id: 'action-end-activity', name: '结束活动', verb: '结束了当前活动' },\\n            { id: 'action-initiate-talk', name: '发起对话', verb: '尝试发起对话' }, { id: 'action-ask-info', name: '询问信息', verb: '尝试询问信息' },\\n            { id: 'action-observe-char', name: '观察对方', verb: '观察了对方' }, { id: 'action-give-gift', name: '赠送礼物', verb: '尝试赠送礼物' },\\n            { id: 'action-make-request', name: '提出请求', verb: '尝试提出请求' }, { id: 'action-invite-join', name: '邀请同行', verb: '尝试邀请同行' },\\n            { id: 'action-ask-date', name: '邀请约会', verb: '尝试邀请约会' }, { id: 'action-date-interact', name: '约会互动', verb: '进行了约会互动' },\\n            { id: 'action-flirt', name: '调情', verb: '尝试调情' }, { id: 'action-hold-hands', name: '牵手', verb: '尝试牵手' },\\n            { id: 'action-hug', name: '拥抱', verb: '尝试拥抱' }, { id: 'action-kiss', name: '亲吻', verb: '尝试亲吻' },\\n            { id: 'action-comfort', name: '安慰对方', verb: '尝试安慰对方' }, { id: 'action-apologize', name: '道歉', verb: '进行了道歉' },\\n            { id: 'action-thank', name: '感谢', verb: '表达了感谢' }, { id: 'action-goodbye', name: '告别', verb: '进行了告别' },\\n            { id: 'action-call', name: '打电话', verb: '尝试打电话' }, { id: 'action-send-message', name: '发消息', verb: '尝试发送消息' },\\n            { id: 'action-check-relation', name: '查看关系', verb: '查看了关系状态' }, { id: 'action-check-inventory', name: '查看背包', verb: '查看了背包' },\\n            { id: 'action-use-item', name: '使用物品', verb: '尝试使用物品' }, { id: 'action-equip-item', name: '装备物品', verb: '尝试装备物品' },\\n            { id: 'action-buy-item', name: '购买物品', verb: '尝试购买物品' }, { id: 'action-sell-item', name: '出售物品', verb: '尝试出售物品' },\\n            { id: 'action-examine-env', name: '检查环境', verb: '检查了周围环境' }, { id: 'action-interact-object', name: '与物互动', verb: '尝试与物体互动' },\\n            { id: 'action-check-status', name: '查看状态', verb: '查看了自己的状态' }, { id: 'action-work', name: '工作', verb: '开始工作' },\\n            { id: 'action-study', name: '学习', verb: '开始学习' }, { id: 'action-relax', name: '休息放松', verb: '进行了休息放松' },\\n            { id: 'action-check-map', name: '查看地图', verb: '查看了地图' }, { id: 'action-check-quests', name: '查看任务', verb: '查看了任务日志' },\\n            { id: 'action-save-game', name: '保存游戏', verb: '尝试保存游戏' }\\n        ];\\n\\n        function handleGenericGameAction(actionVerb, actionName) {\\n            const message = `<request:{{user}}${actionVerb}>`;\\n            sendGameActionRequest(message, `${actionName}失败`);\\n        }\\n\\n        function setupGameActionListeners() {\\n            gameActionConfig.forEach(buttonInfo => {\\n                const buttonElement = document.getElementById(buttonInfo.id);\\n                if (buttonElement) {\\n                    buttonElement.addEventListener('click', () => handleGenericGameAction(buttonInfo.verb, buttonInfo.name));\\n                } else {\\n                    console.warn(`Button with ID \\\"${buttonInfo.id}\\\" not found.`);\\n                }\\n            });\\n        }\\n\\n        function sendGameActionRequest(message, errorMessage = \\\"操作失败\\\") {\\n             console.log(\\\"Sending game action request:\\\", message);\\n             if (typeof triggerSlash === 'function') {\\n                 try {\\n                     triggerSlash(`/send ${message} || /trigger`);\\n                 } catch (e) {\\n                     console.error(\\\"Error sending game action request:\\\", e);\\n                     alert(`${errorMessage}，请检查控制台信息或重试。`);\\n                 }\\n             } else {\\n                 alert(`操作请求已生成 (仅供测试):\\\\n${message}\\\\n\\\\n在实际环境中，这将自动发送。`);\\n             }\\n        }\\n        // --- End Game Action Handlers ---\\n\\n        function sendBulletReply() {\\n            const inputElement = document.getElementById('bullet-reply-input');\\n            const text = inputElement.value.trim();\\n            if (!text) {\\n                inputElement.focus();\\n                return;\\n            }\\n\\n            const cleanText = text.replace(/[<>]/g, ''); // Basic sanitization\\n            const message = `<request:{{user}}对弹幕说：“${cleanText}”>`;\\n\\n            sendGameActionRequest(message, \\\"发送弹幕回复失败\\\");\\n            inputElement.value = ''; // Clear input after sending\\n        }\\n\\n        function receiveMessage(event) {\\n            // Check for SillyTavern specific message structure\\n            if (event.data && event.data.type === 'newMessage' && event.data.message) {\\n                 handleNewMessage(event.data.message);\\n            }\\n        }\\n\\n        function sendCustomInteraction() {\\n            const inputElement = document.getElementById('custom-interaction-input');\\n            const customText = inputElement.value.trim();\\n            if (!customText) { inputElement.focus(); return; }\\n\\n            if (!selectedCharacterName) {\\n                 alert(\\\"无法发送消息，未选择角色。\\\"); return;\\n            }\\n\\n            let locationName;\\n            let interactionPrefix;\\n            let message;\\n\\n            if (selectedSub && selectedMain) { // Interacting with NPC in a sub-location\\n                locationName = `${selectedMain.name} - ${selectedSub.name}`;\\n                interactionPrefix = `对${selectedCharacterName}说`;\\n                const cleanLocationName = locationName.replace(/[<>]/g, '');\\n                const cleanCharacterName = selectedCharacterName.replace(/[<>]/g, '');\\n                const cleanCustomText = customText.replace(/[<>]/g, '');\\n                message = `<request:{{user}}${interactionPrefix}：“${cleanCustomText}”. 在${cleanLocationName}>`;\\n            } else if (selectedCharacterName) { // Interacting with an important character (selectedSub is null)\\n                locationName = \\\"全局对话\\\";\\n                interactionPrefix = `对重要人物 ${selectedCharacterName} 说`;\\n                const cleanCharacterName = selectedCharacterName.replace(/[<>]/g, '');\\n                const cleanCustomText = customText.replace(/[<>]/g, '');\\n                message = `<request:{{user}}${interactionPrefix}：“${cleanCustomText}”>`; // Location might be omitted or handled differently by AI for global\\n            } else {\\n                alert(\\\"无法发送消息，上下文不明确。\\\"); return;\\n            }\\n\\n            sendGameActionRequest(message, \\\"发送自定义消息失败\\\");\\n            inputElement.value = '';\\n            closeCharacterModal();\\n        }\\n\\n        // Renamed from updateConversationPartnersDisplay to updateImportantCharactersDisplay\\n        // Updated to use importantCharacters and target correct HTML elements\\n        function updateImportantCharactersDisplay(importantCharacters = []) {\\n             console.log(\\\"Inside updateImportantCharactersDisplay. Received characters:\\\", importantCharacters);\\n            const importantCharactersSection = document.getElementById('current-important-characters'); // Changed ID\\n            const buttonsContainer = document.getElementById('important-character-buttons'); // Changed ID\\n            if (!importantCharactersSection || !buttonsContainer) {\\n                console.error(\\\"Important characters section or buttons container not found.\\\");\\n                return;\\n            }\\n\\n            buttonsContainer.innerHTML = ''; // Clear previous buttons\\n            const shouldShow = Array.isArray(importantCharacters) && importantCharacters.length > 0;\\n             console.log(`  Should show important characters section? ${shouldShow}`);\\n\\n            if (shouldShow) {\\n                importantCharacters.forEach(charObj => {\\n                    if (!charObj || typeof charObj.name !== 'string') {\\n                         console.warn(\\\"    Skipping invalid important character object:\\\", charObj); return;\\n                    }\\n                    const button = document.createElement('button');\\n                    button.className = 'partner-button'; // Can reuse styling\\n                    button.dataset.characterName = charObj.name;\\n                    // Store the full description directly on the button for easy access\\n                    if (charObj.description) {\\n                        button.dataset.characterDescription = charObj.description;\\n                    }\\n                    button.innerHTML = `<i class=\\\"fas fa-star\\\"></i> ${charObj.name}`; // Changed icon\\n\\n                    button.addEventListener('click', (event) => {\\n                        const charName = event.currentTarget.dataset.characterName;\\n                        const charDescription = event.currentTarget.dataset.characterDescription || null;\\n\\n                        // Clear main/sub location selections as this is a global character\\n                        selectedMain = null;\\n                        selectedSub = null;\\n                        // Visually deselect any selected main/sub locations and action button\\n                        document.querySelectorAll('#visual-map .map-location-group.selected').forEach(g => g.classList.remove('selected'));\\n                        document.querySelectorAll('#sub-locations .sub-location-button.selected').forEach(b => b.classList.remove('selected'));\\n                        document.getElementById('location-details').classList.add('hidden');\\n                        document.getElementById('sub-locations').classList.add('hidden'); // Hide sub-locations grid\\n                        updateActionButtonState(); // Reset action button (will disable it)\\n\\n\\n                        selectCharacter(charName, charDescription, event.currentTarget);\\n                    });\\n                    buttonsContainer.appendChild(button);\\n                });\\n                importantCharactersSection.classList.remove('hidden');\\n            } else {\\n                importantCharactersSection.classList.add('hidden');\\n            }\\n        }\\n\\n        function findCharacterInMapData(characterName, locations = []) {\\n            if (!locations) return null;\\n            for (const mainLoc of locations) {\\n                if (!mainLoc || !Array.isArray(mainLoc.subLocations)) continue;\\n                for (const subLoc of mainLoc.subLocations) {\\n                    if (!subLoc || !Array.isArray(subLoc.characters)) continue;\\n                    const foundChar = subLoc.characters.find(char => char && char.name === characterName);\\n                    if (foundChar) {\\n                        // Return character data along with its location context\\n                        return { ...foundChar, mainLocationName: mainLoc.name, subLocationName: subLoc.name };\\n                    }\\n                }\\n            }\\n            return null; // Character not found anywhere\\n        }\\n\\n        function handleNewMessage(messageData) {\\n            // Basic check if message is from user or system/character\\n            if (!messageData || messageData.is_user || !mapData || !mapData.locations) {\\n                return; // Ignore user messages or if map isn't loaded\\n            }\\n\\n            const messageContent = messageData.mes; // Assuming 'mes' holds the text content\\n\\n            // Attempt to extract location from message (example pattern, adjust as needed)\\n            // This pattern looks for \\\"> 在 [Main Location] - [Sub Location]\\\" at the end\\n            const locationMatch = messageContent.match(/在\\\\s*([^->]+?)\\\\s*-\\\\s*([^>]+?)>/);\\n            if (locationMatch && locationMatch[1] && locationMatch[2]) {\\n                const mainLocName = locationMatch[1].trim();\\n                const subLocName = locationMatch[2].trim();\\n\\n                console.log(`Message indicates location: ${mainLocName} - ${subLocName}`);\\n\\n                const targetMainLocation = mapData.locations.find(loc => loc.name === mainLocName);\\n                if (targetMainLocation) {\\n                    const targetSubLocation = targetMainLocation.subLocations.find(sub => sub.name === subLocName);\\n                    if (targetSubLocation) {\\n                        // Found the location, select it on the map\\n                        console.log(\\\"Auto-selecting location from message...\\\");\\n                        selectMainLocation(targetMainLocation);\\n                        // Use requestAnimationFrame to ensure UI updates before selecting sub-location\\n                        requestAnimationFrame(() => {\\n                            // Double-check if main location is still selected (user might have clicked elsewhere)\\n                            if (selectedMain && selectedMain.name === mainLocName) {\\n                                // Find sub-location again within the currently selected main location\\n                                const currentTargetSubLocation = selectedMain.subLocations.find(sub => sub.name === subLocName);\\n                                if (currentTargetSubLocation) {\\n                                    // Delay slightly to ensure main location selection UI is finished\\n                                    setTimeout(() => {\\n                                        selectSubLocation(currentTargetSubLocation);\\n                                        console.log(\\\"Sub-location selected.\\\");\\n                                    }, 50); // 50ms delay, adjust if needed\\n                                } else {\\n                                     console.log(\\\"Sub-location not found within currently selected main location.\\\");\\n                                }\\n                            } else {\\n                                 console.log(\\\"Main location changed before sub-location could be selected.\\\");\\n                            }\\n                        });\\n                        return; // Stop further processing for this message\\n                    } else {\\n                         console.log(`Sub-location \\\"${subLocName}\\\" not found in main location \\\"${mainLocName}\\\".`);\\n                    }\\n                } else {\\n                     console.log(`Main location \\\"${mainLocName}\\\" not found.`);\\n                }\\n            } else {\\n                 console.log(\\\"Message does not contain location pattern.\\\");\\n            }\\n        }\\n\\n        function showExternalAreas(externalAreas) {\\n            resetSelection(false); // Reset current selections but don't hide sub-location grid yet\\n\\n            document.getElementById('location-details').classList.add('hidden'); // Hide details section\\n            document.getElementById('switch-area-button').classList.add('selected'); // Highlight switch button\\n\\n            const subLocationsContainer = document.getElementById('sub-locations');\\n            subLocationsContainer.innerHTML = ''; // Clear previous content\\n\\n            if (!externalAreas || externalAreas.length === 0) {\\n                subLocationsContainer.innerHTML = '<p class=\\\"info-message\\\">没有其他可前往的大区域。</p>';\\n            } else {\\n                externalAreas.forEach(areaName => {\\n                    if (!areaName || typeof areaName !== 'string') return;\\n                    const button = document.createElement('button');\\n                    button.className = 'sub-location-button external-area-button'; // Style like sub-location\\n                    const iconClass = getIconClassForLocation(areaName);\\n                    button.innerHTML = `<i class=\\\"fas ${iconClass}\\\"></i> ${areaName}`;\\n                    button.dataset.location = areaName;\\n                    button.addEventListener('click', () => goToExternalArea(areaName));\\n                    subLocationsContainer.appendChild(button);\\n                });\\n                // Apply grid styling dynamically if needed, or rely on existing CSS\\n                // subLocationsContainer.style.gridTemplateColumns = 'repeat(auto-fill, minmax(150px, 1fr))';\\n                // subLocationsContainer.style.gap = '12px';\\n                // subLocationsContainer.style.padding = '15px';\\n            }\\n            subLocationsContainer.classList.remove('hidden'); // Show the grid with external areas\\n        }\\n\\n        function goToExternalArea(areaName) {\\n            const cleanAreaName = areaName.replace(/[<>]/g, '');\\n            const message = `<request:{{user}}前往了${cleanAreaName}>`;\\n            sendGameActionRequest(message, \\\"前往外部区域失败\\\"); // Use generic sender\\n            resetSelection(true); // Reset fully after initiating travel\\n        }\\n\\n        // --- Settings Panel Logic ---\\n        const defaultSettings = {\\n            fontFamily: '\\\"ZCOOL XiaoWei\\\", \\\"Microsoft YaHei\\\", sans-serif',\\n            titleFontFamily: '\\\"ZCOOL QingKe HuangYou\\\", \\\"Microsoft YaHei\\\", sans-serif',\\n            fontSize: '13px',\\n            fontColor: '#e6e6e6',\\n            uiColor: '#e8a85e',\\n            uiBgColor: '#2c313a',\\n            buttonColor: '#7cb342',\\n            shadowsEnabled: true,\\n            showQuickCommands: true,\\n            showBulletChat: true // Default to showing bullet chat\\n        };\\n\\n        const presetColorSchemes = [\\n            { name: \\\"默认\\\", fontColor: '#e6e6e6', uiColor: '#e8a85e', uiBgColor: '#2c313a', buttonColor: '#7cb342' },\\n            { name: \\\"深海蓝\\\", fontColor: '#d0e0f0', uiColor: '#5e8ae8', uiBgColor: '#1a2b40', buttonColor: '#42a5f5' },\\n            { name: \\\"森林绿\\\", fontColor: '#e0f0e0', uiColor: '#66bb6a', uiBgColor: '#2e402e', buttonColor: '#81c784' },\\n            { name: \\\"优雅紫\\\", fontColor: '#e8e0f0', uiColor: '#ab47bc', uiBgColor: '#3a2a40', buttonColor: '#ba68c8' },\\n            { name: \\\"活力橙\\\", fontColor: '#f5e5d5', uiColor: '#ffa726', uiBgColor: '#4d3a20', buttonColor: '#ffb74d' },\\n            { name: \\\"玫瑰红\\\", fontColor: '#f5d5e0', uiColor: '#ec407a', uiBgColor: '#4a2533', buttonColor: '#f06292' },\\n            { name: \\\"科技灰\\\", fontColor: '#e0e0e0', uiColor: '#78909c', uiBgColor: '#37474f', buttonColor: '#90a4ae' },\\n            { name: \\\"温暖棕\\\", fontColor: '#e6d8cc', uiColor: '#a1887f', uiBgColor: '#4e342e', buttonColor: '#bcaaa4' },\\n            { name: \\\"清新蓝绿\\\", fontColor: '#d5f0eb', uiColor: '#4db6ac', uiBgColor: '#1e403b', buttonColor: '#80cbc4' },\\n            { name: \\\"暗金黑\\\", fontColor: '#f0e6d8', uiColor: '#c5a153', uiBgColor: '#212121', buttonColor: '#d4b56a' }\\n        ];\\n\\n        function applySettings(settings, mapInterfaceElement) {\\n            document.documentElement.style.setProperty('--font-main', settings.fontFamily);\\n            document.documentElement.style.setProperty('--font-title', settings.titleFontFamily);\\n            document.documentElement.style.setProperty('--theme-text-light', settings.fontColor);\\n            document.documentElement.style.setProperty('--theme-accent-orange', settings.uiColor);\\n            document.documentElement.style.setProperty('--theme-button-color', settings.buttonColor);\\n            document.documentElement.style.setProperty('--theme-bg-dark', settings.uiBgColor);\\n            document.documentElement.style.setProperty('--font-size-base', settings.fontSize);\\n\\n            // Calculate derived colors\\n            try {\\n                const calculateColor = (hex, amount) => {\\n                    let r = parseInt(hex.slice(1, 3), 16);\\n                    let g = parseInt(hex.slice(3, 5), 16);\\n                    let b = parseInt(hex.slice(5, 7), 16);\\n                    r = Math.min(255, r + amount); g = Math.min(255, g + amount); b = Math.min(255, b + amount);\\n                    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\\n                };\\n                document.documentElement.style.setProperty('--theme-accent-orange-light', calculateColor(settings.uiColor, 30));\\n                document.documentElement.style.setProperty('--theme-button-hover-color', calculateColor(settings.buttonColor, 20));\\n                document.documentElement.style.setProperty('--theme-bg-medium', calculateColor(settings.uiBgColor, 18));\\n                document.documentElement.style.setProperty('--theme-bg-light', calculateColor(settings.uiBgColor, 36));\\n                document.documentElement.style.setProperty('--theme-border-light', calculateColor(settings.uiBgColor, 50));\\n            } catch (e) {\\n                console.error(\\\"Error calculating derived UI colors:\\\", e);\\n                // Apply fallbacks if calculation fails\\n                document.documentElement.style.setProperty('--theme-accent-orange-light', settings.uiColor);\\n                document.documentElement.style.setProperty('--theme-button-hover-color', settings.buttonColor);\\n                document.documentElement.style.setProperty('--theme-bg-medium', '#3e4451');\\n                document.documentElement.style.setProperty('--theme-bg-light', '#505663');\\n                document.documentElement.style.setProperty('--theme-border-light', '#606673');\\n            }\\n\\n            document.body.classList.toggle('no-shadows', !settings.shadowsEnabled);\\n\\n            const quickCommandsSection = document.getElementById('game-actions-section');\\n            if (quickCommandsSection) {\\n                quickCommandsSection.classList.toggle('hidden-by-settings', !settings.showQuickCommands);\\n                 console.log(\\\"Quick command visibility set. show:\\\", settings.showQuickCommands, \\\"Classes:\\\", quickCommandsSection.className);\\n            }\\n\\n            // Toggle Bullet Chat visibility\\n            const bulletChatContainer = document.getElementById('bullet-chat-container');\\n            if (bulletChatContainer) {\\n                bulletChatContainer.classList.toggle('hidden-by-settings', !settings.showBulletChat);\\n                console.log(\\\"Bullet chat visibility set. show:\\\", settings.showBulletChat, \\\"Classes:\\\", bulletChatContainer.className);\\n            }\\n        }\\n\\n        function saveSettings(settings) {\\n            try { localStorage.setItem('mapPluginSettings', JSON.stringify(settings)); }\\n            catch (e) { console.error(\\\"Failed to save settings to localStorage:\\\", e); }\\n        }\\n\\n        function loadSettings() {\\n            try {\\n                const saved = localStorage.getItem('mapPluginSettings');\\n                if (saved) return { ...defaultSettings, ...JSON.parse(saved) };\\n            } catch (e) { console.error(\\\"Failed to load settings from localStorage:\\\", e); }\\n            return { ...defaultSettings };\\n        }\\n\\n        function updateSettingsUI(settings, elements) {\\n             if (!elements) { console.error(\\\"Elements object not provided to updateSettingsUI\\\"); return; }\\n             // Helper to safely set value\\n             const setValue = (el, value) => { if (el) el.value = value; else console.error(\\\"Element is null in updateSettingsUI\\\"); };\\n             const setChecked = (el, checked) => { if (el) el.checked = checked; else console.error(\\\"Element is null in updateSettingsUI\\\"); };\\n             const setText = (el, text) => { if (el) el.textContent = text; else console.error(\\\"Element is null in updateSettingsUI\\\"); };\\n\\n             setValue(elements.fontStyleSelect, settings.fontFamily);\\n             setValue(elements.titleFontStyleSelect, settings.titleFontFamily);\\n             setValue(elements.fontSizeSlider, parseInt(settings.fontSize, 10));\\n             setText(elements.fontSizeValue, settings.fontSize);\\n             setValue(elements.fontColorPicker, settings.fontColor);\\n             setValue(elements.uiColorPicker, settings.uiColor);\\n             setValue(elements.uiBgColorPicker, settings.uiBgColor);\\n             setValue(elements.buttonColorPicker, settings.buttonColor);\\n             setChecked(elements.shadowToggle, settings.shadowsEnabled);\\n             setChecked(elements.quickCommandsToggle, settings.showQuickCommands);\\n             setChecked(elements.bulletChatToggle, settings.showBulletChat); // Update bullet chat toggle\\n        }\\n\\n        function setupSettingsPanel() {\\n            const elements = {\\n                settingsPanel: document.getElementById('settings-panel'),\\n                settingsToggleBtn: document.getElementById('settings-toggle-btn'),\\n                settingsCloseBtn: document.getElementById('settings-close-btn'),\\n                fontStyleSelect: document.getElementById('font-style-select'),\\n                titleFontStyleSelect: document.getElementById('title-font-style-select'),\\n                fontSizeSlider: document.getElementById('font-size-slider'),\\n                fontSizeValue: document.getElementById('font-size-value'),\\n                fontColorPicker: document.getElementById('font-color-picker'),\\n                uiColorPicker: document.getElementById('ui-color-picker'),\\n                uiBgColorPicker: document.getElementById('ui-bg-color-picker'),\\n                buttonColorPicker: document.getElementById('button-color-picker'),\\n                shadowToggle: document.getElementById('shadow-toggle'),\\n                quickCommandsToggle: document.getElementById('quick-commands-toggle'),\\n                bulletChatToggle: document.getElementById('bullet-chat-toggle'), // Add bullet chat toggle element\\n                applyBtn: document.getElementById('settings-apply-btn'),\\n                resetBtn: document.getElementById('settings-reset-btn'),\\n                mapInterface: document.querySelector('.map-interface'),\\n                presetContainer: document.getElementById('preset-schemes-container'),\\n                settingsPanelContent: document.querySelector('#settings-panel .settings-panel-content') // Get content panel\\n            };\\n\\n            // Check if essential elements exist\\n            if (!elements.settingsPanel || !elements.settingsToggleBtn || !elements.settingsCloseBtn || !elements.applyBtn || !elements.resetBtn || !elements.mapInterface || !elements.settingsPanelContent) {\\n                console.error(\\\"Essential settings panel elements not found! Aborting setup.\\\");\\n                return;\\n            }\\n\\n            let currentSettings = loadSettings();\\n            applySettings(currentSettings, elements.mapInterface);\\n            updateSettingsUI(currentSettings, elements);\\n\\n            function openSettingsPanelLocal() {\\n                if (!elements.settingsPanel || !elements.settingsToggleBtn || !elements.settingsPanelContent) return;\\n                elements.settingsPanel.classList.remove('hidden');\\n                elements.settingsToggleBtn.classList.add('active');\\n                requestAnimationFrame(() => positionModalCenter(elements.settingsPanelContent));\\n            }\\n\\n            function closeSettingsPanelLocal() {\\n                if (!elements.settingsPanel || !elements.settingsToggleBtn) return;\\n                elements.settingsPanel.classList.add('hidden');\\n                elements.settingsToggleBtn.classList.remove('active');\\n            }\\n\\n            elements.settingsToggleBtn.addEventListener('click', openSettingsPanelLocal);\\n            elements.settingsCloseBtn.addEventListener('click', closeSettingsPanelLocal);\\n            elements.settingsPanel.addEventListener('click', (event) => {\\n                if (event.target === elements.settingsPanel) closeSettingsPanelLocal();\\n            });\\n\\n            if (elements.fontSizeSlider && elements.fontSizeValue) {\\n                elements.fontSizeSlider.addEventListener('input', () => {\\n                    elements.fontSizeValue.textContent = `${elements.fontSizeSlider.value}px`;\\n                });\\n            }\\n\\n             elements.applyBtn.addEventListener('click', () => {\\n                 // Check elements before accessing value\\n                 const getChecked = (el) => el ? el.checked : false;\\n                 const getValue = (el, defaultValue = '') => el ? el.value : defaultValue;\\n\\n                 const newSettings = {\\n                     fontFamily: getValue(elements.fontStyleSelect, defaultSettings.fontFamily),\\n                     titleFontFamily: getValue(elements.titleFontStyleSelect, defaultSettings.titleFontFamily),\\n                     fontSize: elements.fontSizeSlider ? `${elements.fontSizeSlider.value}px` : defaultSettings.fontSize,\\n                     fontColor: getValue(elements.fontColorPicker, defaultSettings.fontColor),\\n                     uiColor: getValue(elements.uiColorPicker, defaultSettings.uiColor),\\n                     uiBgColor: getValue(elements.uiBgColorPicker, defaultSettings.uiBgColor),\\n                     buttonColor: getValue(elements.buttonColorPicker, defaultSettings.buttonColor),\\n                     shadowsEnabled: getChecked(elements.shadowToggle),\\n                     showQuickCommands: getChecked(elements.quickCommandsToggle),\\n                     showBulletChat: getChecked(elements.bulletChatToggle) // Get bullet chat setting\\n                  };\\n                  currentSettings = newSettings; // Update current settings state\\n                  applySettings(newSettings, elements.mapInterface);\\n                  saveSettings(newSettings);\\n                  closeSettingsPanelLocal();\\n            });\\n\\n            elements.resetBtn.addEventListener('click', () => {\\n                currentSettings = { ...defaultSettings };\\n                applySettings(currentSettings, elements.mapInterface);\\n                updateSettingsUI(currentSettings, elements);\\n                saveSettings(currentSettings);\\n            });\\n\\n            // Populate Preset Schemes\\n            if (elements.presetContainer) {\\n                elements.presetContainer.innerHTML = '';\\n                presetColorSchemes.forEach(scheme => {\\n                    const presetButton = document.createElement('button');\\n                    presetButton.className = 'preset-scheme-button';\\n                    presetButton.title = scheme.name;\\n                    presetButton.innerHTML = `\\n                        <span class=\\\"preset-swatch\\\" style=\\\"background-color: ${scheme.uiBgColor}; border-color: ${scheme.uiColor};\\\">\\n                            <span class=\\\"preset-swatch-inner\\\" style=\\\"background-color: ${scheme.buttonColor};\\\"></span>\\n                            <span class=\\\"preset-swatch-text\\\" style=\\\"color: ${scheme.fontColor};\\\">Aa</span>\\n                        </span>\\n                        <span class=\\\"preset-name\\\">${scheme.name}</span>\\n                    `;\\n                    presetButton.addEventListener('click', () => {\\n                        currentSettings = {\\n                            ...currentSettings, // Keep non-color settings\\n                            fontColor: scheme.fontColor,\\n                            uiColor: scheme.uiColor,\\n                            uiBgColor: scheme.uiBgColor,\\n                            buttonColor: scheme.buttonColor\\n                        };\\n                        applySettings(currentSettings, elements.mapInterface);\\n                        updateSettingsUI(currentSettings, elements);\\n                        // Don't save here, user must click Apply\\n                    });\\n                    elements.presetContainer.appendChild(presetButton);\\n                });\\n            } else {\\n                console.error(\\\"Preset container not found.\\\");\\n            }\\n        }\\n        // --- End Settings Panel Logic ---\\n\\n        // --- Bullet Chat Logic ---\\n        function handleBulletClick(type, content) {\\n            // Placeholder for actual interaction logic (e.g., opening a modal provided by host environment)\\n            console.log(`Clicked bullet - Type: ${type}, Content: ${content}`);\\n            const cleanType = type.replace(/[<>]/g, '');\\n            const cleanContent = content.replace(/[<>]/g, '');\\n            // Simulate opening dialog with an alert\\n            alert(`模拟打开对话框\\\\n类型: ${cleanType}\\\\n内容: ${cleanContent}\\\\n\\\\n(在此处应调用实际的对话功能)`);\\n            // Example: If a function `openSillyTavernDialog` existed:\\n            // openSillyTavernDialog({ type: cleanType, content: cleanContent });\\n        }\\n\\n        function displayBulletComment(text, container) {\\n            if (!container) return;\\n            const commentElement = document.createElement('div');\\n            commentElement.className = 'bullet-comment';\\n\\n            const bulletMatch = text.match(/^\\\\[弹幕:(吐槽|建议)\\\\](.*)/);\\n\\n            if (bulletMatch) {\\n                const type = bulletMatch[1];\\n                const content = bulletMatch[2].trim();\\n                commentElement.textContent = `[${type}] ${content}`; // Display with type prefix\\n                commentElement.classList.add('clickable-bullet');\\n                commentElement.dataset.bulletType = type;\\n                commentElement.dataset.bulletContent = content;\\n                commentElement.title = \\\"点击与弹幕互动\\\"; // Tooltip\\n                commentElement.addEventListener('click', () => {\\n                    handleBulletClick(type, content);\\n                });\\n            } else {\\n                commentElement.textContent = text; // Display normal text\\n            }\\n\\n            container.appendChild(commentElement);\\n\\n            // Simple animation: slide in from right\\n            requestAnimationFrame(() => {\\n                commentElement.style.transform = 'translateX(0)';\\n                commentElement.style.opacity = '1';\\n            });\\n\\n            // // Remove after some time to prevent overflow (REMOVED FOR PERSISTENCE)\\n            // setTimeout(() => {\\n            //     commentElement.style.opacity = '0';\\n            //     setTimeout(() => {\\n            //         if (commentElement.parentNode === container) { // Check if still attached\\n            //             container.removeChild(commentElement);\\n            //         }\\n            //     }, 500); // Wait for fade out\\n            // }, 15000); // Increased display duration to 15 seconds\\n        }\\n\\n        // Function to display bullets parsed from map data\\n        function displayParsedBullets(bulletArray) {\\n            const bulletContainer = document.getElementById('bullet-chat-content');\\n            if (!bulletContainer || !Array.isArray(bulletArray)) return;\\n\\n            // Optional: Clear previous bullets if desired\\n            // bulletContainer.innerHTML = '';\\n\\n            bulletArray.forEach((bullet, index) => {\\n                setTimeout(() => {\\n                    displayBulletComment(bullet, bulletContainer);\\n                }, index * 800); // Stagger display slightly\\n            });\\n        }\\n\\n        function generateAndDisplayPlaceholderBullets() {\\n            const bulletContainer = document.getElementById('bullet-chat-content');\\n            if (!bulletContainer) return;\\n\\n            const placeholderBullets = [\\n                \\\"这里看起来有点意思...\\\",\\n                \\\"[弹幕:吐槽] 这也太巧合了吧？我不信！\\\", // Clickable example\\n                \\\"接下来会发生什么呢？\\\",\\n                \\\"感觉会有大事发生！\\\",\\n                \\\"[弹幕:建议] 要不去左边看看？感觉那边有东西。\\\", // Clickable example\\n                \\\"这个选择看起来很关键。\\\",\\n                \\\"哇，这个地方好漂亮！\\\",\\n                \\\"[弹幕:吐槽] 主角光环又来了...\\\", // Clickable example\\n                \\\"有点紧张...\\\",\\n                \\\"希望一切顺利。\\\",\\n                \\\"[弹幕:建议] 和这个人搞好关系可能有用。\\\", // Clickable example\\n                \\\"是时候展现真正的技术了！\\\"\\n            ];\\n\\n            // Clear existing placeholders if any\\n            // bulletContainer.innerHTML = '';\\n\\n            // Display bullets with a slight delay between each\\n            placeholderBullets.forEach((bullet, index) => {\\n                setTimeout(() => {\\n                    displayBulletComment(bullet, bulletContainer);\\n                }, index * 700); // Stagger the display\\n            });\\n        }\\n\\n        // --- Draggable Element Logic ---\\n        function makeDraggable(element, handle) {\\n            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\\n            let isDragging = false;\\n\\n            const dragMouseDown = (e) => {\\n                e = e || window.event;\\n                // Allow dragging only with left mouse button or touch\\n                if (e.type === 'mousedown' && e.button !== 0) return;\\n                e.preventDefault(); // Prevent text selection during drag\\n\\n                pos3 = e.clientX || e.touches[0].clientX;\\n                pos4 = e.clientY || e.touches[0].clientY;\\n                isDragging = true;\\n                element.classList.add('dragging'); // Add class for visual feedback\\n\\n                document.onmouseup = closeDragElement;\\n                document.ontouchend = closeDragElement;\\n                document.onmousemove = elementDrag;\\n                document.ontouchmove = elementDrag;\\n            };\\n\\n            const elementDrag = (e) => {\\n                if (!isDragging) return;\\n                e = e || window.event;\\n                e.preventDefault();\\n\\n                const currentX = e.clientX || e.touches[0].clientX;\\n                const currentY = e.clientY || e.touches[0].clientY;\\n\\n                pos1 = pos3 - currentX;\\n                pos2 = pos4 - currentY;\\n                pos3 = currentX;\\n                pos4 = currentY;\\n\\n                // Calculate new position, constrained within viewport\\n                const parentRect = element.parentElement.getBoundingClientRect(); // Use map-interface as boundary\\n                const elementRect = element.getBoundingClientRect();\\n\\n                let newTop = element.offsetTop - pos2;\\n                let newLeft = element.offsetLeft - pos1;\\n\\n                // Constrain top/bottom\\n                newTop = Math.max(0, newTop); // Don't go above parent top\\n                newTop = Math.min(parentRect.height - elementRect.height, newTop); // Don't go below parent bottom\\n\\n                // Constrain left/right\\n                newLeft = Math.max(0, newLeft); // Don't go left of parent left\\n                newLeft = Math.min(parentRect.width - elementRect.width, newLeft); // Don't go right of parent right\\n\\n\\n                element.style.top = newTop + \\\"px\\\";\\n                element.style.left = newLeft + \\\"px\\\";\\n            };\\n\\n            const closeDragElement = () => {\\n                isDragging = false;\\n                element.classList.remove('dragging'); // Remove dragging class\\n                document.onmouseup = null;\\n                document.ontouchend = null;\\n                document.onmousemove = null;\\n                document.ontouchmove = null;\\n            };\\n\\n            if (handle) {\\n                handle.onmousedown = dragMouseDown;\\n                handle.ontouchstart = dragMouseDown;\\n            } else {\\n                element.onmousedown = dragMouseDown;\\n                element.ontouchstart = dragMouseDown;\\n            }\\n        }\\n        // --- End Draggable Element Logic ---\\n\\n\\n        function init() {\\n            setupEventListeners();\\n            // Delay setupSettingsPanel slightly\\n            setTimeout(() => {\\n                try { setupSettingsPanel(); }\\n                catch (e) { console.error(\\\"Error during delayed setupSettingsPanel execution:\\\", e); }\\n            }, 0);\\n            processMapData();\\n\\n            // Initialize bullet chat (draggable removed)\\n            const bulletChatContainer = document.getElementById('bullet-chat-container');\\n            // const bulletChatHandle = document.getElementById('bullet-chat-header'); // No longer needed for dragging\\n\\n            // Display initial bullets (parsed or placeholder)\\n            // Check if enabled by settings before showing\\n            if (loadSettings().showBulletChat) {\\n                if (mapData && mapData.bullets && mapData.bullets.length > 0) {\\n                    console.log(\\\"Displaying parsed bullets from map data (init).\\\");\\n                    displayParsedBullets(mapData.bullets); // Display parsed bullets\\n                } else {\\n                    console.log(\\\"No parsed bullets found, displaying placeholder bullets (init).\\\");\\n                    setTimeout(generateAndDisplayPlaceholderBullets, 1500); // Display placeholders after a delay\\n                }\\n            } else {\\n                 console.log(\\\"Bullet chat disabled in settings, not displaying bullets.\\\");\\n            }\\n        }\\n\\n        document.addEventListener('DOMContentLoaded', init);\\n    </script>\\n\\n    <!-- 新增：商店模态框 -->\\n    <div id=\\\"shop-modal\\\" class=\\\"modal-overlay hidden\\\">\\n        <div class=\\\"shop-modal-dialog\\\">\\n            <button id=\\\"close-shop-btn\\\" class=\\\"close-modal-button\\\">&times;</button>\\n            <h4><i class=\\\"fas fa-store\\\"></i> 商店</h4>\\n            <div class=\\\"money-display\\\">\\n                <i class=\\\"fas fa-coins\\\"></i> <span id=\\\"player-money\\\">0</span> 金币\\n            </div>\\n            <div id=\\\"shop-items-container\\\" class=\\\"shop-items-container\\\">\\n                <!-- 商店物品将在这里动态添加 -->\\n            </div>\\n        </div>\\n    </div>\\n\\n    <!-- 新增：背包模态框 -->\\n    <div id=\\\"inventory-modal\\\" class=\\\"modal-overlay hidden\\\">\\n        <div class=\\\"inventory-modal-dialog\\\">\\n            <button id=\\\"close-inventory-btn\\\" class=\\\"close-modal-button\\\">&times;</button>\\n            <h4><i class=\\\"fas fa-briefcase\\\"></i> 背包</h4>\\n            <div id=\\\"inventory-items-container\\\" class=\\\"inventory-items-container\\\">\\n                <!-- 背包物品将在这里动态添加 -->\\n            </div>\\n        </div>\\n    </div>\\n\\n    <!-- Settings Panel HTML -->\\n    <div id=\\\"settings-panel\\\" class=\\\"settings-panel hidden\\\">\\n        <div class=\\\"settings-panel-content\\\"> <!-- Inner content wrapper -->\\n            <div class=\\\"settings-header\\\">\\n                <h3><i class=\\\"fas fa-sliders-h\\\"></i> 显示设置</h3>\\n                <button id=\\\"settings-close-btn\\\" class=\\\"settings-close-button\\\">&times;</button>\\n            </div>\\n            <div class=\\\"settings-content\\\">\\n                <div class=\\\"setting-item\\\">\\n                    <label for=\\\"font-style-select\\\">字体样式:</label>\\n                    <select id=\\\"font-style-select\\\">\\n                        <option value='\\\"ZCOOL XiaoWei\\\", \\\"Microsoft YaHei\\\", sans-serif'>造字工房小薇体 (推荐)</option>\\n                        <option value='\\\"SimSun\\\", \\\"宋体\\\", serif'>宋体 (SimSun)</option>\\n                        <option value='\\\"SimHei\\\", \\\"黑体\\\", sans-serif'>黑体 (SimHei)</option>\\n                        <option value='\\\"Microsoft YaHei\\\", \\\"微软雅黑\\\", sans-serif'>微软雅黑</option>\\n                        <option value='\\\"KaiTi\\\", \\\"楷体\\\", \\\"STKaiti\\\", serif'>楷体 (KaiTi)</option>\\n                        <option value='\\\"FangSong\\\", \\\"仿宋\\\", \\\"STFangsong\\\", serif'>仿宋 (FangSong)</option>\\n                        <option value='\\\"NSimSun\\\", \\\"新宋体\\\", serif'>新宋体 (NSimSun)</option>\\n                        <option value='\\\"PingFang SC\\\", \\\"苹方 SC\\\", sans-serif'>苹方 SC</option>\\n                        <option value='\\\"Source Han Sans CN\\\", \\\"思源黑体 CN\\\", sans-serif'>思源黑体 CN</option>\\n                        <option value='\\\"Source Han Serif CN\\\", \\\"思源宋体 CN\\\", serif'>思源宋体 CN</option>\\n                        <option value='\\\"WenQuanYi Micro Hei\\\", \\\"文泉驿微米黑\\\", sans-serif'>文泉驿微米黑</option>\\n                        <!-- Add more font options as needed -->\\n                    </select>\\n                </div>\\n                <div class=\\\"setting-item\\\">\\n                    <label for=\\\"title-font-style-select\\\">标题字体:</label>\\n                    <select id=\\\"title-font-style-select\\\">\\n                        <option value='\\\"ZCOOL QingKe HuangYou\\\", \\\"Microsoft YaHei\\\", sans-serif'>造字工房青刻黄油体 (推荐)</option>\\n                        <option value='\\\"SimHei\\\", \\\"黑体\\\", sans-serif'>黑体 (SimHei)</option>\\n                        <option value='\\\"Microsoft YaHei\\\", \\\"微软雅黑\\\", sans-serif'>微软雅黑</option>\\n                        <option value='\\\"FZDaHei-B02\\\", \\\"方正大黑\\\", sans-serif'>方正大黑</option>\\n                        <option value='\\\"FZShuTi\\\", \\\"方正舒体\\\", serif'>方正舒体</option>\\n                        <option value='\\\"FZYaoti\\\", \\\"方正姚体\\\", serif'>方正姚体</option>\\n                        <option value='\\\"STHupo\\\", \\\"华文琥珀\\\", serif'>华文琥珀</option>\\n                        <option value='\\\"Source Han Sans CN\\\", \\\"思源黑体 CN\\\", sans-serif'>思源黑体 CN</option>\\n                        <!-- Add more title font options -->\\n                    </select>\\n                </div>\\n                <div class=\\\"setting-item\\\">\\n                    <label for=\\\"font-size-slider\\\">字体大小:</label>\\n                    <input type=\\\"range\\\" id=\\\"font-size-slider\\\" min=\\\"10\\\" max=\\\"20\\\" value=\\\"13\\\" step=\\\"1\\\">\\n                    <span id=\\\"font-size-value\\\">13px</span>\\n                </div>\\n                <div class=\\\"setting-item\\\">\\n                    <label for=\\\"font-color-picker\\\">字体颜色:</label>\\n                    <input type=\\\"color\\\" id=\\\"font-color-picker\\\" value=\\\"#e6e6e6\\\">\\n                </div>\\n                <div class=\\\"setting-item\\\">\\n                    <label for=\\\"ui-color-picker\\\">UI 主色:</label>\\n                    <input type=\\\"color\\\" id=\\\"ui-color-picker\\\" value=\\\"#e8a85e\\\">\\n                </div>\\n                 <div class=\\\"setting-item\\\">\\n                    <label for=\\\"ui-bg-color-picker\\\">UI 背景色:</label>\\n                    <input type=\\\"color\\\" id=\\\"ui-bg-color-picker\\\" value=\\\"#2c313a\\\">\\n                </div>\\n                 <div class=\\\"setting-item\\\">\\n                    <label for=\\\"button-color-picker\\\">按钮主色:</label>\\n                    <input type=\\\"color\\\" id=\\\"button-color-picker\\\" value=\\\"#7cb342\\\">\\n                </div>\\n                <div class=\\\"setting-item\\\">\\n                     <label for=\\\"shadow-toggle\\\">启用阴影:</label>\\n                     <input type=\\\"checkbox\\\" id=\\\"shadow-toggle\\\" checked>\\n                 </div>\\n                 <div class=\\\"setting-item\\\">\\n                     <label for=\\\"quick-commands-toggle\\\">显示快捷指令:</label>\\n                     <input type=\\\"checkbox\\\" id=\\\"quick-commands-toggle\\\" checked>\\n                 </div>\\n                 <div class=\\\"setting-item\\\">\\n                     <label for=\\\"bullet-chat-toggle\\\">显示弹幕:</label>\\n                     <input type=\\\"checkbox\\\" id=\\\"bullet-chat-toggle\\\" checked>\\n                 </div>\\n\\n                 <!-- Preset Schemes Section -->\\n                <div class=\\\"setting-separator\\\"></div>\\n                <div class=\\\"setting-item preset-section-title\\\">\\n                     <label>预设方案:</label>\\n                     <span></span>\\n                </div>\\n                <div id=\\\"preset-schemes-container\\\" class=\\\"preset-schemes-grid\\\">\\n                    <!-- Preset buttons will be added here by JavaScript -->\\n                </div>\\n                <!-- End Preset Schemes Section -->\\n\\n            </div>\\n            <div class=\\\"settings-actions\\\">\\n                <button id=\\\"settings-apply-btn\\\" class=\\\"settings-action-button apply\\\">\\n                    <i class=\\\"fas fa-check\\\"></i> 应用\\n                </button>\\n                <button id=\\\"settings-reset-btn\\\" class=\\\"settings-action-button reset\\\">\\n                    <i class=\\\"fas fa-undo\\\"></i> 重置\\n                </button>\\n            </div>\\n        </div> <!-- End settings-panel-content -->\\n    </div>\\n    <!-- End Settings Panel HTML -->\\n\\n    <!-- 新增：保存/读取 模态框 -->\\n    <div id=\\\"save-load-modal\\\" class=\\\"modal-overlay hidden\\\">\\n        <div class=\\\"save-load-modal-dialog\\\">\\n            <button id=\\\"close-save-load-modal-btn\\\" class=\\\"close-modal-button\\\">&times;</button>\\n            <h4 id=\\\"save-load-modal-title\\\"><i class=\\\"fas fa-database\\\"></i> 数据管理</h4>\\n            <div class=\\\"save-load-content\\\">\\n                <div class=\\\"saved-section\\\">\\n                    <h5><i class=\\\"fas fa-map-marked-alt\\\"></i> 已存地点</h5>\\n                    <div id=\\\"saved-locations-list\\\" class=\\\"saved-list\\\">\\n                        <!-- Saved locations will be listed here -->\\n                        <p class=\\\"info-message\\\">暂无已保存的地点。</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"saved-section\\\">\\n                    <h5><i class=\\\"fas fa-users\\\"></i> 已遇人物</h5>\\n                    <div id=\\\"saved-characters-list\\\" class=\\\"saved-list\\\">\\n                        <!-- Saved characters will be listed here -->\\n                        <p class=\\\"info-message\\\">暂无已记录的人物。</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div id=\\\"save-load-modal-actions\\\" class=\\\"dialog-buttons\\\">\\n                 <!-- Action buttons might be added here later if needed -->\\n                 <button id=\\\"clear-all-saves-btn\\\" class=\\\"dialog-button cancel-button\\\" style=\\\"background: #c62828; flex-grow: 0.5;\\\" title=\\\"清除所有本地保存的地图和人物数据\\\">\\n                     <i class=\\\"fas fa-trash-alt\\\"></i> 清空全部\\n                 </button>\\n            </div>\\n        </div>\\n    </div>\\n    <!-- End 保存/读取 模态框 -->\\n\\n    <style>\\n        @import url('https://fonts.googleapis.com/css2?family=ZCOOL+XiaoWei&family=ZCOOL+QingKe+HuangYou&display=swap');\\n\\n        :root {\\n            /* Base Colors & Fonts (controlled by JS/Settings) */\\n            --theme-bg-dark: #2c313a;\\n            --theme-bg-medium: #3e4451;\\n            --theme-bg-light: #505663;\\n            --theme-text-light: #e6e6e6;\\n            --theme-text-medium: #b0b0b0;\\n            --theme-text-dark: #222222;\\n            --theme-accent-orange: #e8a85e;\\n            --theme-accent-orange-light: #f5c58a;\\n            --theme-button-color: #7cb342;\\n            --theme-button-hover-color: #8fd352;\\n            --theme-border-light: #606673;\\n            --font-title: \\\"ZCOOL QingKe HuangYou\\\", \\\"Microsoft YaHei\\\", sans-serif;\\n            --font-main: \\\"ZCOOL XiaoWei\\\", \\\"Microsoft YaHei\\\", sans-serif;\\n            --font-size-base: 13px;\\n\\n            /* Derived/Static Colors & UI Elements */\\n            --theme-border-accent: var(--theme-accent-orange);\\n            --theme-success: #7cb342;\\n            --theme-success-hover: #8fd352;\\n            --theme-cancel-bg: #78909c;\\n            --theme-cancel-hover: #90a4ae;\\n            --border-radius-base: 8px;\\n            --border-radius-small: 5px;\\n            --icon-size-button: 1em;\\n            --shadow-subtle: 0 2px 5px rgba(0, 0, 0, 0.2);\\n            --shadow-medium: 0 4px 10px rgba(0, 0, 0, 0.25);\\n\\n            /* Map Specific Styles */\\n            --map-rect-stroke: #6a6f7c;\\n            --map-rect-stroke-hover: var(--theme-accent-orange-light);\\n            --map-rect-stroke-selected: var(--theme-accent-orange);\\n            --map-label-fill: var(--theme-text-light);\\n            --map-label-fill-selected: var(--theme-text-dark);\\n            --map-current-stroke: var(--theme-accent-orange);\\n            --map-current-label-fill: var(--theme-text-dark);\\n            --map-road-stroke: #777c88;\\n            --map-bg-pattern: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.03) 1px, transparent 0);\\n        }\\n\\n        html { font-size: var(--font-size-base); }\\n        body {\\n            background-color: transparent; margin: 0; padding: 10px;\\n            font-family: var(--font-main); color: var(--theme-text-light);\\n            box-sizing: border-box; font-weight: 400;\\n        }\\n        .map-interface {\\n            max-width: 100%; width: 100%; margin: 0 auto;\\n            background: var(--theme-bg-dark); border: 2px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-base); box-shadow: var(--shadow-medium);\\n            padding: 20px; box-sizing: border-box; position: relative;\\n            overflow: hidden; min-height: 700px; z-index: 100;\\n        }\\n        .map-header {\\n            text-align: center; margin-bottom: 25px; padding-bottom: 15px;\\n            border-bottom: 1px solid var(--theme-border-light);\\n        }\\n        .map-header h2 {\\n            font-size: 1.85rem; margin: 0; padding: 0; line-height: 1.4;\\n            color: var(--theme-accent-orange-light); font-family: var(--font-title);\\n            font-weight: normal; position: relative; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);\\n        }\\n        .current-partners-section {\\n            margin-bottom: 25px; padding: 15px;\\n            background-color: rgba(232, 168, 94, 0.1); border: 1px solid var(--theme-accent-orange);\\n            border-radius: var(--border-radius-base); display: block; box-shadow: var(--shadow-subtle);\\n        }\\n        .current-partners-section.hidden { display: none; }\\n        .current-partners-section .section-title {\\n            margin-bottom: 12px; color: var(--theme-accent-orange-light); font-weight: bold;\\n        }\\n        .partner-button-list { display: flex; flex-wrap: wrap; gap: 10px; }\\n        .partner-button {\\n            background-color: var(--theme-bg-light); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small); padding: 7px 14px; font-size: 1rem;\\n            color: var(--theme-text-light); cursor: pointer; transition: all 0.2s ease;\\n            display: inline-flex; align-items: center; box-shadow: var(--shadow-subtle);\\n        }\\n        .partner-button i { margin-right: 6px; color: var(--theme-accent-orange); }\\n        .partner-button:hover {\\n            background-color: var(--theme-border-light); border-color: var(--theme-accent-orange-light);\\n            transform: translateY(-1px); box-shadow: var(--shadow-medium);\\n        }\\n        .movement-alert {\\n            background-color: rgba(224, 172, 105, 0.2); border: 1px solid var(--theme-accent-orange);\\n            border-radius: var(--border-radius-small); padding: 12px; margin-bottom: 20px;\\n            text-align: center; color: var(--theme-accent-orange-light);\\n        }\\n        .movement-alert.hidden { display: none; }\\n        .movement-alert i { margin-right: 8px; }\\n\\n        /* Visual Map SVG Styles */\\n        #visual-map-container {\\n            position: relative; width: 100%; max-width: 800px; margin: 0 auto 25px auto;\\n            border: 2px solid var(--theme-border-light); background-color: var(--theme-bg-medium);\\n            background-image: var(--map-bg-pattern); background-size: 10px 10px;\\n            border-radius: var(--border-radius-base); overflow: hidden; aspect-ratio: 800 / 600;\\n            box-shadow: var(--shadow-medium); pointer-events: auto; z-index: 1;\\n        }\\n        #visual-map { display: block; width: 100%; height: 100%; pointer-events: auto; }\\n        .map-location-group {\\n            cursor: pointer; transition: transform 0.2s ease, filter 0.2s ease;\\n            filter: drop-shadow(1px 1px 1px rgba(0,0,0,0.3)); transform-origin: center center;\\n            pointer-events: auto;\\n        }\\n        .map-location-group:not(.current-location):hover { filter: drop-shadow(2px 2px 3px rgba(0,0,0,0.4)); }\\n        .map-location-group:not(.current-location):hover .map-location-rect {\\n            fill: var(--theme-border-light); stroke: var(--map-rect-stroke-hover);\\n        }\\n        .map-location-group.selected { filter: drop-shadow(2px 2px 3px rgba(0,0,0,0.4)); }\\n        .map-location-group.selected .map-location-rect {\\n            fill: var(--theme-accent-orange); stroke: var(--map-rect-stroke-selected); stroke-width: 2.5px;\\n        }\\n        .map-location-group.selected .map-location-label { font-weight: bold; text-shadow: none; }\\n        .map-location-rect {\\n            fill: var(--theme-bg-light); stroke: var(--map-rect-stroke); stroke-width: 1.5px;\\n            transition: fill 0.2s ease, stroke 0.2s ease, stroke-width 0.2s ease;\\n        }\\n        .map-location-label {\\n            fill: var(--map-label-fill); font-family: var(--font-main); font-size: 0.92rem;\\n            text-anchor: middle; dominant-baseline: middle; pointer-events: none; user-select: none;\\n            transition: fill 0.2s ease, font-weight 0.2s ease, text-shadow 0.2s ease;\\n            text-shadow: 1px 1px 1px rgba(0,0,0,0.5);\\n        }\\n        .map-location-group.current-location { cursor: default; filter: drop-shadow(1px 1px 2px rgba(0,0,0,0.4)); }\\n        .map-location-group.current-location .map-location-rect {\\n            fill: var(--theme-accent-orange-light); stroke: var(--map-current-stroke); stroke-width: 2.5px;\\n        }\\n        .map-location-group.current-location .map-location-label {\\n            fill: var(--map-current-label-fill); font-weight: bold; text-shadow: none;\\n        }\\n        .map-tooltip {\\n            position: fixed; background-color: rgba(44, 49, 58, 0.95); color: var(--theme-text-light);\\n            border: 1px solid var(--theme-border-light); border-radius: var(--border-radius-small);\\n            padding: 6px 12px; font-size: 0.92rem; white-space: nowrap; z-index: 1010;\\n            pointer-events: none; opacity: 0; transition: opacity 0.15s ease; box-shadow: var(--shadow-subtle);\\n        }\\n        .map-tooltip.visible { opacity: 1; }\\n        .map-road {\\n            stroke: var(--map-road-stroke); stroke-linecap: round; stroke-linejoin: round;\\n            filter: drop-shadow(1px 1px 1px rgba(0,0,0,0.2));\\n        }\\n        .current-user-position { /* Style for the red dot */\\n             /* Fill, stroke, etc., set by JS */\\n        }\\n\\n        /* Sub-locations & Details */\\n        .sub-location-grid {\\n            display: grid; grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\\n            gap: 12px; margin-bottom: 25px; padding: 18px; background-color: var(--theme-bg-medium);\\n            border-radius: var(--border-radius-base); border: 1px solid var(--theme-border-light);\\n            transition: opacity 0.3s ease, max-height 0.4s ease, box-shadow 0.3s ease;\\n            opacity: 1; max-height: 1000px; overflow: hidden; box-shadow: var(--shadow-subtle);\\n        }\\n        .sub-location-grid.hidden {\\n            opacity: 0; max-height: 0; padding-top: 0; padding-bottom: 0; margin-bottom: 0; border: none; box-shadow: none;\\n        }\\n        .sub-location-button {\\n            background-color: var(--theme-bg-light); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small); padding: 10px 15px; color: var(--theme-text-light);\\n            font-family: var(--font-main); font-size: 1rem; cursor: pointer; transition: all 0.2s ease;\\n            text-align: left; box-shadow: var(--shadow-subtle); display: flex; align-items: center;\\n            overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\\n        }\\n        .sub-location-button i { margin-right: 8px; color: var(--theme-accent-orange); transition: color 0.2s ease; flex-shrink: 0; }\\n        .sub-location-button:hover:not(.disabled) {\\n            background-color: var(--theme-border-light); border-color: var(--theme-accent-orange-light);\\n            transform: translateY(-1px); box-shadow: var(--shadow-medium);\\n        }\\n        .sub-location-button.selected {\\n            background: linear-gradient(to bottom, var(--theme-accent-orange-light), var(--theme-accent-orange));\\n            border-color: var(--theme-accent-orange); color: var(--theme-text-dark);\\n            box-shadow: var(--shadow-medium); transform: translateY(-1px); font-weight: bold;\\n        }\\n        .sub-location-button.selected i { color: var(--theme-text-dark); }\\n        .location-details {\\n            margin-top: 25px; padding: 25px; background-color: var(--theme-bg-medium);\\n            border-radius: var(--border-radius-base); border: 1px solid var(--theme-border-light);\\n            box-shadow: var(--shadow-medium);\\n            transition: opacity 0.3s ease, transform 0.3s ease, max-height 0.4s ease;\\n            opacity: 1; max-height: 1000px; overflow: hidden; transform: translateY(0);\\n        }\\n        .location-details.hidden {\\n             opacity: 0; max-height: 0; padding-top: 0; padding-bottom: 0; margin-top: 0; border: none; transform: translateY(-10px); box-shadow: none;\\n        }\\n        .detail-header {\\n            font-size: 1.38rem; margin-bottom: 20px; padding-bottom: 12px;\\n            border-bottom: 1px solid var(--theme-border-light); color: var(--theme-accent-orange-light);\\n            text-align: center; font-weight: bold;\\n        }\\n        .detail-header i { margin-right: 10px; }\\n        .section-title {\\n            font-size: 1.15rem; color: var(--theme-text-medium); margin-bottom: 15px;\\n            font-weight: bold; border-bottom: 1px dashed var(--theme-border-light); padding-bottom: 5px;\\n        }\\n        .section-title i { margin-right: 8px; color: var(--theme-accent-orange); }\\n        .character-list {\\n            display: grid; grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));\\n            gap: 10px; margin-bottom: 25px;\\n        }\\n        .character-item {\\n            background-color: var(--theme-bg-light); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small); padding: 9px 12px; font-size: 1rem;\\n            color: var(--theme-text-light); transition: all 0.2s ease; display: flex; align-items: center;\\n            overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer;\\n            text-align: left; box-shadow: var(--shadow-subtle);\\n        }\\n        .character-item:hover:not(.empty) {\\n             background-color: var(--theme-border-light); border-color: var(--theme-accent-orange-light);\\n             transform: translateY(-1px); box-shadow: var(--shadow-medium);\\n        }\\n        .character-item.selected {\\n            background: linear-gradient(to bottom, var(--theme-accent-orange-light), var(--theme-accent-orange));\\n            border-color: var(--theme-accent-orange); color: var(--theme-text-dark);\\n            box-shadow: var(--shadow-medium); transform: translateY(-1px); font-weight: bold;\\n        }\\n         .character-item.selected i { color: var(--theme-text-dark); }\\n        .character-item i { margin-right: 7px; color: var(--theme-accent-orange); flex-shrink: 0; }\\n        .character-item.empty {\\n            color: var(--theme-text-medium); background-color: transparent;\\n            border: 1px dashed var(--theme-border-light); justify-content: center; opacity: 0.7;\\n            cursor: default; grid-column: 1 / -1; text-align: center; box-shadow: none; padding: 8px 10px;\\n        }\\n        .character-item.empty i { color: var(--theme-text-medium); margin: 0 5px 0 0; }\\n\\n        /* Action Buttons */\\n        .action-section { margin-top: 25px; text-align: center; }\\n        .action-button { /* Main action button (Go To) */\\n            background: var(--theme-button-color); color: white; border: none;\\n            border-radius: var(--border-radius-small); padding: 12px 30px; font-size: 16px;\\n            font-weight: 500; cursor: pointer; transition: all 0.2s ease;\\n            box-shadow: var(--shadow-subtle); display: inline-flex; align-items: center;\\n            justify-content: center; text-shadow: 1px 1px 1px rgba(0,0,0,0.2);\\n        }\\n        .action-button:hover:not(:disabled) {\\n            background: var(--theme-button-hover-color); box-shadow: var(--shadow-medium);\\n            transform: translateY(-1px);\\n        }\\n        .action-button:active:not(:disabled) { transform: translateY(0px); box-shadow: var(--shadow-subtle); }\\n        .action-button:disabled {\\n             opacity: 0.6; cursor: not-allowed; background: var(--theme-cancel-bg);\\n             box-shadow: none; text-shadow: none;\\n        }\\n        .action-button i { margin-right: 10px; }\\n        .switch-area-section { text-align: center; margin-bottom: 25px; }\\n        .switch-area-button {\\n            background: linear-gradient(to bottom, var(--theme-bg-light), var(--theme-bg-medium));\\n            border: 1px solid var(--theme-border-light); border-radius: var(--border-radius-base);\\n            padding: 12px 25px; color: var(--theme-text-light); font-family: var(--font-main);\\n            font-size: 15px; cursor: pointer; transition: all 0.2s ease; box-shadow: var(--shadow-subtle);\\n            display: inline-flex; align-items: center; justify-content: center;\\n            text-shadow: 1px 1px 1px rgba(0,0,0,0.1);\\n        }\\n        .switch-area-button i { margin-right: 10px; color: var(--theme-accent-orange); transition: color 0.2s ease; }\\n        .switch-area-button:hover:not(.selected) {\\n            background: linear-gradient(to bottom, var(--theme-border-light), var(--theme-bg-light));\\n            border-color: var(--theme-accent-orange-light); transform: translateY(-1px); box-shadow: var(--shadow-medium);\\n        }\\n        .switch-area-button.selected {\\n            background: linear-gradient(to bottom, var(--theme-accent-orange-light), var(--theme-accent-orange));\\n            border-color: var(--theme-accent-orange); color: var(--theme-text-dark);\\n            box-shadow: var(--shadow-medium); transform: translateY(-1px); font-weight: bold; text-shadow: none;\\n        }\\n        .switch-area-button.selected i { color: var(--theme-text-dark); }\\n        .switch-area-button.hidden { display: none; }\\n\\n        /* Modals */\\n        .modal-overlay {\\n            position: fixed; top: 0; left: 0; width: 100%; height: 100%;\\n            background-color: rgba(44, 49, 58, 0.85); backdrop-filter: blur(4px);\\n            z-index: 1000; opacity: 0; transition: opacity 0.3s ease; pointer-events: none;\\n        }\\n        .modal-overlay:not(.hidden) { opacity: 1; pointer-events: auto; }\\n        .confirm-dialog, .character-modal-dialog {\\n            background-color: var(--theme-bg-dark); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-base); box-shadow: var(--shadow-medium);\\n            transition: opacity 0.3s ease, top 0.3s ease, left 0.3s ease;\\n            opacity: 0; position: absolute; /* Centered by JS */\\n        }\\n        .modal-overlay:not(.hidden) .confirm-dialog,\\n        .modal-overlay:not(.hidden) .character-modal-dialog { opacity: 1; }\\n        .confirm-dialog { padding: 30px; width: 90%; max-width: 380px; }\\n        .confirm-dialog h4 {\\n            color: var(--theme-accent-orange-light); margin-top: 0; margin-bottom: 20px;\\n            font-family: var(--font-title); font-weight: normal; text-align: center; font-size: 20px;\\n            text-shadow: 1px 1px 2px rgba(0,0,0,0.3);\\n        }\\n        .confirm-dialog p { margin-bottom: 30px; line-height: 1.7; text-align: center; font-size: 15px; color: var(--theme-text-light); }\\n        .dialog-buttons { display: flex; justify-content: space-around; gap: 20px; }\\n        .dialog-button {\\n            flex-grow: 1; padding: 10px 18px; border-radius: var(--border-radius-small);\\n            cursor: pointer; transition: all 0.2s ease; border: none; font-family: var(--font-main);\\n            font-size: 15px; font-weight: 500; text-align: center; display: inline-flex;\\n            align-items: center; justify-content: center; box-shadow: var(--shadow-subtle);\\n            text-shadow: 1px 1px 1px rgba(0,0,0,0.2);\\n        }\\n        .cancel-button { background: linear-gradient(to bottom, var(--theme-cancel-bg), #607d8b); color: var(--theme-text-light); font-weight: 400; }\\n        .cancel-button:hover { background: linear-gradient(to bottom, var(--theme-cancel-hover), #78909c); box-shadow: var(--shadow-medium); transform: translateY(-1px); }\\n        .confirm-button { background: var(--theme-button-color); color: white; }\\n        .confirm-button:hover { background: var(--theme-button-hover-color); box-shadow: var(--shadow-medium); transform: translateY(-1px); }\\n        .dialog-button i { margin-right: 8px; }\\n        .character-modal-dialog { padding: 25px 30px 30px 30px; width: 90%; max-width: 450px; position: relative; }\\n        .close-modal-button {\\n            position: absolute; top: 10px; right: 12px; background: none; border: none;\\n            font-size: 26px; color: var(--theme-text-medium); cursor: pointer; padding: 0; line-height: 1;\\n            transition: color 0.2s ease, transform 0.2s ease;\\n        }\\n        .close-modal-button:hover { color: var(--theme-text-light); transform: scale(1.1); }\\n        .character-modal-dialog h4 {\\n            color: var(--theme-accent-orange-light); margin-top: 0; margin-bottom: 20px;\\n            font-family: var(--font-title); font-weight: normal; text-align: center; font-size: 20px;\\n            padding-right: 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);\\n        }\\n        .modal-description-content {\\n            font-size: 14px; line-height: 1.7; color: var(--theme-text-light); white-space: pre-wrap;\\n            margin-bottom: 25px; max-height: 280px; overflow-y: auto; background-color: var(--theme-bg-medium);\\n            padding: 15px; border-radius: var(--border-radius-small); border: 1px solid var(--theme-border-light);\\n            box-shadow: inset 0 1px 3px rgba(0,0,0,0.15);\\n        }\\n        .modal-description-content::-webkit-scrollbar { width: 8px; }\\n        .modal-description-content::-webkit-scrollbar-track { background: var(--theme-bg-medium); border-radius: 4px; }\\n        .modal-description-content::-webkit-scrollbar-thumb { background-color: var(--theme-bg-light); border-radius: 4px; border: 1px solid var(--theme-bg-medium); }\\n        .character-modal-dialog .interaction-options-grid {\\n             display: grid; grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); gap: 12px; margin-top: 0;\\n        }\\n        .character-modal-dialog .interaction-button {\\n             background-color: var(--theme-bg-light); color: var(--theme-text-light); border: 1px solid var(--theme-border-light);\\n             border-radius: var(--border-radius-small); padding: 10px 15px; font-size: 14px; font-family: var(--font-main);\\n             cursor: pointer; transition: all 0.2s ease; text-align: center; box-shadow: var(--shadow-subtle);\\n             white-space: normal; min-height: 45px; display: flex; align-items: center; justify-content: center;\\n        }\\n        .character-modal-dialog .interaction-button:hover {\\n             background-color: var(--theme-border-light); border-color: var(--theme-accent-orange-light);\\n             transform: translateY(-1px); box-shadow: var(--shadow-medium);\\n        }\\n        .custom-input-area { display: flex; margin-top: 20px; gap: 10px; }\\n        #custom-interaction-input {\\n            flex-grow: 1; padding: 9px 14px; border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small); background-color: var(--theme-bg-medium);\\n            color: var(--theme-text-light); font-size: 1.08rem; font-family: var(--font-main);\\n            box-shadow: inset 0 1px 3px rgba(0,0,0,0.2); outline: none;\\n            transition: border-color 0.2s ease, box-shadow 0.2s ease;\\n        }\\n        #custom-interaction-input:focus {\\n            border-color: var(--theme-accent-orange);\\n            box-shadow: inset 0 1px 3px rgba(0,0,0,0.2), 0 0 0 2px rgba(232, 168, 94, 0.3);\\n        }\\n        #custom-interaction-input::placeholder { color: var(--theme-text-medium); opacity: 0.8; }\\n        .custom-send-button {\\n            flex-shrink: 0; background: var(--theme-button-color); color: white; border: none;\\n            border-radius: var(--border-radius-small); padding: 9px 18px; font-size: 1.08rem;\\n            font-family: var(--font-main); cursor: pointer; transition: all 0.2s ease;\\n            box-shadow: var(--shadow-subtle); display: inline-flex; align-items: center;\\n            justify-content: center; text-shadow: 1px 1px 1px rgba(0,0,0,0.2);\\n        }\\n        .custom-send-button:hover { background: var(--theme-button-hover-color); box-shadow: var(--shadow-medium); transform: translateY(-1px); }\\n        .custom-send-button:active { transform: translateY(0px); box-shadow: var(--shadow-subtle); }\\n        .custom-send-button i { margin-right: 7px; }\\n\\n        /* Game Actions Grid */\\n        .game-actions-section {\\n            margin-top: 25px; padding-top: 20px; border-top: 1px solid var(--theme-border-light);\\n            display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px;\\n        }\\n        .game-action-button {\\n            background-color: var(--theme-bg-light); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small); padding: 8px 12px; color: var(--theme-text-light);\\n            font-family: var(--font-main); font-size: 12px; cursor: pointer; transition: all 0.2s ease;\\n            text-align: center; box-shadow: var(--shadow-subtle); display: flex; align-items: center;\\n            justify-content: center; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\\n        }\\n        .game-action-button i { margin-right: 6px; color: var(--theme-accent-orange); font-size: 1em; flex-shrink: 0; transition: color 0.2s ease; }\\n        .game-action-button:hover {\\n            background-color: var(--theme-border-light); border-color: var(--theme-accent-orange-light);\\n            transform: translateY(-1px); box-shadow: var(--shadow-medium);\\n        }\\n        .game-action-button:active { transform: translateY(0px); box-shadow: var(--shadow-subtle); }\\n        #game-actions-section.hidden-by-settings { display: none; } /* Style to hide based on settings */\\n\\n        /* Settings Panel */\\n        .settings-toggle-button {\\n            position: absolute; top: 18px; right: 20px; background: none; border: none;\\n            color: var(--theme-text-medium); font-size: 20px; cursor: pointer; padding: 5px;\\n            line-height: 1; transition: color 0.2s ease, transform 0.2s ease; z-index: 110;\\n        }\\n        .settings-toggle-button:hover { color: var(--theme-accent-orange-light); transform: rotate(15deg); }\\n        .settings-toggle-button.active { color: var(--theme-accent-orange); transform: rotate(45deg); }\\n        .settings-panel {\\n            position: fixed; top: 0; left: 0; width: 100%; height: 100%;\\n            background-color: rgba(44, 49, 58, 0.85); backdrop-filter: blur(4px);\\n            z-index: 1050; opacity: 1; transition: opacity 0.3s ease; padding: 20px; box-sizing: border-box;\\n        }\\n        .settings-panel.hidden { opacity: 0; pointer-events: none; }\\n        .settings-panel-content { /* Inner container */\\n            background-color: var(--theme-bg-dark); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-base); box-shadow: var(--shadow-medium);\\n            padding: 25px 30px 30px 30px; width: 90%; max-width: 480px; position: absolute;\\n            transition: opacity 0.3s ease, top 0.3s ease, left 0.3s ease;\\n            max-height: 90vh; display: flex; flex-direction: column;\\n            /* Centered by JS */\\n        }\\n        .settings-header {\\n            display: flex; justify-content: space-between; align-items: center;\\n            margin-bottom: 25px; padding-bottom: 15px; border-bottom: 1px solid var(--theme-border-light);\\n        }\\n        .settings-header h3 {\\n            margin: 0; font-size: 20px; color: var(--theme-accent-orange-light);\\n            font-family: var(--font-title); font-weight: normal; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);\\n        }\\n        .settings-header h3 i { margin-right: 10px; }\\n        .settings-close-button {\\n            background: none; border: none; font-size: 26px; color: var(--theme-text-medium);\\n            cursor: pointer; padding: 0; line-height: 1; transition: color 0.2s ease, transform 0.2s ease;\\n        }\\n        .settings-close-button:hover { color: var(--theme-text-light); transform: scale(1.1); }\\n        .settings-content { flex-grow: 1; overflow-y: auto; margin-bottom: 25px; padding-right: 10px; }\\n        .settings-content::-webkit-scrollbar { width: 8px; }\\n        .settings-content::-webkit-scrollbar-track { background: var(--theme-bg-medium); border-radius: 4px; }\\n        .settings-content::-webkit-scrollbar-thumb { background-color: var(--theme-bg-light); border-radius: 4px; border: 1px solid var(--theme-bg-medium); }\\n        .setting-item { display: flex; align-items: center; margin-bottom: 20px; gap: 15px; }\\n        .setting-item label { flex-basis: 100px; flex-shrink: 0; text-align: right; color: var(--theme-text-medium); font-size: 14px; }\\n        .setting-item select, .setting-item input[type=\\\"range\\\"], .setting-item input[type=\\\"color\\\"], .setting-item input[type=\\\"checkbox\\\"] { flex-grow: 1; }\\n        .setting-item select, .setting-item input[type=\\\"range\\\"] {\\n            background-color: var(--theme-bg-medium); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small); color: var(--theme-text-light); padding: 8px 10px;\\n            font-family: var(--font-main); font-size: 13px; outline: none;\\n            transition: border-color 0.2s ease, box-shadow 0.2s ease;\\n        }\\n        .setting-item select:focus, .setting-item input[type=\\\"range\\\"]:focus {\\n             border-color: var(--theme-accent-orange); box-shadow: 0 0 0 2px rgba(232, 168, 94, 0.3);\\n        }\\n        .setting-item input[type=\\\"range\\\"] { padding: 0; cursor: pointer; height: 8px; -webkit-appearance: none; appearance: none; background: var(--theme-bg-light); }\\n        .setting-item input[type=\\\"range\\\"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 18px; height: 18px; background: var(--theme-accent-orange); border-radius: 50%; cursor: pointer; border: 2px solid var(--theme-bg-dark); box-shadow: var(--shadow-subtle); transition: background-color 0.2s ease; }\\n        .setting-item input[type=\\\"range\\\"]::-webkit-slider-thumb:hover { background: var(--theme-accent-orange-light); }\\n        .setting-item input[type=\\\"range\\\"]::-moz-range-thumb { width: 16px; height: 16px; background: var(--theme-accent-orange); border-radius: 50%; cursor: pointer; border: 2px solid var(--theme-bg-dark); box-shadow: var(--shadow-subtle); transition: background-color 0.2s ease; }\\n        .setting-item input[type=\\\"range\\\"]::-moz-range-thumb:hover { background: var(--theme-accent-orange-light); }\\n        .setting-item #font-size-value { flex-basis: 40px; flex-shrink: 0; text-align: right; font-size: 13px; color: var(--theme-text-light); }\\n        .setting-item input[type=\\\"color\\\"] { -webkit-appearance: none; appearance: none; width: 40px; height: 30px; border: 1px solid var(--theme-border-light); border-radius: var(--border-radius-small); padding: 0; cursor: pointer; background-color: transparent; box-shadow: var(--shadow-subtle); transition: border-color 0.2s ease, box-shadow 0.2s ease; }\\n        .setting-item input[type=\\\"color\\\"]::-webkit-color-swatch-wrapper { padding: 0; }\\n        .setting-item input[type=\\\"color\\\"]::-webkit-color-swatch { border: none; border-radius: calc(var(--border-radius-small) - 1px); }\\n        .setting-item input[type=\\\"color\\\"]:hover { border-color: var(--theme-accent-orange-light); box-shadow: var(--shadow-medium); }\\n        .setting-item input[type=\\\"checkbox\\\"] { width: 18px; height: 18px; cursor: pointer; accent-color: var(--theme-accent-orange); margin-left: 5px; flex-grow: 0; }\\n        .settings-actions { display: flex; justify-content: flex-end; gap: 15px; padding-top: 20px; border-top: 1px solid var(--theme-border-light); flex-shrink: 0; }\\n        .settings-action-button { padding: 10px 20px; border-radius: var(--border-radius-small); cursor: pointer; transition: all 0.2s ease; border: none; font-family: var(--font-main); font-size: 14px; font-weight: 500; display: inline-flex; align-items: center; justify-content: center; box-shadow: var(--shadow-subtle); text-shadow: 1px 1px 1px rgba(0,0,0,0.2); }\\n        .settings-action-button i { margin-right: 8px; }\\n        .settings-action-button.apply { background: var(--theme-button-color); color: white; }\\n        .settings-action-button.apply:hover { background: var(--theme-button-hover-color); box-shadow: var(--shadow-medium); transform: translateY(-1px); }\\n        .settings-action-button.reset { background: linear-gradient(to bottom, var(--theme-cancel-bg), #607d8b); color: var(--theme-text-light); }\\n        .settings-action-button.reset:hover { background: linear-gradient(to bottom, var(--theme-cancel-hover), #78909c); box-shadow: var(--shadow-medium); transform: translateY(-1px); }\\n        .setting-separator { height: 1px; background-color: var(--theme-border-light); margin: 25px 0; }\\n        .preset-section-title label { font-weight: bold; color: var(--theme-text-light); flex-basis: auto !important; text-align: left; margin-bottom: 5px; }\\n        .preset-section-title span { display: none; }\\n        .preset-schemes-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(80px, 1fr)); gap: 12px; margin-top: 10px; padding-bottom: 10px; }\\n        .preset-scheme-button { background-color: var(--theme-bg-medium); border: 1px solid var(--theme-border-light); border-radius: var(--border-radius-small); padding: 8px; cursor: pointer; transition: all 0.2s ease; display: flex; flex-direction: column; align-items: center; text-align: center; box-shadow: var(--shadow-subtle); }\\n        .preset-scheme-button:hover { border-color: var(--theme-accent-orange-light); transform: translateY(-2px); box-shadow: var(--shadow-medium); }\\n        .preset-swatch { width: 40px; height: 40px; border-radius: 50%; margin-bottom: 8px; display: flex; align-items: center; justify-content: center; position: relative; overflow: hidden; border: 3px solid; box-shadow: inset 0 0 3px rgba(0,0,0,0.2); }\\n        .preset-swatch-inner { width: 50%; height: 50%; border-radius: 50%; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); box-shadow: 0 0 2px rgba(0,0,0,0.3); }\\n        .preset-swatch-text { position: absolute; bottom: 2px; right: 4px; font-size: 10px; font-weight: bold; opacity: 0.8; text-shadow: 1px 1px 1px rgba(0,0,0,0.4); }\\n        .preset-name { font-size: 11px; color: var(--theme-text-medium); margin-top: auto; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 100%; }\\n        .preset-scheme-button:hover .preset-name { color: var(--theme-text-light); }\\n        body.no-shadows * { box-shadow: none !important; text-shadow: none !important; filter: none !important; }\\n\\n        /* Responsive Adjustments */\\n        @media (max-width: 700px) {\\n            .map-interface { padding: 15px; }\\n            .sub-location-grid { grid-template-columns: repeat(auto-fill, minmax(130px, 1fr)); }\\n            .character-list { grid-template-columns: repeat(auto-fill, minmax(110px, 1fr)); }\\n            .confirm-dialog { padding: 20px; max-width: 95%; }\\n            .character-modal-dialog { max-width: 90%; padding: 15px 20px 20px 20px; }\\n            .modal-description-content { max-height: 180px; }\\n            .character-modal-dialog .interaction-options-grid { grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); }\\n            .character-modal-dialog .interaction-button { font-size: 12px; padding: 6px 10px; }\\n            .game-actions-section { grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); }\\n        }\\n        @media (max-width: 480px) {\\n            .character-modal-dialog { padding: 10px 15px 15px 15px; }\\n            .close-modal-button { top: 5px; right: 8px; font-size: 20px; }\\n            .character-modal-dialog h4 { font-size: 16px; margin-bottom: 10px; }\\n            .modal-description-content { font-size: 12px; max-height: 150px; padding: 8px; }\\n            .character-modal-dialog .interaction-options-grid { grid-template-columns: 1fr; gap: 8px; }\\n            .character-modal-dialog .interaction-button { font-size: 11px; padding: 5px 8px; min-height: 35px; }\\n            .game-actions-section { grid-template-columns: repeat(auto-fit, minmax(90px, 1fr)); gap: 6px; }\\n            .game-action-button { font-size: 10px; padding: 5px 8px; }\\n            .game-action-button i { margin-right: 4px; }\\n        }\\n\\n        /* General Helpers */\\n        .hidden { display: none !important; } /* Use !important to override potential conflicts */\\n        .info-message { color: var(--theme-text-medium); text-align: center; padding: 10px 0; font-size: 14px; }\\n        .error-message { color: var(--theme-accent-orange); text-align: center; padding: 10px 0; font-size: 14px; font-weight: bold; }\\n\\n        /* Bullet Chat Styles */\\n        .bullet-chat-container {\\n            position: absolute; /* Needed for dragging */\\n            top: 115px; /* Lowered to align near map area top */\\n            right: 20px; /* Position to the right */\\n            /* left: 20px; REMOVED */\\n            width: 250px;\\n            max-height: 300px; /* Limit height */\\n            background-color: rgba(44, 49, 58, 0.75); /* Semi-transparent */\\n            border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small);\\n            box-shadow: var(--shadow-medium);\\n            z-index: 900; /* Below modals but above map content */\\n            display: flex;\\n            flex-direction: column;\\n            overflow: hidden; /* Important for content clipping */\\n            transition: opacity 0.3s ease, visibility 0.3s ease; /* For hiding via settings */\\n        }\\n        .bullet-chat-container.hidden-by-settings {\\n            opacity: 0;\\n            visibility: hidden;\\n            pointer-events: none;\\n        }\\n        .bullet-chat-header {\\n            padding: 6px 10px;\\n            background-color: rgba(62, 68, 81, 0.85); /* Slightly darker header */\\n            color: var(--theme-accent-orange-light);\\n            font-size: 13px;\\n            font-weight: bold;\\n            /* cursor: grab; REMOVED */\\n            display: flex;\\n            justify-content: space-between;\\n            align-items: center;\\n            border-bottom: 1px solid var(--theme-border-light);\\n        }\\n        .bullet-chat-header span i { margin-right: 5px; } /* Icon within the span */\\n        .close-bullet-button { /* Style for the new close button */\\n            background: none;\\n            border: none;\\n            color: var(--theme-text-medium);\\n            font-size: 20px; /* Make X larger */\\n            line-height: 1;\\n            padding: 0 5px;\\n            cursor: pointer;\\n            transition: color 0.2s ease, transform 0.2s ease;\\n        }\\n        .close-bullet-button:hover {\\n            color: var(--theme-text-light);\\n            transform: scale(1.1);\\n        }\\n        /* REMOVED dragging styles */\\n        .bullet-chat-content {\\n            flex-grow: 1;\\n            padding: 8px 5px 8px 10px; /* Add padding, less on right for scrollbar */\\n            overflow-y: auto; /* Enable vertical scroll if needed */\\n            overflow-x: hidden; /* Prevent horizontal scroll */\\n            position: relative; /* For positioning comments */\\n        }\\n        /* Custom Scrollbar for Bullet Chat */\\n        .bullet-chat-content::-webkit-scrollbar { width: 5px; }\\n        .bullet-chat-content::-webkit-scrollbar-track { background: transparent; }\\n        .bullet-chat-content::-webkit-scrollbar-thumb { background-color: var(--theme-bg-light); border-radius: 3px; }\\n        .bullet-comment {\\n            background-color: rgba(80, 86, 99, 0.7); /* Semi-transparent comment background */\\n            color: var(--theme-text-light);\\n            padding: 4px 8px;\\n            border-radius: var(--border-radius-small);\\n            margin-bottom: 5px;\\n            font-size: 12px;\\n            white-space: nowrap; /* Keep comments on one line */\\n            opacity: 0; /* Start hidden for animation */\\n            transform: translateX(100%); /* Start off-screen right */\\n            transition: opacity 0.5s ease-out, transform 0.5s ease-out;\\n            box-shadow: 1px 1px 2px rgba(0,0,0,0.2);\\n        }\\n        .bullet-comment.clickable-bullet {\\n            cursor: pointer;\\n            background-color: rgba(94, 136, 232, 0.2); /* Slightly different background for clickable */\\n            border-left: 3px solid var(--theme-accent-orange); /* Highlight bar */\\n            padding-left: 5px;\\n        }\\n        .bullet-comment.clickable-bullet:hover {\\n            background-color: rgba(94, 136, 232, 0.3);\\n            box-shadow: 2px 2px 4px rgba(0,0,0,0.3);\\n            transform: translateX(-2px); /* Slight move on hover */\\n        }\\n\\n        /* Bullet Reply Area Styles */\\n        .bullet-reply-area {\\n            display: flex;\\n            padding: 8px 10px;\\n            background-color: rgba(62, 68, 81, 0.9); /* Similar to header */\\n            border-top: 1px solid var(--theme-border-light);\\n            gap: 8px;\\n            flex-shrink: 0; /* Prevent shrinking */\\n        }\\n        #bullet-reply-input {\\n            flex-grow: 1;\\n            padding: 6px 10px;\\n            border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small);\\n            background-color: var(--theme-bg-medium);\\n            color: var(--theme-text-light);\\n            font-size: 12px;\\n            font-family: var(--font-main);\\n            outline: none;\\n            box-shadow: inset 0 1px 2px rgba(0,0,0,0.15);\\n            transition: border-color 0.2s ease, box-shadow 0.2s ease;\\n        }\\n        #bullet-reply-input:focus {\\n            border-color: var(--theme-accent-orange);\\n            box-shadow: inset 0 1px 2px rgba(0,0,0,0.15), 0 0 0 2px rgba(232, 168, 94, 0.3);\\n        }\\n        #bullet-reply-input::placeholder {\\n            color: var(--theme-text-medium);\\n            opacity: 0.7;\\n        }\\n        #send-bullet-reply-btn {\\n            flex-shrink: 0;\\n            background: var(--theme-button-color);\\n            color: white;\\n            border: none;\\n            border-radius: var(--border-radius-small);\\n            padding: 6px 12px;\\n            font-size: 12px;\\n            cursor: pointer;\\n            transition: all 0.2s ease;\\n            box-shadow: var(--shadow-subtle);\\n            display: inline-flex;\\n            align-items: center;\\n            justify-content: center;\\n        }\\n        #send-bullet-reply-btn:hover {\\n            background: var(--theme-button-hover-color);\\n            box-shadow: var(--shadow-medium);\\n            transform: translateY(-1px);\\n        }\\n        #send-bullet-reply-btn:active {\\n            transform: translateY(0px);\\n            box-shadow: var(--shadow-subtle);\\n        }\\n        #send-bullet-reply-btn i {\\n            font-size: 1.1em; /* Make icon slightly larger */\\n        }\\n\\n\\n        /* Responsive Bullet Chat */\\n        @media (max-width: 700px) {\\n            .bullet-chat-container {\\n                width: 200px;\\n                max-height: 250px;\\n                top: 60px;\\n                left: 15px;\\n            }\\n            .bullet-comment { font-size: 11px; padding: 3px 6px; }\\n        }\\n         @media (max-width: 480px) {\\n            .bullet-chat-container {\\n                width: 160px;\\n                max-height: 200px;\\n                top: 55px;\\n              left: 10px;\\n            }\\n             .bullet-chat-header { font-size: 12px; padding: 4px 8px; }\\n             .bullet-comment { font-size: 10px; padding: 2px 5px; }\\n        }\\n\\n        /* --- Shop & Inventory Styles --- */\\n        .shop-modal-dialog, .inventory-modal-dialog {\\n            background-color: var(--theme-bg-dark); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-base); box-shadow: var(--shadow-medium);\\n            transition: opacity 0.3s ease, top 0.3s ease, left 0.3s ease;\\n            opacity: 0; position: absolute; /* Centered by JS */\\n            padding: 25px 30px 30px 30px; width: 90%; max-width: 500px; /* Slightly wider */\\n            max-height: 85vh; display: flex; flex-direction: column;\\n        }\\n        .modal-overlay:not(.hidden) .shop-modal-dialog,\\n        .modal-overlay:not(.hidden) .inventory-modal-dialog { opacity: 1; }\\n\\n        .shop-modal-dialog h4, .inventory-modal-dialog h4 {\\n            color: var(--theme-accent-orange-light); margin-top: 0; margin-bottom: 20px;\\n            font-family: var(--font-title); font-weight: normal; text-align: center; font-size: 20px;\\n            padding-right: 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);\\n        }\\n        .shop-modal-dialog h4 i, .inventory-modal-dialog h4 i { margin-right: 10px; }\\n\\n        .money-display {\\n            text-align: right; margin-bottom: 15px; font-size: 15px;\\n            color: var(--theme-accent-orange); font-weight: bold;\\n        }\\n        .money-display i { margin-right: 5px; }\\n\\n        .shop-items-container, .inventory-items-container {\\n            flex-grow: 1; overflow-y: auto; margin-bottom: 15px;\\n            padding: 10px; background-color: var(--theme-bg-medium);\\n            border-radius: var(--border-radius-small); border: 1px solid var(--theme-border-light);\\n            box-shadow: inset 0 1px 3px rgba(0,0,0,0.15);\\n            display: grid; grid-template-columns: 1fr; gap: 12px;\\n        }\\n        .shop-items-container::-webkit-scrollbar,\\n        .inventory-items-container::-webkit-scrollbar { width: 8px; }\\n        .shop-items-container::-webkit-scrollbar-track,\\n        .inventory-items-container::-webkit-scrollbar-track { background: var(--theme-bg-medium); border-radius: 4px; }\\n        .shop-items-container::-webkit-scrollbar-thumb,\\n        .inventory-items-container::-webkit-scrollbar-thumb { background-color: var(--theme-bg-light); border-radius: 4px; border: 1px solid var(--theme-bg-medium); }\\n\\n        .shop-item, .inventory-item {\\n            background-color: var(--theme-bg-light); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small); padding: 12px 15px;\\n            display: flex; justify-content: space-between; align-items: center; gap: 15px;\\n            transition: background-color 0.2s ease, border-color 0.2s ease;\\n        }\\n        .shop-item:hover, .inventory-item:hover {\\n            background-color: var(--theme-border-light);\\n            border-color: var(--theme-accent-orange-light);\\n        }\\n        .item-info { flex-grow: 1; }\\n        .item-name { font-weight: bold; font-size: 15px; color: var(--theme-text-light); margin-bottom: 4px; }\\n        .item-description { font-size: 12px; color: var(--theme-text-medium); line-height: 1.4; }\\n        .item-price { font-size: 14px; color: var(--theme-accent-orange); font-weight: bold; white-space: nowrap; }\\n        .item-price i { margin-right: 3px; }\\n        .item-actions { flex-shrink: 0; }\\n        .buy-button, .use-button {\\n            background: var(--theme-button-color); color: white; border: none;\\n            border-radius: var(--border-radius-small); padding: 6px 12px; font-size: 13px;\\n            font-weight: 500; cursor: pointer; transition: all 0.2s ease;\\n            box-shadow: var(--shadow-subtle); display: inline-flex; align-items: center;\\n            justify-content: center; text-shadow: 1px 1px 1px rgba(0,0,0,0.2);\\n        }\\n        .buy-button:hover, .use-button:hover {\\n            background: var(--theme-button-hover-color); box-shadow: var(--shadow-medium);\\n            transform: translateY(-1px);\\n        }\\n        .buy-button i, .use-button i { margin-right: 5px; }\\n        .buy-button:disabled, .use-button:disabled {\\n             opacity: 0.6; cursor: not-allowed; background: var(--theme-cancel-bg);\\n             box-shadow: none; text-shadow: none;\\n        }\\n        /* --- End Shop & Inventory Styles --- */\\n\\n        /* --- Save/Load Modal Styles --- */\\n        .save-load-modal-dialog {\\n            background-color: var(--theme-bg-dark); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-base); box-shadow: var(--shadow-medium);\\n            transition: opacity 0.3s ease, top 0.3s ease, left 0.3s ease;\\n            opacity: 0; position: absolute; /* Centered by JS */\\n            padding: 25px 30px 30px 30px; width: 90%; max-width: 550px; /* Wider */\\n            max-height: 85vh; display: flex; flex-direction: column;\\n        }\\n        .modal-overlay:not(.hidden) .save-load-modal-dialog { opacity: 1; }\\n\\n        .save-load-modal-dialog h4 {\\n            color: var(--theme-accent-orange-light); margin-top: 0; margin-bottom: 25px;\\n            font-family: var(--font-title); font-weight: normal; text-align: center; font-size: 20px;\\n            padding-right: 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);\\n        }\\n        .save-load-modal-dialog h4 i { margin-right: 10px; }\\n\\n        .save-load-content {\\n            display: flex; gap: 25px; flex-grow: 1; overflow: hidden; margin-bottom: 25px;\\n        }\\n        .saved-section {\\n            flex: 1; display: flex; flex-direction: column; overflow: hidden;\\n            background-color: var(--theme-bg-medium); padding: 15px;\\n            border-radius: var(--border-radius-small); border: 1px solid var(--theme-border-light);\\n        }\\n        .saved-section h5 {\\n            margin: 0 0 15px 0; padding-bottom: 8px; font-size: 16px;\\n            color: var(--theme-text-light); border-bottom: 1px dashed var(--theme-border-light);\\n            font-weight: bold; text-align: center;\\n        }\\n         .saved-section h5 i { margin-right: 8px; color: var(--theme-accent-orange); }\\n\\n        .saved-list {\\n            flex-grow: 1; overflow-y: auto; padding-right: 8px; /* Space for scrollbar */\\n        }\\n        .saved-list::-webkit-scrollbar { width: 6px; }\\n        .saved-list::-webkit-scrollbar-track { background: transparent; }\\n        .saved-list::-webkit-scrollbar-thumb { background-color: var(--theme-bg-light); border-radius: 3px; }\\n\\n        .saved-item-button {\\n            display: block; width: 100%; text-align: left;\\n            background-color: var(--theme-bg-light); border: 1px solid var(--theme-border-light);\\n            border-radius: var(--border-radius-small); padding: 8px 12px; margin-bottom: 8px;\\n            color: var(--theme-text-light); font-family: var(--font-main); font-size: 14px;\\n            cursor: pointer; transition: all 0.2s ease; box-shadow: var(--shadow-subtle);\\n            white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\\n        }\\n        .saved-item-button:hover {\\n            background-color: var(--theme-border-light); border-color: var(--theme-accent-orange-light);\\n            transform: translateX(2px); box-shadow: var(--shadow-medium);\\n        }\\n        .saved-item-button i { margin-right: 6px; color: var(--theme-accent-orange); font-size: 0.9em; }\\n        .saved-list .info-message { /* Style for empty list message */\\n             font-size: 13px;\\n        }\\n        #save-load-modal-actions { /* Style for the bottom action area */\\n            justify-content: flex-end; /* Align button to the right */\\n            padding-top: 15px;\\n            border-top: 1px solid var(--theme-border-light);\\n        }\\n        #clear-all-saves-btn:hover {\\n            background: #e53935 !important; /* Darker red on hover */\\n            box-shadow: var(--shadow-medium); transform: translateY(-1px);\\n        }\\n        /* --- End Save/Load Modal Styles --- */\\n\\n        /* --- Styles for Individual Delete Buttons --- */\\n        .saved-item-container {\\n            display: flex;\\n            align-items: center;\\n            gap: 8px; /* Space between main button and delete button */\\n            margin-bottom: 8px; /* Keep original spacing */\\n        }\\n        .saved-item-container .saved-item-button {\\n            flex-grow: 1; /* Main button takes available space */\\n            margin-bottom: 0; /* Remove margin from main button itself */\\n        }\\n        .delete-item-button {\\n            flex-shrink: 0; /* Prevent delete button from shrinking */\\n            background-color: #c62828; /* Red background */\\n            color: white;\\n            border: none;\\n            border-radius: var(--border-radius-small);\\n            padding: 6px 9px; /* Smaller padding */\\n            font-size: 13px; /* Slightly smaller font */\\n            line-height: 1;\\n            cursor: pointer;\\n            transition: all 0.2s ease;\\n            box-shadow: var(--shadow-subtle);\\n        }\\n        .delete-item-button:hover {\\n            background-color: #e53935; /* Darker red on hover */\\n            box-shadow: var(--shadow-medium);\\n            transform: scale(1.05);\\n        }\\n        .delete-item-button i {\\n            display: block; /* Ensure icon is centered */\\n        }\\n        /* --- End Styles for Individual Delete Buttons --- */\\n\\n     </style>\\n</body>\\n</html>\\n\\n\\n```\",\"trimStrings\":[],\"placement\":[1,2],\"disabled\":false,\"markdownOnly\":true,\"promptOnly\":false,\"runOnEdit\":true,\"substituteRegex\":0,\"minDepth\":null,\"maxDepth\":null},{\"id\":\"16f8e207-5acf-41fc-8b17-63ca10688695\",\"scriptName\":\"不输出map_data\",\"findRegex\":\"<map_data>([\\\\s\\\\S]+?)<\\\\/map_data>\",\"replaceString\":\" \",\"trimStrings\":[],\"placement\":[1,2],\"disabled\":false,\"markdownOnly\":true,\"promptOnly\":false,\"runOnEdit\":false,\"substituteRegex\":0,\"minDepth\":3,\"maxDepth\":null}]},\"character_book\":{\"entries\":[{\"id\":0,\"keys\":[],\"secondary_keys\":[],\"comment\":\"环境与设施类条目\",\"content\":\"- 蓝灯汇总的环境与设施类条目内的content应该使用简洁的 PList 格式来描述，格式为：\\n[地区名(别名/简称): 特征1, 特征2, has(设施1, 设施2), 描述性特征...]\\n例如：\\n[急诊科: 24小时运营, 快节奏, has(抢救室, 创伤处理区, 分诊台), 专业应急团队, 配备先进急救设备]\\n[内科: 综合诊疗, 慢性病管理, has(诊室, 病房, 心电图室), 细致全面, 以患者为中心]\\n[外科: 手术治疗, 精密操作, has(手术室, 麻醉室, 恢复室), 高技术要求, 严格消毒]\\n[Ironhold(The Fortress City): fortified, stone walls, iron used for(weapons, armor), has(castle, blacksmith, market square, cathedral), vigilant guards, strategic location]\\n[Oakenshire(The Woodland Haven): wooden structures, forest surrounded, timber used for(construction, trade), has(lumber mill, hunters' lodge, town hall, apothecary), skilled craftsmen, nature-loving]\\n[Riverport(The Merchant's Dream): bustling docks, river trade, fish used for(food, export), has(harbor, fishmonger, guildhall, warehouses), diverse population, prosperous]\\n\\n- 此要求不适用于绿灯的地点的详细独立条目内容，绿灯独立条目应该是详细的内容，（强制规定）每次创建条目如果需要细化，不要在之前的条目里面修改，创建新条目进行补充设定\",\"constant\":true,\"selective\":true,\"insertion_order\":100,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":0,\"probability\":100,\"useProbability\":true,\"depth\":2,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":1,\"keys\":[],\"secondary_keys\":[],\"comment\":\"COT（关闭预设里的COT\",\"content\":\"<Reasoning>\\n# Thinking Requirements\\nAI must display detailed thought processes at the beginning of the answer, wrapped in <think> tags.\\n\\n## Thought Format\\n<think>\\n## Requirement Analysis\\n- User Input: [Original user input]\\n- Core Requirements: [Extracted main requirement points]\\n- Implicit Requirements: [Important but potentially unexpressed needs]\\n\\n## World-building Assessment\\n- Scale Type: [Micro-scenario / Medium-sized area / Complete world]\\n  * Micro-scenario: Single location or small enclosed environment (hospital, haunted house, school, etc.)\\n  * Medium-sized area: City, corporation, gang, or other larger organization or region\\n  * Complete world: Country, planet, universe, or other comprehensive worldview\\n\\n## Necessary Component Identification\\n- Essential Components: [List core components]\\n- Optional Components: [List components that enhance the experience]\\n- Omittable Components: [List non-essential components]\\n\\n## Theme and Tone\\n- Key Themes: [Theme 1], [Theme 2], [Theme 3]\\n- World Tone: [Emotional tone description]\\n- Core Conflict: [Main conflict description]\\n- Unique Selling Point: [Setting's distinctive features]\\n\\n## Structure Planning\\n- Recommended Total Entries: [Number]\\n- Entry Distribution:\\n  * Core Rules: [Number]\\n  * Environment Description: [Number]\\n  * Character Settings: [Number]\\n  * Other Entries: [Number]\\n- Relationship Between Entries: [Describe how entries interconnect]\\n\\n## Detail Refinement\\n- Sensory Details: [Visual | Auditory | Olfactory | Tactile | Gustatory]\\n- Interaction Mechanisms: [Describe how players/characters interact with the world]\\n- Limitations and Rules: [Describe rules and limitations governing the world]\\n- Unsolved Mysteries: [Leave room for exploration]\\n\\n## Consistency Check\\n- Internal Logical Consistency: [Yes/No] - [Reason]\\n- Meets User Requirements: [Yes/No] - [Reason]\\n- Exploration Possibilities: [Yes/No] - [Reason]\\n- Character Interaction Rules: [Yes/No] - [Reason]\\n- Setting Operability: [Yes/No] - [Reason]\\n\\n## Output Format Confirmation\\n- Format Type: YAML format worldbook\\n- Entry Structure: uid + trigger + content structure\\n- Presentation: Wrapped in code block, clear and copyable\\n</think>\\n</Reasoning>\",\"constant\":true,\"selective\":true,\"insertion_order\":100,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":1,\"probability\":100,\"useProbability\":true,\"depth\":1,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":2,\"keys\":[],\"secondary_keys\":[],\"comment\":\"world_building_workflow\",\"content\":\"world_building_workflow:\\n  scope_identification:\\n    action: 确定世界观范围\\n    scale_types:\\n      - micro_setting: 单一场所或小型封闭环境(医院、鬼屋、学校、小镇等)\\n      - mid_setting: 中型区域或组织(城市、企业、帮派等)\\n      - macro_setting: 完整世界观(国家、星球、宇宙等)\\n    \\n    applicable_sections:\\n      micro_setting:\\n        required: [\\\"core_rules\\\", \\\"environment\\\", \\\"mechanics\\\"]\\n        optional: [\\\"items\\\", \\\"factions\\\", \\\"events\\\"]\\n        omitted: [\\\"locations\\\"]\\n      mid_setting:\\n        required: [\\\"core_rules\\\", \\\"environment\\\", \\\"locations\\\", \\\"factions\\\"]\\n        optional: [\\\"items\\\", \\\"events\\\", \\\"mechanics\\\"]\\n        omitted: []\\n      macro_setting:\\n        required: [\\\"core_rules\\\", \\\"environment\\\", \\\"locations\\\", \\\"factions\\\", \\\"events\\\"]\\n        optional: [\\\"items\\\", \\\"mechanics\\\"]\\n        omitted: []\\n\\n  template_generation:\\n    action: 生成完整世界书模板\\n    format: 代码块包裹的YAML结构\\n    components:\\n      metadata:\\n        - world_name: 世界的名称\\n        - theme_tags: 使用管道符(|)分隔的主题标签列表\\n        - tone: 世界观的整体基调与氛围\\n      \\n      sections:\\n        core_rules:\\n          description: 这个世界运作的基本法则与底层设定\\n          structure_requirements:\\n            - 每条规则使用简洁清晰的语言描述\\n            - 优先列出对角色行为有直接影响的规则\\n            - 明确标注不可违背的\\\"物理法则\\\"与可变的\\\"社会规则\\\"\\n          \\n        environment:\\n          description: 世界的自然环境、气候、地理特征等\\n          structure_requirements:\\n            - 使用管道符(|)分隔不同环境特征\\n            - 包含环境对居民生活的直接影响\\n            - 描述环境的特殊现象及其出现条件\\n        \\n        locations:\\n          description: 世界中的重要地点、城市、区域等\\n          structure_requirements:\\n            - 每个地点包含名称、简述、特点和重要性\\n            - 描述地点间的地理关系与交通方式\\n            - 标注地点的文化特色与经济活动\\n        \\n        factions:\\n          description: 世界中的组织、势力、国家等\\n          structure_requirements:\\n            - 包含势力的名称、理念、结构和影响力\\n            - 描述势力间的关系与冲突来源\\n            - 明确势力的标志性特征与行为模式\\n        \\n        items:\\n          description: 世界中的特殊物品、技术、资源等\\n          structure_requirements:\\n            - 详述物品的起源、功能与限制\\n            - 分析物品对社会结构的影响\\n            - 说明物品的获取难度与分布情况\\n        \\n        events:\\n          description: 世界历史中的关键事件与时间线\\n          structure_requirements:\\n            - 以时间线形式组织历史事件\\n            - 使用破折号(-)作为列表标记\\n            - 分析事件如何塑造了当前世界状态\\n        \\n        mechanics:\\n          description: 世界特有的机制、魔法系统、技术体系等\\n          structure_requirements:\\n            - 详细说明机制的工作原理与限制\\n            - 阐述普通人如何接触与使用这些机制\\n            - 分析机制对社会阶层与权力分配的影响\\n\\n  # 微型场景专用组件定义\\n  micro_setting_components:\\n    environment:\\n      description: 场所的物理环境与氛围\\n      structure_requirements:\\n        - 描述场所的整体布局与空间结构\\n        - 说明场所的感官元素(光线、声音、气味等)\\n        - 解释环境如何影响人物行为与心理\\n    \\n    mechanics:\\n      description: 场所特有的规则与运作方式\\n      structure_requirements:\\n        - 详述场所内可能发生的特殊现象\\n        - 说明进入、离开或在场所内活动的规则\\n        - 描述环境与人物互动的独特机制\\n    \\n    factions:\\n      description: 场所内的人物群体与权力结构\\n      structure_requirements:\\n        - 描述场所内的主要人物类型与关系\\n        - 说明不同群体间的互动模式与冲突\\n        - 解释权力分配与决策机制\\n    \\n    items:\\n      description: 场所内的特殊物品与装置\\n      structure_requirements:\\n        - 列出场所中的标志性物品与用途\\n        - 说明这些物品如何影响场所的氛围与功能\\n        - 描述物品获取或使用的条件\\n\\n  entry_creation:\\n    format_template: |\\n      uid: [唯一编号，纯数字，不应有前缀，从001开始]\\n      trigger:\\n        type: [\\\"Constant\\\"(蓝灯-常驻激活) | \\\"Normal\\\"(绿灯-关键词激活)]\\n        position: [\\\"Before Character Definition\\\"(角色定义前) | \\\"After Character Definition\\\"(角色定义后) | \\\"At Depth\\\"(指定深度)]\\n        depth: [仅当position为\\\"At Depth\\\"时需要]\\n        Title: [条目标题]\\n        Comma_separated_list: [相关激活关键词，以逗号分隔]\\n      content: |\\n        [简洁清晰的关键内容，使用YAML结构]\\n    \\n    content_guidelines:\\n      - 使用具体例子说明抽象概念\\n      - 优先考虑对角色互动有直接影响的内容\\n      - 避免过度详细的技术说明，除非关键情节需要\\n      - 保持条目间的逻辑一致性与连贯性\\n      - 每个条目聚焦于单一概念或规则，避免信息过载\\n\\n  micro_setting_entry_creation:\\n    format_template: 与原模板相同\\n    content_guidelines:\\n      - 专注于场所的氛围与\\\"感觉\\\"\\n      - 描述具体的空间布局与视觉细节\\n      - 强调场所内的人物互动规则\\n      - 设计能增强场景主题的特殊机制\\n      - 关注对角色心理与行为的影响\\n\\n  conflict_resolution:\\n    trigger: 用户提出与现有设定冲突的新元素时\\n    analysis:\\n      - 检测新元素是否与世界核心法则相冲突\\n      - 评估新元素是否破坏世界观的内部一致性\\n      - 分析新元素是否改变世界的核心主题与基调\\n    response_strategy:\\n      conflict_detected:\\n        - 明确指出新元素与哪些现有核心设定冲突\\n        - 分析可能导致的问题:\\n          * 破坏世界的内部逻辑\\n          * 改变世界的核心吸引力\\n          * 与已建立的历史事件产生逻辑矛盾\\n        - 提供调和方案，修改新元素使其符合世界逻辑\\n      no_conflict:\\n        - 将新元素自然融入现有世界结构\\n        - 解释新元素如何丰富或拓展现有世界观\\n\\n  world_refinement:\\n    trigger: 用户提供简单世界概念或仅部分设定时\\n    expansion_approach:\\n      - 自动扩展核心概念，保持原始理念完整\\n      - 为每个关键部分创建3-5个重要条目\\n      - 确保各部分之间存在有机联系\\n      - 保持世界的独特性与内部一致性\\n    inquiry_guidelines:\\n      max_questions: 3-5个关键问题\\n      question_criteria:\\n        - 针对世界基础设定的模糊点\\n        - 关于世界中主要冲突来源的具体化\\n        - 探询世界特殊机制的运作边界\\n      question_structure:\\n        - 问题焦点(如\\\"魔法系统的能量来源\\\")\\n        - 问题原因(如\\\"当前描述过于模糊，缺乏限制\\\")\\n        - 预期效果(如\\\"确立明确的魔法限制以增强故事张力\\\")\\n\\n  adaptive_refinement:\\n    micro_setting_approach:\\n      - 专注于创造沉浸式氛围而非完整世界逻辑\\n      - 强调感官细节与情绪体验\\n      - 设计3-5个能体现场景特点的关键互动机制\\n      - 创造适合该场景的独特术语与规则\\n      \\n    inquiry_guidelines_micro:\\n      focus_questions:\\n        - 关于场所的历史与背景故事\\n        - 环境如何影响人物心理状态\\n        - 场所内可能发生的特殊事件类型\\n        - 不同时间段场所的变化规律\\n\\n  implementation_guide:\\n    format: 确保最终世界书使用一致的YAML格式，每个部分逻辑清晰\\n    optimization_tips:\\n      - 使用简洁的语言描述复杂概念\\n      - 每个条目专注于单一要素，避免过度复杂\\n      - 确保条目之间存在明确的关联性\\n      - 优先考虑对角色互动有直接影响的设定\\n      - 为特殊规则提供具体示例\\n      - 保持世界的可探索性，留下适当的未解之谜\\n\\n世界书示例片段:\\nuid: 001\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: World Metadata - Terra Fantasia\\n  Comma_separated_list: world info,metadata,theme,tone,terra fantasia\\ncontent: |\\n  world_name: Terra Fantasia\\n  theme_tags: Fantasy | Medieval | Adventure | Magic | JRPG Style\\n  tone: Heroic | Adventurous | Classic Fantasy | Mysterious Undertones\\n\\nuid: 002\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: Core Rules of Terra Fantasia\\n  Comma_separated_list: core rules,world laws,physics,social rules,magic principles,terra fantasia rules\\ncontent: |\\n  # Foundational Laws Governing Terra Fantasia\\n  physical_laws: Standard medieval physics; gravity applies, time flows linearly. Magical alterations possible but rare and taxing.\\n  magic_basics: Relies on channeling ambient 'Mana' or internal reserves. Different schools exist (Elemental, Healing, Illusion, etc.). Requires focus and often incantations/gestures. Mana exhaustion is a risk.\\n  social_norms: Feudal structures common (Kingdoms), some regions have different governance (Republics, Guilds). Adventurers are recognized but operate under Guild charters or local laws. Divine influence exists via temples and clerics.\\n  combat_principles: Mix of melee (swords, spears), ranged (bows), and magic. Armor provides protection. Monsters possess varied abilities.\\n\\nuid: 003\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: Environment Description - Continents & Regions\\n  Comma_separated_list: environment,geography,climate,regions,continents,terra fantasia landscape\\ncontent: |\\n  # General Landscape Overview\\n  [Central_Continent(Aethelgard): Temperate climate, varied terrain, has(rolling plains, large forests, mountain ranges, major rivers), location of(Kingdom_of_Valoria, Republic_of_Aeridor), most populated continent]\\n  [Northern_Reach(Frostwind Expanse): Cold climate, harsh winters, has(snowy peaks, frozen tundra, deep fjords), sparsely populated, hardy folk, dangerous beasts]\\n  [Eastern_Isles(Archipelago of Whispers): Tropical/Subtropical climate, volcanic activity, has(dense jungles, hidden coves, ancient ruins), exotic wildlife, maritime focus]\\n  [Western_Wastes(The Sunken Sands): Arid desert, extreme temperatures, has(vast dunes, rocky mesas, forgotten oases, ruins of a past age), nomadic tribes, scarce resources]\\n\\nuid: 004\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: Key Locations Overview\\n  Comma_separated_list: locations,places,cities,landmarks,regions,terra fantasia places,Valoria_City,Port_Aethel\\ncontent: |\\n  # Prominent Locations within Terra Fantasia (Central Continent focus)\\n  [Valoria_City(The Royal Capital): Heart of Kingdom_of_Valoria, central plains location, has(Royal Palace, Grand Cathedral, Adventurer's Guild HQ, Market District, Mage Tower), major political and cultural hub]\\n  [Port_Aethel(Gateway to the East): Large coastal city, eastern coast of Central Continent, has(bustling harbor, Merchant Guilds, Shipyards, Black Market area), primary trade hub for Eastern_Isles, diverse population]\\n  [Dragon's Spine_Mountains: Tall mountain range separating Central_Continent from Northern_Reach, has(dwarven holds, monster lairs, ancient passes), source of valuable ores]\\n  [Whispering_Woods: Ancient forest south of Valoria_City, has(magical flora/fauna, elven settlements (hidden), forgotten shrines), known for illusions and secrets]\\n\\nuid: 005\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: Factions & Nations Overview\\n  Comma_separated_list: factions,organizations,powers,groups,nations,kingdoms,terra fantasia factions,Kingdom_of_Valoria,Republic_of_Aeridor\\ncontent: |\\n  # Major Powers and Organizations\\n  [Kingdom_of_Valoria: Dominant human kingdom on Central_Continent, feudal monarchy, focuses on order, tradition, military strength, based in Valoria_City]\\n  [Republic_of_Aeridor: Coastal nation west of Valoria, governed by a council, emphasizes trade, diplomacy, naval power, capital is Port_Aethel (major economic center)]\\n  [Adventurer's_Guild: Continent-wide organization, regulates adventurers, provides quests, information, training facilities, neutral stance politically, main HQ in Valoria_City]\\n  [Shadow_Syndicate: Underworld organization involved in smuggling, espionage, assassination, operates discreetly in major cities like Port_Aethel]\\n  [Dwarven_Clans: Reside in Dragon's Spine_Mountains, focus on mining, crafting, tradition, generally isolationist but trade metals/crafts]\\n\\nuid: 006\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: Notable Item Types\\n  Comma_separated_list: items,artifacts,resources,equipment types,potions,scrolls,terra fantasia items\\ncontent: |\\n  # Common & Significant Item Categories\\n  - **Healing Potions**: Standard restorative concoctions, varying strengths. Commonly available.\\n  - **Mana Potions**: Restore magical energy (Mana). Essential for mages.\\n  - **Magic Scrolls**: Contain single-use spells. Require basic magic aptitude to use. Found or crafted.\\n  - **Valorian Steel**: High-quality steel alloy developed in the Kingdom of Valoria. Used for good weapons/armor.\\n  - **Aetherium Crystals**: Raw magic crystals, used as power sources, enchanting components, or foci. Found near magic-rich areas.\\n\\nuid: 007\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: Key Historical Events - Abridged Timeline\\n  Comma_separated_list: history,timeline,past events,historical context,lore,terra fantasia history\\ncontent: |\\n  # Brief History of Terra Fantasia\\n  - **Age of Creation (Mythic Era)**: Gods and primordial beings shaped the world. Time of powerful magic and legendary creatures.\\n  - **The Great Cataclysm (~1500 years ago)**: A world-altering event (cause debated: divine war, magical accident) that reshaped continents, buried old civilizations (creating Western_Wastes), and scattered magic.\\n  - **Era of Migration & Settlement (~1000 years ago)**: Human and demi-human races establish current settlements. Early kingdoms rise and fall.\\n  - **Founding of Valoria (~500 years ago)**: Unification of central human tribes under King Valerius I, establishing the Kingdom of Valoria.\\n  - **Rise of Aeridor (~300 years ago)**: Coastal cities form the Republic of Aeridor, focusing on trade and independence from Valoria.\\n  - **Present Day**: Relative peace, but tensions between Valoria and Aeridor simmer. Adventurer's Guild activity increases as unexplored ruins and monster threats persist. Rumors of the Shadow Syndicate's growing influence.\\n\\nuid: 008\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: Core Mechanics Overview\\n  Comma_separated_list: mechanics,systems,magic rules,guild system,terra fantasia mechanics\\ncontent: |\\n  # Unique World Systems and Mechanics\\n  - **Mana System**: Spellcasting consumes Mana. Regeneration depends on individual aptitude and rest. Overexertion leads to Mana Burn (temporary inability to use magic, possible physical fatigue/damage).\\n  - **Adventurer's Guild System**: Provides structured quests ranked by difficulty (F to S). Members gain rank, reputation, and access to resources. Operates under charters, balancing freedom with responsibility.\\n  - **Elemental Affinities**: Individuals and creatures may possess natural affinities towards certain elements (Fire, Water, Earth, Wind, Light, Dark), influencing magic effectiveness and resistance.\\n  - **Blessings & Curses**: Divine or potent magical effects granting persistent boons or banes. Can be acquired through significant deeds, rituals, or powerful artifacts.\\n\\nuid: 009\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: Valoria City Details\\n  Comma_separated_list: Valoria City,Valoria,Royal Capital,Kingdom of Valoria capital\\ncontent: |\\n  # Location Profile: Valoria City\\n  name: Valoria City\\n  aliases: The Royal Capital, Heart of the Kingdom\\n  nation: Kingdom of Valoria\\n  location: Central plains of Aethelgard continent\\n  description: A large, sprawling city fortified by high stone walls. Characterized by its gleaming white Royal Palace atop a central hill, the towering Grand Cathedral, and the multi-spired Mage Tower. Bustling market districts contrast with orderly noble estates and disciplined military barracks. The Adventurer's Guild Headquarters is a major hub of activity.\\n  atmosphere: Orderly, majestic, politically charged, sense of tradition and military presence. Hub of culture and power.\\n  key_features: Royal Palace, Grand Cathedral, Mage Tower, Adventurer's Guild HQ, Market Square, Noble District, City Barracks, Strong Walls & Gates.\\n\\nuid: 010\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: Port Aethel Details\\n  Comma_separated_list: Port Aethel,port city,trade city,Republic of Aeridor city\\ncontent: |\\n  # Location Profile: Port Aethel\\n  name: Port Aethel\\n  aliases: Gateway to the East, The Merchant's Jewel\\n  nation: Republic of Aeridor (major economic center)\\n  location: Eastern coast of Aethelgard continent\\n  description: A vibrant, chaotic port city built around a massive natural harbor. Dominated by sprawling docks, numerous warehouses, influential Merchant Guildhalls, and bustling shipyards. Architecture is varied, reflecting diverse influences from trade partners. Has a notorious 'Underside' district known for smuggling and Shadow Syndicate activity. The air smells of salt, exotic goods, and fish.\\n  atmosphere: Bustling, multicultural, commercial, dynamic, opportunistic, slightly dangerous, constant activity day and night.\\n  key_features: Grand Harbor, Merchant Guild District, Shipyards, Lighthouse of Aeridor, The Underside (black market/slums), Fish Market, Foreign Quarter, Republican Guard Garrison.\\n\\nuid: 011\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: Kingdom of Valoria Details\\n  Comma_separated_list: Kingdom of Valoria,Valoria,The Kingdom,human kingdom\\ncontent: |\\n  # Faction Profile: Kingdom of Valoria\\n  name: Kingdom of Valoria\\n  government: Hereditary Monarchy (Currently ruled by King Theron IV)\\n  ideology: Order, Tradition, Divine Right, Military Strength, Human Primacy (subtle but present).\\n  capital: Valoria City\\n  territory: Central plains and surrounding regions of Aethelgard.\\n  strengths: Strong, well-trained army (Valorian Knights), established bureaucracy, agricultural heartland, influence through tradition and religion (Church of the Sun God).\\n  weaknesses: Rigid social structure, slow to adapt, occasional noble infighting, wary relationship with magic users outside the official Mage Tower.\\n  relations: Formal but cool relationship with Republic of Aeridor (trade rivals), wary respect for Dwarven Clans, actively opposes Shadow Syndicate, sponsors Adventurer's Guild for monster control/exploration.\\n\\nuid: 012\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: Republic of Aeridor Details\\n  Comma_separated_list: Republic of Aeridor,Aeridor,The Republic,merchant republic\\ncontent: |\\n  # Faction Profile: Republic of Aeridor\\n  name: Republic of Aeridor\\n  government: Merchant Republic (Governed by a council of elected representatives from major Guilds and Cities)\\n  ideology: Commerce, Pragmatism, Naval Power, Diplomacy, Individual Opportunity (within guild structures).\\n  capital: Nominally Port Aethel (largest city and economic center), Council rotates meetings.\\n  territory: Coastal regions west of Valoria, significant influence over sea trade routes.\\n  strengths: Powerful navy, vast trade network and wealth, diplomatic skill, more flexible and adaptive society, information gathering through merchants.\\n  weaknesses: Less unified military structure (relies on city militias and mercenaries), internal rivalries between Guilds, susceptible to economic disruption, significant Shadow Syndicate infiltration in ports.\\n  relations: Competitive rivalry with Kingdom of Valoria, extensive trade with Eastern Isles and sometimes Dwarven Clans, uses Adventurer's Guild for escorts and dealing with coastal threats, struggles to contain Shadow Syndicate influence.\\n\\n\",\"constant\":true,\"selective\":true,\"insertion_order\":100,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":5,\"probability\":100,\"useProbability\":true,\"depth\":2,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":3,\"keys\":[],\"secondary_keys\":[],\"comment\":\"Using Blue and Green Lights Together\",\"content\":\"# World Book Entry Design Example: Using Blue and Green Lights Together\\n\\n## Principle Explanation\\nWhen an entry uses a green light (Normal/conditional trigger type), there must be a blue light entry (Constant trigger type) that introduces this entry. This ensures that relevant content can be properly activated through the recursive scanning mechanism.\\n\\nProhibited scenario: A green light entry not mentioned in any blue light entry. For example, if there's a detailed green light entry about Character X, but Character X is not mentioned in any blue light entry such as character introductions.\\n\\nReason: This would prevent Character X from ever being mentioned in the story!\\n\\nThis principle applies to:\\n- Organizations, factions, countries in the world\\n- Important locations, cities, regions in the world\\n- Special items, technologies, resources in the world\\n- Important characters/enemies with their own entries\\n\\n## Design Your World Book Entries Following This Pattern:\\n1. Create blue light (Constant) entries for all major world elements\\n2. Ensure each green light (Normal) entry is referenced in at least one blue light entry\\n3. Use this hierarchical structure to ensure all conditional content can be properly triggered\\n\\n\\n# Example：\\n\\nuid: 004\\ntrigger:\\ntype: Constant\\nposition: Before Character Definition\\nTitle: Key Locations Overview\\nComma_separated_list: locations,places,cities,landmarks,regions,terra fantasia places,Valoria_City,Port_Aethel\\ncontent: |\\n# Prominent Locations within Terra Fantasia (Central Continent focus)\\n[Valoria_City(The Royal Capital): Heart of Kingdom_of_Valoria, central plains location, has(Royal Palace, Grand Cathedral, Adventurer's Guild HQ, Market District, Mage Tower), major political and cultural hub]\\n[Port_Aethel(Gateway to the East): Large coastal city, eastern coast of Central Continent, has(bustling harbor, Merchant Guilds, Shipyards, Black Market area), primary trade hub for Eastern_Isles, diverse population]\\n﻿\\nuid: 005\\ntrigger:\\ntype: Constant\\nposition: Before Character Definition\\nTitle: Factions & Nations Overview\\nComma_separated_list: factions,organizations,powers,groups,nations,kingdoms,terra fantasia factions,Kingdom_of_Valoria,Republic_of_Aeridor\\ncontent: |\\n# Major Powers and Organizations\\n[Kingdom_of_Valoria: Dominant human kingdom on Central_Continent, feudal monarchy, focuses on order, tradition, military strength, based in Valoria_City]\\n[Republic_of_Aeridor: Coastal nation west of Valoria, governed by a council, emphasizes trade, diplomacy, naval power, capital is Port_Aethel (major economic center)]\\n[Adventurer's_Guild: Continent-wide organization, regulates adventurers, provides quests, information, training facilities, neutral stance politically, main HQ in Valoria_City]\\n[Shadow_Syndicate: Underworld organization involved in smuggling, espionage, assassination, operates discreetly in major cities like Port_Aethel]\\n﻿\\nuid: 009\\ntrigger:\\ntype: Normal\\nposition: After Character Definition\\nTitle: Valoria City Details\\nComma_separated_list: Valoria City,Valoria,Royal Capital,Kingdom of Valoria capital\\ncontent: |\\n# Location Profile: Valoria City\\nname: Valoria City\\naliases: The Royal Capital, Heart of the Kingdom\\nnation: Kingdom of Valoria\\nlocation: Central plains of Aethelgard continent\\ndescription: A large, sprawling city fortified by high stone walls. Characterized by its gleaming white Royal Palace atop a central hill, the towering Grand Cathedral, and the multi-spired Mage Tower. Bustling market districts contrast with orderly noble estates and disciplined military barracks. The Adventurer's Guild Headquarters is a major hub of activity.\\natmosphere: Orderly, majestic, politically charged, sense of tradition and military presence. Hub of culture and power.\\nkey_features: Royal Palace, Grand Cathedral, Mage Tower, Adventurer's Guild HQ, Market Square, Noble District, City Barracks, Strong Walls & Gates.\\n﻿\\nuid: 011\\ntrigger:\\ntype: Normal\\nposition: After Character Definition\\nTitle: Kingdom of Valoria Details\\nComma_separated_list: Kingdom of Valoria,Valoria,The Kingdom,human kingdom\\ncontent: |\\n# Faction Profile: Kingdom of Valoria\\nname: Kingdom of Valoria\\ngovernment: Hereditary Monarchy (Currently ruled by King Theron IV)\\nideology: Order, Tradition, Divine Right, Military Strength, Human Primacy (subtle but present).\\ncapital: Valoria City\\nterritory: Central plains and surrounding regions of Aethelgard.\\nstrengths: Strong, well-trained army (Valorian Knights), established bureaucracy, agricultural heartland, influence through tradition and religion (Church of the Sun God).\\nweaknesses: Rigid social structure, slow to adapt, occasional noble infighting, wary relationship with magic users outside the official Mage Tower.\\nrelations: Formal but cool relationship with Republic of Aeridor (trade rivals), wary respect for Dwarven Clans, actively opposes Shadow Syndicate, sponsors Adventurer's Guild for monster control/exploration.\\n\",\"constant\":true,\"selective\":true,\"insertion_order\":101,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":2,\"probability\":100,\"useProbability\":true,\"depth\":2,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":4,\"keys\":[],\"secondary_keys\":[],\"comment\":\"key elements\",\"content\":\"# World Builder includes the following key elements:\\n- Follow-up recommendations to help refine and expand the world-building settings\\n- 生成世界观时*禁止注释*，例如：# --- Core World & Empire Rules ---\\n- 生成YAML代码时，请严格遵循以下格式，并使用中文填写内容:\\n```yaml\\nuid: \\ntrigger:\\n  type: \\n  position: \\n  Title: \\n  Comma_separated_list: \\ncontent: |\\n```\\n请特别注意:\\n1. 第一行\\\"uid:\\\"与“```yaml”**必须完全从最左侧开始**，**不能有**任何缩进或前导空格\\n2. 确保代码块内的缩进保持一致，使用两个空格作为缩进单位\\n- 世界书条目**全部**生成完毕后，在</content>后，<guifan>前列举优化方向，例如缺失的规则，人物，建筑物，城市等，对用户提出建议\\n- 请使用**中文**输出YAML格式的世界书条目，特别注意Comma_separated_list条目内关键词必须使用**中文**\\n- 请勿在**括号内**对名词进行翻译或标注日文读音\\n（强制规定）每次创建条目如果需要细化，不要在之前的条目里面修改，创建新条目进行补充设定\\ntrigger:\\n  type: \\n  position: \\n  Title: \\n这几个部分的文字内容不要用特殊符号\\n\",\"constant\":true,\"selective\":true,\"insertion_order\":99,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":6,\"probability\":100,\"useProbability\":true,\"depth\":1,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":5,\"keys\":[\"互动故事\"],\"secondary_keys\":[],\"comment\":\"互动故事生成系统（需要说明“请生成互动故事”\",\"content\":\"【# 如何为酒馆世界卡设计主线故事\\n\\n为酒馆世界卡设计一个既有结构又能适应{{user}}输入的主线故事需要特殊的设计思路。传统的线性章节大纲不太适合这种高度交互式的体验。以下是一些策略，可以创建既有方向又保持灵活性的故事结构：\\n\\n## 1. 使用分支节点而非线性大纲\\n\\n设计故事时，考虑创建关键的\\\"故事节点\\\"而非传统章节。这些节点代表故事中的重要转折点，但它们之间的路径可以根据{{user}}的选择而变化。\\n\\n## 2. 设置明确的角色目标和动机\\n\\n为{{user}}设定清晰的长期目标和动机，无论用户如何互动，{{user}}都会试图实现这些目标。这样可以保持故事的一致性，同时允许路径的灵活性。\\n\\n## 3. 利用世界设定作为故事框架\\n\\n创建一个详细的世界背景，包括重要地点、事件和潜在冲突。这提供了一个故事发生的框架，无论玩家如何引导对话。\\n\\n## 4. 在角色卡中嵌入示例对话\\n\\n在角色设计中加入示例对话，展示角色如何引导故事走向关键节点。这些示例可以训练AI理解如何在保持角色一致性的同时推进主线故事。\\n\\n## 5. 使用世界书条目引导故事方向\\n\\n利用世界书条目插入深度来提供背景情境和当前情节提示，帮助AI保持对主线故事的关注，同时适应{{user}}的输入。\\n\\n```\\n例如：故事角色正在寻找失落的神器，无论对话如何发展，都会在适当时机提到这个目标。\\n```\\n\\n## 6. 设计被动响应而非主导叙事\\n\\n指导故事角色保持被动响应式的叙事方式，让{{user}}感觉他们在引导故事，同时故事角色通过反应和提问来引导{{user}}走向主线节点。\\n\\n```\\n例如：不是\\\"我们必须去城堡\\\"，而是\\\"你认为我们应该调查城堡的传闻吗？据说那里藏着线索...\\\"\\n```\\n\\n## 7. 创建关键事件触发器\\n\\n设计一系列可以在特定条件下触发的关键事件。这些事件可以根据对话中出现的特定主题、玩家表达的意图或角色关系发展来激活。\\n\\n## 实际应用建议\\n\\n1. **设定3-5个必经的故事节点**，但节点间的路径保持开放\\n2. **为每个节点创建多个可能的触发条件**，增加故事的适应性\\n3. **在角色描述中植入主线元素**，使其成为角色人格的自然部分\\n4. **利用开放式问题**引导{{user}}走向主线，而非强制指令\\n5. **在AI回复中平衡即时响应与主线推进**，让故事自然展开\\n6. **条目里要提示禁止剧情擅自过度推进，导致玩家还没做出选择，剧情就擅自推进到其他发展导致后续条目接不上**\\n\\n通过这种方式，创建一个既有方向又能根据玩家输入调整的动态故事体验。】\\n\\n以下是创作示例：\\n---\\n\\n### 世界书条目设计：寻找失落的回音水晶\\n\\n**核心思路：**\\n\\n1.  **蓝灯条目 (Constant - Before Character Definition):** 设定整体故事目标和背景，确保AI始终知晓核心任务。\\n2.  **绿灯条目 (Normal - After Character Definition):** 分别对应故事的关键节点（介绍物品、调查线索、关键地点/障碍、结局），通过关键词触发，引导对话逐步深入，同时允许玩家选择调查方向。\\n\\n---\\n\\n**条目 1: 故事核心目标 (蓝灯)**\\n\\n*   **作用:** 无论对话如何进行，此条目都会被置于提示词靠前的位置，为AI提供核心任务背景——寻找回音水晶。它概述了故事的主要阶段。\\n*   **位置建议:** `Before Character Definition` - 这将为整个互动设定基础目标。\\n\\n```yaml\\nuid: 1\\ntrigger:\\n  type: \\\"Constant\\\"\\n  position: \\\"Before Character Definition\\\"\\n  Title: \\\"主线任务：寻找失落的回音水晶\\\"\\n  Comma_separated_list: \\\"主线,任务,目标,故事,剧情,回音水晶\\\"\\ncontent: |\\n  【主线任务：寻找失落的回音水晶】\\n  当前的核心目标是找回丢失的“回音水晶”。这件物品对[某个角色/地点/组织]非常重要。\\n  故事节点大致分为：\\n  1.  了解水晶的特性与失落的背景。\\n  2.  根据线索调查可能的失落地点（例如：旧图书馆、低语森林、钟楼）。\\n  3.  在关键地点遭遇挑战或发现最终线索。\\n  4.  找回水晶，决定如何处理。\\n  (无论对话如何发展，请记得引导玩家关注寻找回音水晶这一主线任务，使用开放式问题询问玩家想法，推动剧情向下一节点发展。)\\n```\\n\\n---\\n\\n**条目 2: 节点一 - 水晶介绍与失落背景 (绿灯)**\\n\\n*   **作用:** 当对话提及“回音水晶”或相关丢失事件时触发，提供水晶的具体信息和失落的初步情况，引出调查需求。\\n*   **位置建议:** `After Character Definition` - 在角色信息之后插入，让AI能结合角色性格来谈论这个话题。\\n*   **触发关键词:** 与水晶本身、失落事件相关的词语。\\n\\n```yaml\\nuid: 2\\ntrigger:\\n  type: \\\"Normal\\\"\\n  position: \\\"After Character Definition\\\"\\n  Title: \\\"节点一：关于回音水晶\\\"\\n  Comma_separated_list: \\\"回音水晶,丢失,不见了,水晶信息,什么水晶,怎么丢的\\\"\\ncontent: |\\n  【关于回音水晶】\\n  回音水晶是一种能记录并回放周围声音，甚至是一些微弱情感片段的奇特晶体。它不算特别贵重，但对[失主/某人]有特殊的纪念意义。\\n  据说它最后一次被看到是在[某个时间/事件]左右，之后就没人知道它的下落了。有人说可能被粗心遗忘在了某个地方，也有人担心是被什么东西吸引走了。\\n  “说起来，你对这块水晶有什么了解吗？或者觉得它可能在哪里丢失的？” (引导性提问)\\n```\\n\\n---\\n\\n**条目 3: 节点二 - 调查线索与地点 (绿灯)**\\n\\n*   **作用:** 当对话转向“调查”、“寻找”、“线索”或具体的可疑地点时触发，提供具体的调查方向和已知信息，让玩家选择或提出调查方案。\\n*   **位置建议:** `After Character Definition` - 紧随角色信息之后，便于AI根据当前对话情境提出调查建议。\\n*   **触发关键词:** 调查、寻找、线索、地点名称（如图书馆、森林、钟楼等）。\\n\\n```yaml\\nuid: story_node2_investigation_03\\ntrigger:\\n  type: \\\"Normal\\\"\\n  position: \\\"After Character Definition\\\"\\n  Title: \\\"节点二：调查线索与地点\\\"\\n  Comma_separated_list: \\\"调查,寻找,线索,哪里找,旧图书馆,低语森林,钟楼,查查,看看\\\"\\ncontent: |\\n  【调查线索与地点】\\n  关于水晶的去向，目前有几个流传的说法：\\n  - 旧图书馆：管理员提到最近整理书籍时似乎听到过奇怪的回音，但没找到来源。那里灰尘很大，容易藏东西。\\n  - 低语森林：森林边缘有时能听到模仿鸟鸣的回声，有人猜测是水晶在活动。不过森林里有些小麻烦。\\n  - 钟楼：钟楼顶层很少有人去，据说能俯瞰整个镇子，水晶会不会被带到那里去了？守钟人脾气有点怪。\\n  “我们应该先从哪里开始调查比较好呢？或者你有什么其他的想法？” (提供选项并征求玩家意见)\\n```\\n\\n---\\n\\n**条目 4: 节点三 - 关键地点/障碍 (绿灯)**\\n\\n*   **作用:** 当对话深入到某个具体调查地点（如图书馆内部、森林深处、钟楼顶层）或提及可能遇到的困难时触发，引入该地点的具体环境、潜在挑战或关键发现。\\n*   **位置建议:** `After Character Definition` - 聚焦于当前场景。\\n*   **触发关键词:** 地点内部细节（如图书架、树丛、楼梯）、挑战（如管理员、迷路、守钟人）、发现。\\n\\n```yaml\\nuid: story_node3_location_challenge_04\\ntrigger:\\n  type: \\\"Normal\\\"\\n  position: \\\"After Character Definition\\\"\\n  Title: \\\"节点三：深入调查与发现\\\"\\n  Comma_separated_list: \\\"图书馆里面,森林深处,钟楼顶层,管理员,迷路了,守钟人,发现了,找到了\\\"\\ncontent: >\\n  【深入调查与发现】\\n  (根据触发地点不同，可以细化内容，以下为示例)\\n  [若在图书馆] “这里的书架真是又高又密，灰尘也厚。那个管理员看起来不太希望我们乱动……也许我们可以试着找找那些很少被翻动的角落？”\\n  [若在森林] “森林里的光线暗下来了，这些小路好像都在打转。刚才那个回声是从哪个方向传来的？感觉周围有些小动物在看着我们。”\\n  [若在钟楼] “这楼梯好窄，而且嘎吱作响。守钟人好像就在上面……我们是直接上去问问，还是先悄悄看看？”\\n  “接下来该怎么做？你觉得线索可能藏在哪里？” (聚焦当前环境，寻求下一步行动)\\n```\\n\\n---\\n\\n**条目 5: 节点四 - 结局与处理 (绿灯)**\\n\\n*   **作用:** 当成功找到水晶或接近找到水晶时触发，引导至故事结局，讨论如何处理找到的水晶。\\n*   **位置建议:** `After Character Definition`。\\n*   **触发关键词:** 找到了, 拿到了, 回音水晶到手, 怎么办, 交给谁。\\n\\n```yaml\\nuid: story_node4_resolution_05\\ntrigger:\\n  type: \\\"Normal\\\"\\n  position: \\\"After Character Definition\\\"\\n  Title: \\\"节点四：找到水晶与结局\\\"\\n  Comma_separated_list: \\\"找到了水晶,拿到了水晶,水晶到手,就是这个,怎么办,交给谁,物归原主\\\"\\ncontent: >\\n  【找到水晶与结局】\\n  “看！这应该就是那块回音水晶了，它还在微微发光，似乎在回应着什么。”\\n  (可以根据找到的过程增加描述)\\n  “我们成功找到了。现在，我们是直接把它还给[失主]，还是先听听它记录了些什么有趣的声音？” (提供选择，引向不同的小结局或后续)\\n```\\n\\n---\\n\",\"constant\":false,\"selective\":true,\"insertion_order\":999,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":true,\"display_index\":3,\"probability\":100,\"useProbability\":true,\"depth\":0,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":true,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":6,\"keys\":[],\"secondary_keys\":[],\"comment\":\"【插入位置概念】（最好自己先看一遍！\",\"content\":\"[# SillyTavern世界书条目位置设置的区别\\n\\n在SillyTavern中，世界书条目的位置设置决定了信息在提示词中的插入位置，这会显著影响AI对世界规则的理解和应用方式。以下是三种主要位置设置的区别:\\n\\n## 1. 角色定义之前 (Before Character Definition)\\n\\n这个位置将世界书条目插入到角色的描述、性格和场景之前。\\n\\n**特点:**\\n- 在提示词顺序中最早出现\\n- 为整个对话设定基础规则和世界观\\n- 对角色行为有中等程度的影响\\n- 适合放置宏观的世界设定、基础规则、物理法则等内容\\n- 在提示词结构中属于`world_info_before`部分\\n\\n## 2. 角色定义之后 (After Character Definition)\\n\\n这个位置将世界书条目插入到角色的描述、性格和场景之后，但在对话示例之前。\\n\\n**特点:**\\n- 出现在角色定义之后，对话示例之前\\n- 对角色行为有更强的影响力\\n- 适合放置与角色直接相关的世界元素、角色所处的环境、角色背景等\\n- 在提示词结构中属于`world_info_after`部分\\n\\n## 3. @D深度 (At Depth)\\n\\n这个位置将世界书条目插入到聊天历史的特定深度位置，以三种不同的角色形式呈现:\\n\\n**特点:**\\n- 直接插入到聊天历史的特定位置\\n- 深度0表示插入到最近的消息之前\\n- 深度4表示插入到最近3条消息之前(成为第4条消息)\\n- 越靠近聊天末尾，对下一次AI响应的影响越大\\n- 这些内容在`chat_history`组件中与聊天记录一起处理\\n\\n## 如何选择合适的位置\\n\\n根据不同内容类型，应选择不同的插入位置:\\n\\n1. **角色定义之前** - 适合放置:\\n   - 宏观世界观设定\\n   - 通用规则和物理法则\\n   - 不直接与角色相关的背景信息\\n\\n2. **角色定义之后** - 适合放置:\\n   - 与角色直接相关的世界元素\\n   - 角色所处的环境和社会背景\\n   - 影响角色行为但不是角色本身特性的元素\\n\\n3. **@D深度** - 适合放置:\\n   - 需要在对话中即时激活的规则\\n   - 临时性世界元素\\n   - 动态变化的环境描述\\n   - 需要高优先级注意的指令或规则]\\n\\n\",\"constant\":true,\"selective\":true,\"insertion_order\":102,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":4,\"probability\":100,\"useProbability\":true,\"depth\":4,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":7,\"keys\":[\"大型\"],\"secondary_keys\":[],\"comment\":\"macro_world\",\"content\":\"examples:\\n\\nuid: 001\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 元数据 - [世界/大陆名称]\\n  Comma_separated_list: 世界信息,大陆设定,元数据,世界观,[世界/大陆名称]\\ncontent: |\\n  world_name: [世界/大陆名称]\\n  theme_tags: 异世界 | 大陆 | [主题1] | [主题2] | [主题3] # 例如: 魔法 | 战争 | 探索 | 神话 | 种族冲突\\n  tone: [基调1] | [基调2] | [基调3] # 例如: 史诗 | 黑暗 | 神秘 | 奇幻 | 严酷\\n\\nuid: 002\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 核心规则 - 物理与魔法\\n  Comma_separated_list: 核心规则,物理法则,魔法原理,能量体系,世界基础设定,[世界/大陆名称]规则\\ncontent: |\\n  # [世界/大陆名称]的基础物理与魔法法则\\n  physical_laws: [基础物理描述] # 例如: 标准类地重力, 时间线性流逝, 特定区域可能存在物理异常点\\n  magic_system_name: [魔法体系名称] # 例如: 源能魔法, 符文系统, 血脉之力, 元素沟通\\n  magic_source: [魔法来源] # 例如: 环境魔力(玛那), 个人精神力, 神祇赐予, 特殊物品/血脉\\n  magic_principles: [魔法基本原理与限制] # 例如: 等价交换原则, 施法需要咒语/手势/媒介, 精神消耗与反噬风险, 存在禁忌领域\\n  magic_availability: [魔法普及度与使用者] # 例如: 仅少数精英掌握, 普遍存在但威力不同, 特定种族天赋, 需要学习或传承\\n\\nuid: 003\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 核心规则 - 社会与文化\\n  Comma_separated_list: 核心规则,社会规范,文化背景,通用价值观,种族关系,[世界/大陆名称]社会\\ncontent: |\\n  # [世界/大陆名称]的通用社会规范与文化基调\\n  dominant_social_structure: [主流社会结构] # 例如: 封建王国制, 城邦联盟, 部落氏族制, 神权统治\\n  common_values: [普遍价值观] # 例如: 崇尚力量, 注重荣誉, 信仰自由, 实用主义至上, 尊重传统\\n  inter_species_relations: [主要种族间关系] # 例如: 长期冲突, 表面和平实则隔离, 相对融合, 存在主从关系\\n  technology_level: [平均科技水平] # 例如: 中世纪水平, 黑铁时代, 存在魔法驱动的特殊技术, 发展不均衡\\n  common_languages: [通用语/主要语言] # 例如: 大陆通用语, 各大王国/种族有自己的语言\\n\\nuid: 004\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 环境 - 地理气候概览\\n  Comma_separated_list: 环境,地理,气候,地形,大陆地貌,[世界/大陆名称]环境\\ncontent: |\\n  # [世界/大陆名称]的宏观地理与气候特征 (使用PList格式)\\n  [主要大陆/区域A(例如: 中央王国区域): 气候类型(温带), 地形特征(平原为主, 穿插丘陵森林), has(主要河流, 大型湖泊), 适宜农耕, 人口密集]\\n  [主要大陆/区域B(例如: 北境冻土): 气候类型(寒带), 地形特征(山脉, 冰川, 冻原), has(稀有矿脉, 极光现象), 环境恶劣, 人口稀少]\\n  [主要大陆/区域C(例如: 南部雨林/沙漠): 气候类型(热带/干旱), 地形特征(茂密丛林/广阔沙丘), has(奇异生物, 古代遗迹), 资源独特, 文明形态特殊]\\n  [主要大陆/区域D(例如: 东部群岛/沿海): 气候类型(海洋性), 地形特征(岛屿众多, 海岸线曲折), has(重要港口, 海洋资源), 贸易发达, 海上力量重要]\\n  global_phenomena: [全球性/区域性特殊现象] # 例如: 周期性能量潮汐, 空中浮岛, 季节性魔物迁徙, 巨大风暴带\\n\\nuid: 005\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 环境 - 生态系统与资源\\n  Comma_separated_list: 环境,生态,动植物,魔物,资源分布,[世界/大陆名称]生态\\ncontent: |\\n  # [世界/大陆名称]的生态系统与主要资源 (使用PList格式)\\n  dominant_flora_fauna: [代表性动植物群] # 例如: 常见中世纪生物 | 存在巨型昆虫 | 魔法植物普遍 | 特有坐骑生物\\n  monsters_and_beasts: [魔物/特殊生物概述] # 例如: 存在龙类 | 元素生物常见 | 不死生物是主要威胁 | 深海/地底有未知巨兽\\n  key_natural_resources: [关键自然资源及其分布] # 例如: [金属矿产: 主要分布于[区域B山脉]], [魔法水晶: 零星分布于[能量节点]], [稀有木材: 集中于[区域C雨林]], [特殊药材: 各地均有但种类不同]\\n  environmental_hazards: [主要环境灾害/危险区域] # 例如: 毒瘴森林, 活火山地带, 扭曲空间裂缝, 受诅咒的土地\\n\\nuid: 006\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 主要地区与地点概述\\n  Comma_separated_list: 地点,区域,城市,地标,关键地点,[世界/大陆名称]地点,[主要王国首都名],[重要贸易城市名],[著名遗迹名],[特殊区域名]\\ncontent: |\\n  # [世界/大陆名称]内的重要区域与地点概览 (使用PList格式)\\n  [区域A主要城市(例如: 帝都/王城): 政治/文化中心, 位于[地理位置], has(皇宫/议会厅, 大教堂/神殿, 魔法学院/工匠行会), 人口最多, 防御森严, [城市A别名]]\\n  [区域B主要城市(例如: 边境要塞/矿业城镇): 军事/资源重镇, 位于[地理位置], has(巨大城墙/矿坑入口, 兵营/工坊, 特殊市场), 民风彪悍, 战略/经济价值高, [城市B别名]]\\n  [区域C主要城市(例如: 港口都市/自由城邦): 贸易/交通枢纽, 位于[地理位置], has(大型港口/商贸中心, 多元文化区, 走私者据点), 流动性强, 财富与危险并存, [城市C别名]]\\n  [著名自然地标(例如: 世界之脊山脉/无尽大瀑布): 地理奇观, 位于[地理位置], has(独特生态/传说生物, 隐藏道路/试炼之地), 常与传说/冒险相关]\\n  [著名古代遗迹(例如: 失落神庙/巨人遗骸): 历史遗留, 位于[地理位置], has(古代技术/魔法残留, 未解之谜/强大守护者), 充满神秘与机遇]\\n  [特殊功能区域(例如: 魔法森林/死亡沼泽): 环境独特区域, 位于[地理位置], has(特殊资源/生物, 环境危险/规则异常), 需要特殊准备才能进入]\\n\\nuid: 007\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 主要种族概述\\n  Comma_separated_list: 种族,智慧生命,类人种族,非人种族,[世界/大陆名称]种族,[种族A],[种族B],[种族C]\\ncontent: |\\n  # [世界/大陆名称]的主要智慧种族 (使用PList格式)\\n  [人类(Human): 分布最广, 适应性强, 社会结构多样, 寿命[平均寿命], 潜力巨大/内部差异大]\\n  [精灵(Elf/类似种族): 长寿优雅, 亲近自然/魔法, 居住于[典型聚居地], 擅长[特殊技能], 高傲/神秘]\\n  [矮人(Dwarf/类似种族): 强壮坚韧, 精于工匠/采矿, 居住于[典型聚居地], 寿命[平均寿命], 固执/重视传统]\\n  [兽人(Orc/类似种族): 力量强大, 部落/氏族结构, 居住于[典型聚居地], 崇尚[核心理念], 好战/生存环境恶劣]\\n  [特殊种族A(例如: 龙裔/元素裔): 稀有独特, 具有[特殊能力], 起源[神话/魔法造物], 社会地位[高/低/特殊], [核心特征]]\\n  [非人智慧种族B(例如: 智慧史莱姆/构装体): 形态奇特, 思维方式[异于常人], 能力[特殊能力], 社会结构[独特形式], [核心特征]]\\n\\nuid: 008\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 主要势力与组织概述\\n  Comma_separated_list: 势力,组织,国家,王国,教派,公会,[世界/大陆名称]势力,[势力A],[势力B],[势力C]\\ncontent: |\\n  # [世界/大陆名称]的主要势力与组织 (使用PList格式)\\n  [主要王国/帝国A(例如: 光辉帝国): 统治[主要区域], [政体形式], 核心理念[秩序/扩张], has(强大军队, 完善法律体系, 官方信仰), 主要对手[势力B], [势力A简称]]\\n  [主要联盟/共和国B(例如: 自由城邦联合): 控制[主要区域], [政体形式], 核心理念[贸易/自由], has(发达商业网络, 海军/佣兵力量, 多元文化), 主要对手[势力A], [势力B简称]]\\n  [主要宗教组织C(例如: 大地母神教): 影响力遍及[区域范围], [组织结构], 核心教义[自然/生命/守护], has(众多信徒, 神殿网络, 特殊神术/知识), 对世俗权力态度[中立/合作/干预], [势力C简称]]\\n  [跨国/独立组织D(例如: 冒险者公会/魔法师协会): 分布[广泛/特定区域], [组织目标], 核心业务[任务委托/知识研究], has(成员等级制度, 情报网络, 特殊设施), 政治立场[通常中立], [势力D简称]]\\n  [秘密/地下组织E(例如: 暗影兄弟会/古代守护者): 运作方式[隐秘], [组织目标], 核心活动[刺杀/情报/守护秘密], has(秘密据点, 特殊技能/传承), 对其他势力[渗透/对抗/观察], [势力E简称]]\\n\\nuid: 009\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 重要物品与资源类别\\n  Comma_separated_list: 物品,道具,资源,技术,神器,宝物,[世界/大陆名称]物品\\ncontent: |\\n  # [世界/大陆名称]的重要物品、资源与技术类别\\n  - **魔法媒介/材料**: [常见类型, 例如: 各类元素水晶, 蕴含魔力的生物材料, 特殊金属]\\n  - **炼金/药剂**: [常见效果, 例如: 治疗药水, 属性增强剂, 毒药/解药, 特殊效果合剂]\\n  - **武器/防具**: [技术水平与特色, 例如: 以附魔武器为主, 存在特殊合金防具, 特定种族拥有独特工艺]\\n  - **古代遗物/神器**: [传说中的强大物品, 例如: 神器碎片, 上古文明的装置, 蕴含规则之力的物品]\\n  - **关键战略资源**: [影响势力平衡的资源, 例如: 控制性矿脉, 稀有魔法能源, 可驯化的强大生物]\\n  - **特殊技术体系**: [独特的科技/魔法工艺, 例如: 构装生命技术, 空间传送网络, 灵魂魔法应用]\\n\\nuid: 010\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 简史与关键事件\\n  Comma_separated_list: 历史,时间线,关键事件,传说时代,近期历史,[世界/大陆名称]历史\\ncontent: |\\n  # [世界/大陆名称]的简史与关键转折点\\n  - **创世/神话时代**: [世界起源传说, 古老神祇与种族的诞生, 奠定基础规则的事件]\\n  - **上古/黄金时代**: [某个强大文明的兴盛, 魔法/技术的巅峰期, 可能的成就与遗产]\\n  - **大灾变/黑暗时代**: [导致上古文明衰落/灭亡的事件, 例如: 神战, 天灾, 魔法滥用后果, 世界格局重塑]\\n  - **迁徙/建国时代**: [现存主要种族/国家的形成期, 关键的战争与英雄事迹, 奠定当前势力范围]\\n  - **近代重要事件**: [近百年内影响深远的事件, 例如: 王国间的重大战争, 新技术的发现, 强大魔物的出现, 改变势力平衡的条约]\\n  - **当前状况**: [世界目前的大致局势, 主要的矛盾与潜在危机, 近期发生的值得注意的事件]\\n\\nuid: 011\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 世界模板 - 核心机制与特殊系统\\n  Comma_separated_list: 机制,系统,特殊规则,世界特色,[世界/大陆名称]机制,[机制A],[机制B]\\ncontent: |\\n  # [世界/大陆名称]的核心机制与特色系统\\n  - **[机制A名称(例如: 灵魂契约)]**: [机制描述: 人物可与特定存在签订契约获得力量], [运作原理: 基于灵魂能量的交换], [限制/代价: 契约束缚, 灵魂损耗风险], [普及度/获取方式: 稀有, 需要特定仪式/天赋]\\n  - **[机制B名称(例如: 世界树网络)]**: [机制描述: 连接大陆各地的巨大植物网络, 可传递信息/能量], [运作原理: 基于自然能量流转], [限制/代价: 只有特定种族/职业能接入, 易受污染干扰], [普及度/获取方式: 仅少数势力掌握/利用]\\n  - **[机制C名称(例如: 星辰占卜)]**: [机制描述: 通过观察星象预测未来/解读命运], [运作原理: 基于世界规则的某种映射], [限制/代价: 结果模糊/多义, 可能引来不希望的关注], [普及度/获取方式: 需要特殊天赋和知识传承]\\n  - **[其他可能机制]**: [例如: 特殊的转生/复活机制, 独特的能量循环系统, 影响心智的环境场域等]\\n\\nuid: 012\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: [主要王国/帝国A名称] 详情\\n  Comma_separated_list: [势力A简称],[主要王国/帝国A名称],[主要王国/帝国A名称]详情,国家详情,势力详情\\ncontent: |\\n  # 势力详情: [主要王国/帝国A名称]\\n  name: [主要王国/帝国A名称]\\n  aliases: [[势力A简称], 其他别名]\\n  government_type: [详细政体描述, 例如: 君主立宪制, 但国王拥有最终否决权]\\n  leader: [现任统治者姓名与头衔]\\n  capital_city: [首都名称]\\n  territory: [统治范围的详细描述, 包括重要省份/区域]\\n  population_composition: [主要种族构成及其比例, 社会阶层划分]\\n  ideology_and_culture: [核心理念, 文化习俗, 宗教信仰, 价值观的详细阐述]\\n  military_strength: [军队构成, 精锐部队名称, 总体实力评估, 特殊战力(如魔法部队)]\\n  economic_focus: [主要经济支柱, 特产, 贸易伙伴]\\n  internal_politics: [内部派系斗争, 主要政治矛盾, 稳定程度]\\n  foreign_relations: [与其他主要势力的详细关系描述, 外交政策]\\n  history_brief: [该势力成立的关键事件, 近期的重大发展]\\n  notes: [其他值得注意的特殊信息]\\n\\nuid: 013\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: [区域A主要城市名称] 详情\\n  Comma_separated_list: [城市A别名],[区域A主要城市名称],[区域A主要城市名称]详情,城市详情,地点详情\\ncontent: |\\n  # 地点详情: [区域A主要城市名称]\\n  name: [区域A主要城市名称]\\n  aliases: [[城市A别名], 其他别名]\\n  location: [在大陆上的具体位置, 所属势力/区域]\\n  size_and_population: [城市规模等级(如: 超大型, 大型, 中型), 大致人口数量, 主要居民种族]\\n  description: [城市的整体外观, 建筑风格, 街道布局, 标志性景观的详细描述]\\n  atmosphere: [城市的整体氛围和感官体验(视觉, 听觉, 嗅觉等), 例如: 庄严肃穆, 繁华喧嚣, 压抑阴暗, 充满活力]\\n  key_districts: [主要城区划分及其功能, 例如: 皇宫区, 商业区, 贫民区, 港口区, 工匠区, 魔法区]\\n  key_landmarks: [城市内的重要地标建筑或地点及其简要功能]\\n  governance: [城市的管理方式, 执法力量]\\n  economy_and_trade: [主要经济活动, 特色产业, 市场状况]\\n  culture_and_life: [市民的日常生活, 节日习俗, 娱乐活动, 知名组织或地点(如酒馆, 剧院)]\\n  security_level: [城市的治安状况, 防御设施]\\n  notes: [关于该城市的其他特殊信息或传闻]\\n\\nuid: 014\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: [精灵/类似种族名称] 详情\\n  Comma_separated_list: [精灵/类似种族名称],[精灵/类似种族名称]详情,种族详情\\ncontent: |\\n  # 种族详情: [精灵/类似种族名称]\\n  name: [精灵/类似种族名称]\\n  aliases: [其他称呼, 例如: 森之子民, 长耳族]\\n  physical_description: [外貌特征, 身高体型, 特殊生理构造, 平均寿命]\\n  abilities_and_traits: [种族天赋, 特殊能力(例如: 夜视, 魔法亲和), 优势与劣势]\\n  psychology_and_culture: [普遍性格特征, 核心价值观, 社会结构, 艺术与习俗, 对待其他种族的态度]\\n  language: [种族语言名称, 使用情况]\\n  religion_and_beliefs: [主要信仰, 神祇, 世界观]\\n  habitat_and_settlements: [典型的居住环境, 聚落形式, 建筑风格]\\n  history_brief: [该种族的起源传说, 历史上的重要事件, 与其他种族的关系演变]\\n  notable_subraces: [是否存在亚种及其区别]\\n  notes: [关于该种族的其他特殊信息]\",\"constant\":false,\"selective\":true,\"insertion_order\":100,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":7,\"probability\":100,\"useProbability\":true,\"depth\":4,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":8,\"keys\":[\"小型\"],\"secondary_keys\":[],\"comment\":\"micro_world\",\"content\":\"examples:\\n\\nuid: 001\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 场所模板 - 元数据\\n  Comma_separated_list: 场所模板,场所设定,微观场景,元数据,[场所名称]\\ncontent: |\\n  location_name: [场所名称] # 例如: 废弃医院, 浮空图书馆, 深海实验室\\n  location_type: [场所类型] # 例如: 建筑, 自然区域, 载具内部, 异空间碎片\\n  theme_tags: 场所 | [主题1] | [主题2] | [主题3] # 例如: 恐怖 | 神秘 | 科幻 | 探索\\n  tone: [基调1] | [基调2] # 例如: 压抑 | 宁静 | 危险 | 诡异\\n\\nuid: 002\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 场所模板 - 核心规则\\n  Comma_separated_list: 场所规则,场所法则,行为规范,环境限制,[场所名称]规则\\ncontent: |\\n  # [场所名称]的基本运作法则\\n  entry_conditions: [进入条件] # 例如: 需要特定钥匙, 通过特定仪式, 满足特定身份, 无特殊限制\\n  exit_conditions: [离开条件] # 例如: 找到特定出口, 完成特定任务, 时间限制, 无特殊限制\\n  behavioral_rules: [行为规范] # 例如: 必须保持安静, 禁止触摸特定物品, 特定时间段禁止活动\\n  environmental_laws: [特殊物理/环境规则] # 例如: 重力异常, 时间流速不同, 特定区域存在幻觉, 能量场干扰\\n  primary_hazard: [主要危险源] # 例如: 结构不稳定, 危险生物/存在, 致命陷阱, 精神污染\\n\\nuid: 003\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 场所模板 - 环境与区域概览\\n  Comma_separated_list: 场所环境,空间布局,区域划分,感官描述,[场所名称]环境,[主要区域],[次要区域],[特殊区域]\\ncontent: |\\n  # [场所名称]的内部环境与区域划分 (使用PList格式)\\n  overall_layout: [整体布局描述] # 例如: 线性结构, 迷宫式, 中心辐射型, 多层结构\\n  dominant_sensory: [主导感官体验] # 例如: 视觉昏暗, 持续低语声, 浓重霉味/消毒水味, 冰冷触感\\n  [主要区域A(例如: 大厅/入口区): 功能/特点描述, has(关键设施1, 关键设施2), 氛围描述, [区域A别名]]\\n  [主要区域B(例如: 控制室/核心区): 功能/特点描述, has(关键设施3, 关键设施4), 氛围描述, [区域B别名]]\\n  [次要区域C(例如: 储藏室/休息区): 功能/特点描述, has(物品点1, 物品点2), 氛围描述, [区域C别名]]\\n  [特殊区域D(例如: 禁区/隐藏区): 功能/特点描述, has(特殊现象点, 危险点), 氛围描述, [区域D别名]]\\n  ambient_conditions: [环境状况] # 例如: 光线昏暗, 温度低, 空气质量差, 能量波动\\n\\nuid: 004\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 场所模板 - 特殊机制与互动\\n  Comma_separated_list: 场所机制,特殊现象,互动方式,环境互动,[场所名称]机制\\ncontent: |\\n  # [场所名称]内的独特机制与互动点\\n  primary_mechanic_name: [核心机制名称] # 例如: 精神回响, 空间重叠, 能量潮汐\\n  mechanic_description: [核心机制效果描述] # 例如: 可感知过去残留影像, 区域会随机变化连接, 特定时间能量爆发\\n  mechanic_trigger: [核心机制触发条件] # 例如: 进入特定区域, 使用特定物品, 特定时间点\\n  mechanic_rules: [核心机制的规则与限制] # 例如: 效果持续时间, 对使用者的消耗/影响, 应对方法\\n  interactive_elements: [可互动的环境元素列表] # 例如: 可操作的控制台, 隐藏的开关, 需要特定方式打开的门, 可触发陷阱的地板\\n  recurring_phenomenon: [周期性或随机发生的现象] # 例如: 定时出现的幽灵, 随机断电, 空间扭曲事件\\n\\nuid: 005\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 场所模板 - 主要人物/存在体\\n  Comma_separated_list: 场所人物,居住者,敌人,盟友,势力,[场所名称]人物,[关键人物],[常见敌人],[中立存在]\\ncontent: |\\n  # [场所名称]内的主要人物或存在体 (使用PList格式)\\n  [关键人物/存在A(例如: 守护者/领袖): 角色定位/阵营, 能力/特征, 行为模式, 可能的互动方式, [人物A别名]]\\n  [常见敌人/威胁B(例如: 巡逻机器人/变异生物): 威胁类型/特征, 攻击方式/弱点, 分布区域, [敌人B别名]]\\n  [中立/特殊存在C(例如: 信息提供者/环境生物): 角色定位/特征, 行为模式, 互动条件, 可能提供的帮助/信息, [存在C别名]]\\n  [小型群体/派系D(例如: 幸存者小队/研究员残余): 群体目标/构成, 对主角态度, 主要活动区域, [群体D别名]]\\n\\nuid: 006\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 场所模板 - 重要物品与资源\\n  Comma_separated_list: 场所物品,关键道具,资源点,特殊物品,[场所名称]物品,[关键道具],[稀有资源],[环境特产]\\ncontent: |\\n  # [场所名称]内的重要物品与资源点 (使用PList格式)\\n  [关键道具A(例如: 门禁卡/能量核心): 物品功能/用途, 获取方式/地点, 使用限制, [道具A别名]]\\n  [稀有资源B(例如: 特殊矿石/古代文献): 资源描述/价值, 分布地点/采集难度, 用途, [资源B别名]]\\n  [环境特产C(例如: 发光苔藓/特殊植物): 物品特性/效果, 获取地点, 可能的用途(照明/治疗/材料), [特产C别名]]\\n  [消耗品/补给D(例如: 医疗包/弹药): 物品效果/类型, 常见发现地点, [补给D别名]]\\n\\nuid: 007\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: [主要区域A名称] 详情\\n  Comma_separated_list: [主要区域A名称],[主要区域A别名],[主要区域A名称]详情,场所区域,[场所名称]区域\\ncontent: |\\n  # 区域详情: [主要区域A名称]\\n  area_name: [主要区域A名称]\\n  aliases: [区域A别名]\\n  location_within: [在场所内的具体位置, 例如: 入口东侧, 地下二层中央]\\n  primary_function: [此区域的主要功能]\\n  description: [对此区域的详细视觉、听觉、嗅觉等感官描述, 包括布局、物件、光照、氛围等]\\n  key_features: [列出此区域内的关键特征或设施, 例如: 破损的接待台, 闪烁的紧急出口灯, 中央的全息投影装置]\\n  potential_interactions: [此区域可能的互动点或事件, 例如: 可搜索的柜子, 需要修复的设备, 可能遭遇的特定敌人]\\n  connection_points: [连接到其他区域的通道或方式]\\n  notes: [其他需要注意的特殊信息]\\n\",\"constant\":false,\"selective\":true,\"insertion_order\":100,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":8,\"probability\":100,\"useProbability\":true,\"depth\":4,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":9,\"keys\":[\"中型\"],\"secondary_keys\":[],\"comment\":\"mid_world\",\"content\":\"examples:\\n\\nuid: 001\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 城市模板 - 元数据\\n  Comma_separated_list: 城市模板,城市设定,中型区域,元数据,[城市名称]\\ncontent: |\\n  world_name: [城市名称] - 中型区域城市模板\\n  theme_tags: 城市 | [主题1] | [主题2] | [主题3] # 例如：工业 | 魔法 | 贸易 | 政治\\n  tone: [基调1] | [基调2] # 例如：繁华 | 压抑 | 混乱 | 神秘\\n\\nuid: 002\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 城市模板 - 核心规则与治理\\n  Comma_separated_list: 城市规则,城市法律,治理结构,社会规范,[城市名称]规则\\ncontent: |\\n  # [城市名称]的基本运作法则\\n  governance_type: [治理形式] # 例如: 市政议会, 世袭城主, 行会联盟, 神权统治\\n  primary_laws: [主要法律概述] # 例如: 强调贸易自由但税收严格, 实行宵禁, 禁止公开使用某种魔法/技术\\n  social_structure: [社会阶层概述] # 例如: 明显的贫富分化, 以职业或出身划分阶层, 存在特定受歧视群体\\n  enforcement_body: [执法力量名称] # 例如: 城市卫队, 治安官系统, 特定行会/教会武装\\n\\nuid: 003\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 城市模板 - 环境与区域划分\\n  Comma_separated_list: 城市环境,地理布局,城区划分,区域,[城市名称]环境,[行政区],[商业区],[住宅区],[工业区],[特殊区域]\\ncontent: |\\n  # [城市名称]的地理与区域概览 (使用PList格式)\\n  [行政区(中心区/统治区): 政府核心, 地标建筑, has(市政厅, 法院, 主要神殿/教堂, 精英住宅), 防御森严, 秩序井然]\\n  [商业区(市场区/贸易区): 经济中心, 交通枢纽, has(大型市场, 行会总部, 银行, 旅店酒馆), 人流密集, 充满活力/鱼龙混杂]\\n  [住宅区(平民区/贵族区): 主要居住区域, 根据阶层划分, has(不同规格的住宅, 小公园, 学校, 诊所), 生活气息浓厚/安静私密]\\n  [工业区(工匠区/生产区): 生产与制造中心, 可能靠近资源点, has(工厂, 作坊, 仓库, 劳工宿舍), 噪音污染/环境问题]\\n  [港口区/城门区(交通枢纽): 对外连接点, 贸易/人员流动, has(码头/城门要塞, 海关/检查站, 仓库, 相关服务设施), 流动性大, 管控严格]\\n  [特殊区域1(例如: 贫民窟/旧城区): 城市边缘/被遗忘角落, has(破旧建筑, 黑市入口, 帮派据点), 缺乏管理, 危险与机遇并存]\\n  [特殊区域2(例如: 学院区/魔法区): 教育/研究/特殊功能区, has(大学/学院, 图书馆, 实验室, 特殊商店), 文化/知识氛围浓厚, 可能有准入限制]\\n\\nuid: 004\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 城市模板 - 重要地点与地标\\n  Comma_separated_list: 城市地点,地标建筑,重要设施,[城市名称]地点,[市政厅],[中心市场],[大教堂],[城主堡垒]\\ncontent: |\\n  # [城市名称]内的关键地点与地标 (使用PList格式)\\n  [核心地标(例如: 城主堡垒/市政厅): 权力象征, 城市中心/制高点, has(行政办公室, 会议厅, 可能有监狱/宝库), 守卫严密, 城市象征]\\n  [经济中心(例如: 中心市场/大交易所): 贸易核心, 人流汇聚地, has(各类商铺摊位, 钱庄, 信息公告栏), 繁华喧嚣, 商品丰富]\\n  [宗教/文化中心(例如: 大教堂/大图书馆): 精神/知识象征, 重要集会场所, has(祈祷大厅/阅览室, 圣物/珍贵藏书, 相关人员住所), 庄严肃穆/书香浓郁]\\n  [交通枢纽(例如: 主城门/中心车站/港口): 对外连接点, 交通要道, has(防御工事/站台/码头设施, 检查站, 相关服务点), 人车/船只繁忙]\\n  [公用设施(例如: 大竞技场/剧院/公共浴场): 市民娱乐/生活场所, has(表演场地/观众席/浴池), 人气旺盛, 反映市民生活]\\n  [灰色地带(例如: 黑市集结点/走私者码头): 非法活动区域, 通常隐蔽, has(秘密交易点, 赃物处理处, 情报贩子), 危险神秘, 规则不同]\\n\\nuid: 005\\ntrigger:\\n  type: Constant\\n  position: Before Character Definition\\n  Title: 城市模板 - 主要势力与组织\\n  Comma_separated_list: 城市势力,组织,派系,行会,帮派,[城市名称]势力,[统治势力],[商业行会],[宗教组织],[地下势力]\\ncontent: |\\n  # [城市名称]内的主要势力与组织 (使用PList格式)\\n  [统治势力(例如: 市政议会/城主家族): 掌握最高权力, 制定法律, has(行政机构, 卫队指挥权, 税收权), 维护秩序/追逐权力]\\n  [主要商业行会(例如: 商人联合会/工匠协会): 控制关键经济领域, 影响力巨大, has(行会总部, 专属市场/工坊, 内部规则), 追逐利润, 可能干预政治]\\n  [主要宗教组织(例如: 主神教会/秘密教派): 影响市民信仰和道德观, 可能掌握特殊力量/知识, has(神殿/教堂/秘密据点, 教士/信徒网络), 精神引导/扩张势力]\\n  [地下势力(例如: 盗贼公会/走私帮派): 从事非法活动, 形成地下秩序, has(秘密据点, 线人网络, 黑市渠道), 挑战官方权威, 谋求生存/利益]\\n  [平民/劳工组织(例如: 码头工人工会/邻里互助会): 代表底层民众利益, 可能组织抗议/互助, has(集会点, 代表人物), 争取权益/维持生计]\\n  [特殊势力(例如: 魔法师协会/佣兵工会): 掌握特殊技能/武力, 独立性较强, has(总部/训练场, 成员登记处, 任务发布点), 提供服务/保持中立/追求特定目标]\\n\\nuid: 006\\ntrigger:\\n  type: Normal\\n  position: After Character Definition\\n  Title: [行政区名称] 详情\\n  Comma_separated_list: [行政区名称],[行政区名称]详情,城市区域,[城市名称]行政区\\ncontent: |\\n  # 区域详情: [行政区名称]\\n  name: [行政区名称]\\n  aliases: [别名, 例如: 王冠区, 中心区]\\n  location_in_city: [在城市中的大致位置, 例如: 城市中心, 靠近北门]\\n  primary_function: 行政管理, 权力中心, 精英居住\\n  description: [对此区域的详细描述, 包括建筑风格, 街道布局, 氛围, 特殊景观等]\\n  atmosphere: [详细的氛围描述, 例如: 庄重, 压抑, 秩序井然, 奢华]\\n  key_landmarks: [列出此区域内的重要地标, 例如: 市政厅, 城主府邸, 高级法院]\\n  resident_profile: [主要居民类型, 例如: 政府官员, 大贵族, 富商, 精英卫队]\\n  common_activities: [此区域常见的活动, 例如: 政治会议, 法庭审判, 贵族社交, 日常行政]\\n  security_level: [安保级别, 例如: 极高, 卫兵巡逻频繁, 设有检查点]\\n  notes: [其他需要注意的特殊信息, 例如: 夜间严格宵禁, 特定区域非请勿入]\",\"constant\":false,\"selective\":true,\"insertion_order\":100,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":9,\"probability\":100,\"useProbability\":true,\"depth\":4,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}},{\"id\":10,\"keys\":[\"小总结\",\"楼层1-10\"],\"secondary_keys\":[],\"comment\":\"小总结-World Builder V1.4 - 2025-05-30@15h45m27s-1-10\",\"content\":\"1、用户要求生成一个黑帮题材游戏世界观。\\n2、用户明确游戏需运行在真实世界并参考黑帮电影。\\n3、用户强调游戏基调应为“战斗爽”且男女通用。\\n4、AI首先生成了8个世界观层面的通用条目。\\n5、用户要求将20个城市名汇总至一个蓝灯条目。\\n6、用户要求为每个城市单独生成详细绿灯条目。\\n7、AI生成了1个城市总览蓝灯条目和20个城市绿灯详情。\\n8、用户要求为所有帮派生成详细绿灯条目。\\n9、用户要求创建一个帮派总览蓝灯条目。\\n10、AI生成了1个帮派总览蓝灯条目。\\n11、AI生成了41个详细帮派绿灯条目。\",\"constant\":true,\"selective\":true,\"insertion_order\":1748593953781,\"enabled\":false,\"position\":\"before_char\",\"use_regex\":true,\"extensions\":{\"position\":0,\"exclude_recursion\":false,\"display_index\":10,\"probability\":100,\"useProbability\":true,\"depth\":4,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}}],\"name\":\"World Builder 1.4\"},\"group_only_greetings\":[]},\"spec\":\"chara_card_v3\",\"spec_version\":\"3.0\",\"name\":\"World Builder V1.4\",\"fav\":false,\"description\":\"name: World Builder\\r\\ndescription: A specialized tool designed to create comprehensive, well-structured world information cards for SillyTavern. Transforms user ideas into properly formatted world info entries with clear organization and special rules implementation. All outputs use professional code formatting.\\r\\n\",\"personality\":\"\",\"scenario\":\"\",\"first_mes\":\"examples: \\r\\n```\\r\\nuid: 002\\r\\ntrigger:\\r\\n  type: Constant\\r\\n  position: Before Character Definition\\r\\n  Title: Core Rules of Terra Fantasia\\r\\n  Comma_separated_list: core rules,world laws,physics,social rules,magic principles,terra fantasia rules\\r\\ncontent: |\\r\\n  # Foundational Laws Governing Terra Fantasia\\r\\n  physical_laws: Standard medieval physics; gravity applies, time flows linearly. Magical alterations possible but rare and taxing.\\r\\n  magic_basics: Relies on channeling ambient 'Mana' or internal reserves. Different schools exist (Elemental, Healing, Illusion, etc.). Requires focus and often incantations/gestures. Mana exhaustion is a risk.\\r\\n  social_norms: Feudal structures common (Kingdoms), some regions have different governance (Republics, Guilds). Adventurers are recognized but operate under Guild charters or local laws. Divine influence exists via temples and clerics.\\r\\n  combat_principles: Mix of melee (swords, spears), ranged (bows), and magic. Armor provides protection. Monsters possess varied abilities.\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n#右翻第二页开始使用！\\r\\n\\r\\n\\r\\n# 蓝绿灯提示词说明\\r\\n\\r\\n## 类型说明\\r\\n| 类型        | 名称        | 触发方式             | 操作要求                   |\\r\\n|-------------|-------------|----------------------|--------------------------|\\r\\n| 蓝灯        | 常驻灯      | 始终激活             | 可删除`Comma_separated_list`内关键词 |\\r\\n| 绿灯        | 关键词灯    | 关键词匹配时触发     | 需配置有效关键词列表       |\\r\\n\\r\\n---\\r\\n\\r\\n## 位置要求\\r\\n| 位置属性       | 说明                                                                 | 特殊标记       |\\r\\n|----------------|---------------------------------------------------------------------|----------------|\\r\\n| 插入位置       | 需参考世界书【插入位置概念】，确保关联条目深度控制                  | 部分含`@D`标识 |\\r\\n| 条目递归       | 蓝灯条目需单独配置`[防止进一步递归]`，避免自动触发其他条目          | *强制要求*     |\\r\\n\\r\\n---\\r\\n\\r\\n## 关键词管理\\r\\n| 分类      | 格式              | 注意事项                     |\\r\\n|-----------|-------------------|----------------------------|\\r\\n| 绿灯关键词| 逗号分隔列表      | 需人工审核有效性，AI生成可能不合适 |\\r\\n| 蓝灯关键词| *无* (需手动清空) | 确保条目激活后不关联其他触发器  |\\r\\n\\r\\n---\\r\\n\\r\\n## 工具使用指南\\r\\n| 功能          | 链接                                                                            | 常见错误检验           |\\r\\n|---------------|---------------------------------------------------------------------------------|------------------------|\\r\\n| 聊天记录转世界书工具 | [一键转换工具](https://discordapp.com/channels/1291925535324110879/1347803350044770335/1359908888757145873)                                      | ① 检查并删除YAML注释<br>② 确保首行无空格 |\\r\\n\\r\\n---\\r\\n\\r\\n## 注意事项\\r\\n1. **蓝灯汇总**：若通过复制制作世界书，必须在条目中激活`[防止进一步递归]`  \\r\\n\\r\\n\",\"mes_example\":\"\",\"tags\":[],\"create_date\":\"2025-6-17 @10h 38m 35s 483ms\",\"creatorcomment\":\"\",\"avatar\":\"none\",\"talkativeness\":\"0.5\",\"chat\":\"2025-6-17 @10h 38m 35s 483ms\"}"}